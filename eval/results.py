class Results:
    
  data = {}
  data['CoFloCo'] = {
  'T2/ex17': { "stdout": True, 'originalBound': "102 ", 'parsedBound': "102", 'degree': 0.0, 'variableCount': 0, 'time': 862 },
  'T2/ex4': { "stdout": True, 'originalBound': "34 ", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 964 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.fixed': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 2839 },
  'T2/pgarch': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/dsa_test10': { "stdout": True, 'originalBound': "23 ", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 404 },
  'T2/hongyi1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/curious4': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 4437 },
  'T2/n-1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 370 },
  'T2/polyrank1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 295 },
  'T2/bubbleSort': { "stdout": True, 'originalBound': "max([ (1*C+1)* (1*C)+1*C+1*C+4,5]) ", 'parsedBound': "max((C + 1) * C + C + C + 4, 5)", 'degree': 2.0, 'variableCount': 1, 'time': 937 },
  'T2/heidy1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 303 },
  'T2/example': { "stdout": True, 'originalBound': "max([1*A+1*B+1,1]) ", 'parsedBound': "max(A + B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 378 },
  'T2/polling.bug': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/slayer-1-rf': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 10717 },
  'T2/simple_fail': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 259 },
  'T2/neg-smagilla-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 848 },
  'T2/cnt': { "stdout": True, 'originalBound': "243 ", 'parsedBound': "243", 'degree': 0.0, 'variableCount': 0, 'time': 2225 },
  'T2/polyrank7': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 338 },
  'T2/select': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 30604 },
  'T2/bf19': { "stdout": True, 'originalBound': "139 ", 'parsedBound': "139", 'degree': 0.0, 'variableCount': 0, 'time': 1229 },
  'T2/p-61': { "stdout": True, 'originalBound': "902 ", 'parsedBound': "902", 'degree': 0.0, 'variableCount': 0, 'time': 343 },
  'T2/bf14': { "stdout": True, 'originalBound': "109 ", 'parsedBound': "109", 'degree': 0.0, 'variableCount': 0, 'time': 1224 },
  'T2/eric1': { "stdout": True, 'originalBound': "max([nat(1*B+ -1+ (1*B+ -1)* (1*B+ -2))*2+nat(1*B+ -1+ (1*B+ -1)* (1*B+ -2))+ (1*B+2)* (1*B)+2,2]) ", 'parsedBound': "max(max(0, B + -1 + (B + -1) * (B + -2)) * 2 + max(0, B + -1 + (B + -1) * (B + -2)) + (B + 2) * B + 2, 2)", 'degree': 2.0, 'variableCount': 1, 'time': 577 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ctl': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 474 },
  'T2/heidy10': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 311 },
  'T2/n-1d': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 409 },
  'T2/p-9': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 319 },
  'T2/bf7': { "stdout": True, 'originalBound': "67 ", 'parsedBound': "67", 'degree': 0.0, 'variableCount': 0, 'time': 1221 },
  'T2/p-1d': { "stdout": True, 'originalBound': "max([-1*A+1*B+2,2]) ", 'parsedBound': "max(-1 * A + B + 2, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 404 },
  'T2/p-13': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 257 },
  'T2/neg-pgarch-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 644 },
  'T2/n-37': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 351 },
  'T2/ex29': { "stdout": True, 'originalBound': "4 ", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 329 },
  'T2/qrdcmp': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/eric3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 337 },
  'T2/heidy6': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 410 },
  'T2/magic': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-52': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 353 },
  'T2/fun2b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf13': { "stdout": True, 'originalBound': "103 ", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 1213 },
  'T2/p-44': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 325 },
  'T2/ex26': { "stdout": True, 'originalBound': "203 ", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 403 },
  'T2/fun4': { "stdout": True, 'originalBound': "max([-1*A+2*B+1,1,min([1/2*A+ -1*B+3/2,1*A+1])+1]) ", 'parsedBound': "max(-1 * A + 2 * B + 1, 1, min(1 / 2 * A + -1 * B + 3 / 2, A + 1) + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 548 },
  'T2/toeplz': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 40911 },
  'T2/1394-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/jacobi': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/destroy': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 4062 },
  'T2/rlft3.c.i.rlft3.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/smagilla-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 702 },
  'T2/ex1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 310 },
  'T2/fun9': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/collatz': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 371 },
  'T2/consts1nt': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 289 },
  'T2/n-5': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1437 },
  'T2/slayer-2-filtered': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 317 },
  'T2/broydn.c.i.broydn.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf16': { "stdout": True, 'originalBound': "121 ", 'parsedBound': "121", 'degree': 0.0, 'variableCount': 0, 'time': 1220 },
  'T2/heidy3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 323 },
  'T2/dead.neg-st88b-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 530 },
  'T2/dsa_test5': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 263 },
  'T2/nested2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 458 },
  'T2/neg-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/simple_pre1': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 259 },
  'T2/byron-3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 309 },
  'T2/bubblesort_inner_loop': { "stdout": True, 'originalBound': "6 ", 'parsedBound': "6", 'degree': 0.0, 'variableCount': 0, 'time': 353 },
  'T2/neg-e-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex23': { "stdout": True, 'originalBound': "38 ", 'parsedBound': "38", 'degree': 0.0, 'variableCount': 0, 'time': 314 },
  'T2/sas2': { "stdout": True, 'originalBound': "max([4*C+2,-4*C+1010,5]) ", 'parsedBound': "max(4 * C + 2, -4 * C + 1010, 5)", 'degree': 1.0, 'variableCount': 1, 'time': 5954 },
  'T2/simple_array_inversion': { "stdout": True, 'originalBound': "4 ", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 287 },
  'T2/w2_nt': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 5327 },
  'T2/non_term': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 291 },
  'T2/iecs': { "stdout": True, 'originalBound': "max([1*B+1,1]) ", 'parsedBound': "max(B + 1, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 309 },
  'T2/simple_pre3': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 263 },
  'T2/ex2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 349 },
  'T2/e-popl07-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 5540 },
  'T2/e-pgarch-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 713 },
  'T2/matrixsqrt': { "stdout": True, 'originalBound': "31 ", 'parsedBound': "31", 'degree': 0.0, 'variableCount': 0, 'time': 1390 },
  'T2/streamserver.bug': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-7b': { "stdout": True, 'originalBound': "max([-1*B+1*C+2,2]) ", 'parsedBound': "max(-1 * B + C + 2, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 355 },
  'T2/broydn.c.i.broydn.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/s3-work': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/jacobi.c.i.jacobi.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex27': { "stdout": True, 'originalBound': "595 ", 'parsedBound': "595", 'degree': 0.0, 'variableCount': 0, 'time': 11101 },
  'T2/fdct': { "stdout": True, 'originalBound': "19 ", 'parsedBound': "19", 'degree': 0.0, 'variableCount': 0, 'time': 1043 },
  'T2/loop3': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/agafp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/6': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 280 },
  'T2/zeroconf_withassume': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-7': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 318 },
  'T2/hqr': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-32': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 293 },
  'T2/simpleWhile': { "stdout": True, 'originalBound': "max([1*C+3,3]) ", 'parsedBound': "max(C + 3, 3)", 'degree': 1.0, 'variableCount': 1, 'time': 692 },
  'T2/p-8': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 319 },
  'T2/byron-2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 438 },
  'T2/ex33': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 263 },
  'T2/svdcmp': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 2718 },
  'T2/ex7': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 336 },
  'T2/buggyNonTermLoop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/rev_nt4': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 262 },
  'T2/slayer-n1-filtered': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 2515 },
  'T2/p-42': { "stdout": True, 'originalBound': "max([-1*B+5,2,-1*A+4]) ", 'parsedBound': "max(-1 * B + 5, 2, -1 * A + 4)", 'degree': 1.0, 'variableCount': 2, 'time': 417 },
  'T2/p-19': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 323 },
  'T2/insertsort': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 422 },
  'T2/p-15': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 288 },
  'T2/matmul': { "stdout": True, 'originalBound': "223 ", 'parsedBound': "223", 'degree': 0.0, 'variableCount': 0, 'time': 510 },
  'T2/241': { "stdout": True, 'originalBound': "max([1*A+nat((1*A+ -1)* (1*A+ -1)+1*A)+1,1]) ", 'parsedBound': "max(A + max(0, (A + -1) * (A + -1) + A) + 1, 1)", 'degree': 2.0, 'variableCount': 1, 'time': 360 },
  'T2/traverse_seg2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 45085 },
  'T2/n-12': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 368 },
  'T2/destroy_seg': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 6623 },
  'T2/huh': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1427 },
  'T2/p-1c': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 344 },
  'T2/ex18': { "stdout": True, 'originalBound': "302 ", 'parsedBound': "302", 'degree': 0.0, 'variableCount': 0, 'time': 628 },
  'T2/n-46': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 336 },
  'T2/dropbuf-live': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 260 },
  'T2/n-21': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 336 },
  'T2/p-20': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 360 },
  'T2/fun8': { "stdout": True, 'originalBound': "32 ", 'parsedBound': "32", 'degree': 0.0, 'variableCount': 0, 'time': 9382 },
  'T2/ex21': { "stdout": True, 'originalBound': "203 ", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 407 },
  'T2/p-58': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 263 },
  'T2/p-34': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 2204 },
  'T2/sequential_swap': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 261 },
  'T2/n-48': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 341 },
  'T2/7': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 282 },
  'T2/n-40': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 888 },
  'T2/neg-e-acqrel-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 386 },
  'T2/intSqRoot': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 342 },
  'T2/n-9': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 425 },
  'T2/neg-smagilla-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 709 },
  'T2/p-10': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 351 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/streamserver-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/heidy7-simple': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 346 },
  'T2/nested': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 463 },
  'T2/neg-e-popl07-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 4754 },
  'T2/ex13': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 258 },
  'T2/n-12a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 276 },
  'T2/5': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 3360 },
  'T2/db3': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 39983 },
  'T2/simple_swap_call': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 260 },
  'T2/tqli.c.i.tqli.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/rev_nt2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 7203 },
  'T2/two_arrays6': { "stdout": True, 'originalBound': "max([8*E+9,9]) ", 'parsedBound': "max(8 * E + 9, 9)", 'degree': 1.0, 'variableCount': 1, 'time': 1875 },
  'T2/simple_pre': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 257 },
  'T2/sas1': { "stdout": True, 'originalBound': "max([4*B+8,5,max([min([3*B+ -9+min([1*B+ -3+min([1*B+ -3,3]),1*B]),4*B+ -3]),min([1*B+ -3+max([min([3*B+ -9+min([1*B+ -3,3]),min([1*B+ -3,3])+9]),min([3*B+ -9,9]),min([1*B+ -3+min([3*B+ -9,9]),min([3*B+ -9,9])+3])]),1*B]),min([1*B+ -3+max([min([3*B+ -9+min([1*B+ -3,3]),3*B]),min([1*B+ -3+min([3*B+ -9,9]),1*B])]),4*B+ -9]),min([3*B+ -9+max([min([1*B+ -3,3]),min([min([1*B+ -3,3]),9])]),3*B,3*B+ -9+max([min([1*B+ -3,3]),min([min([1*B+ -3,3]),3])])])])+2,1*B+8]) ", 'parsedBound': "max(4 * B + 8, 5, max(min(3 * B + -9 + min(B + -3 + min(B + -3, 3), B), 4 * B + -3), min(B + -3 + max(min(3 * B + -9 + min(B + -3, 3), min(B + -3, 3) + 9), min(3 * B + -9, 9), min(B + -3 + min(3 * B + -9, 9), min(3 * B + -9, 9) + 3)), B), min(B + -3 + max(min(3 * B + -9 + min(B + -3, 3), 3 * B), min(B + -3 + min(3 * B + -9, 9), B)), 4 * B + -9), min(3 * B + -9 + max(min(B + -3, 3), min(min(B + -3, 3), 9)), 3 * B, 3 * B + -9 + max(min(B + -3, 3), min(min(B + -3, 3), 3)))) + 2, B + 8)", 'degree': 1.0, 'variableCount': 1, 'time': 1292 },
  'T2/apchildlive-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/consts4nt': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 282 },
  'T2/fun5': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ns': { "stdout": True, 'originalBound': "937 ", 'parsedBound': "937", 'degree': 0.0, 'variableCount': 0, 'time': 964 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-32': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 297 },
  'T2/efegp': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 2027 },
  'T2/spiral': { "stdout": True, 'originalBound': "max([2*A+1*B+1,1*A+ -1*B+1,-1*A+2*B+1,-1*A+ -1*B+1,1*B+1,-1*B+1,1,-1*A+1,1*A+1,-2*A+ -1*B+1,-1*A+1*B+1,1*A+ -2*B+1,1*A+1*B+1]) ", 'parsedBound': "max(2 * A + B + 1, A + -1 * B + 1, -1 * A + 2 * B + 1, -1 * A + -1 * B + 1, B + 1, -1 * B + 1, 1, -1 * A + 1, A + 1, -2 * A + -1 * B + 1, -1 * A + B + 1, A + -2 * B + 1, A + B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 1075 },
  'T2/p-7': { "stdout": True, 'originalBound': "max([-1*B+1*C+2,2]) ", 'parsedBound': "max(-1 * B + C + 2, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 362 },
  'T2/p-41': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 260 },
  'T2/reverse_div4': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 7797 },
  'T2/n-18': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 290 },
  'T2/p-56': { "stdout": True, 'originalBound': "max([-1*D+2,2]) ", 'parsedBound': "max(-1 * D + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 437 },
  'T2/ex9': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 662 },
  'T2/n-36': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1493 },
  'T2/dropbuf': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 16827 },
  'T2/spctrm.c.i.spctrm.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf18': { "stdout": True, 'originalBound': "133 ", 'parsedBound': "133", 'degree': 0.0, 'variableCount': 0, 'time': 1212 },
  'T2/n-15': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 339 },
  'T2/a.10.c': { "stdout": True, 'originalBound': "max([2*D+ -2*F+2,-2*D+2*F+2,5,-2*A+2*B+4,2*A+ -2*B+4]) ", 'parsedBound': "max(2 * D + -2 * F + 2, -2 * D + 2 * F + 2, 5, -2 * A + 2 * B + 4, 2 * A + -2 * B + 4)", 'degree': 1.0, 'variableCount': 4, 'time': 485 },
  'T2/consts2nt': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 286 },
  'T2/dsa_test11': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 259 },
  'T2/ex19': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 541 },
  'T2/p-36': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 727 },
  'T2/slayer-n5-filtered': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/array': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 259 },
  'T2/reverse_seg_cyclic': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/array2': { "stdout": True, 'originalBound': "52 ", 'parsedBound': "52", 'degree': 0.0, 'variableCount': 0, 'time': 293 },
  'T2/queue_100': { "stdout": True, 'originalBound': "403 ", 'parsedBound': "403", 'degree': 0.0, 'variableCount': 0, 'time': 417 },
  'T2/ud': { "stdout": True, 'originalBound': "378 ", 'parsedBound': "378", 'degree': 0.0, 'variableCount': 0, 'time': 12159 },
  'T2/bsort100': { "stdout": True, 'originalBound': "10103 ", 'parsedBound': "10103", 'degree': 0.0, 'variableCount': 0, 'time': 2711 },
  'T2/traverse_twice': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex34': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 293 },
  'T2/ase_example': { "stdout": True, 'originalBound': "34 ", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 558 },
  'T2/ex40': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 321 },
  'T2/toeplz.c.i.toeplz.pl.t2.fixed': { "stdout": True, 'originalBound': "max([ (7/2*A+ -3/2)* (1*A)+2,3,max([min([1*A+ -3+ (7/2*A+ -3/2)* (1*A), (7/2*A+ -3/2)* (2*A+ -3)]),min([ (7/2*A+ -3/2)* (1*A+ -3)+1*A,2*A+ -3])])+2]) ", 'parsedBound': "max((7 / 2 * A + -3 / 2) * A + 2, 3, max(min(A + -3 + (7 / 2 * A + -3 / 2) * A, (7 / 2 * A + -3 / 2) * (2 * A + -3)), min((7 / 2 * A + -3 / 2) * (A + -3) + A, 2 * A + -3)) + 2)", 'degree': 2.0, 'variableCount': 1, 'time': 24162 },
  'T2/neg-popl07-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 3327 },
  'T2/statemate': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-12': { "stdout": True, 'originalBound': "max([1*A+3,2]) ", 'parsedBound': "max(A + 3, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 294 },
  'T2/Loop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/matmult': { "stdout": True, 'originalBound': "9724 ", 'parsedBound': "9724", 'degree': 0.0, 'variableCount': 0, 'time': 1481 },
  'T2/dsa_test12': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 268 },
  'T2/mc91': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 329 },
  'T2/n-6': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 392 },
  'T2/n-17': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 327 },
  'T2/bf6': { "stdout": True, 'originalBound': "61 ", 'parsedBound': "61", 'degree': 0.0, 'variableCount': 0, 'time': 1214 },
  'T2/slayer-1-filtered': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 8091 },
  'T2/two_arrays2': { "stdout": True, 'originalBound': "max([8*E+9,9]) ", 'parsedBound': "max(8 * E + 9, 9)", 'degree': 1.0, 'variableCount': 1, 'time': 1962 },
  'T2/queens': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/polyrank5': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 346 },
  'T2/randomwalk_withassume': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 46739 },
  'T2/p-22': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 291 },
  'T2/fun6': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 331 },
  'T2/apchild-accepted': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/array1': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 259 },
  'T2/afagp-fail': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 5270 },
  'T2/fun4-alt': { "stdout": True, 'originalBound': "max([-1*A+2*B+1,1,min([1/2*A+ -1*B+3/2,1*A+1])+1]) ", 'parsedBound': "max(-1 * A + 2 * B + 1, 1, min(1 / 2 * A + -1 * B + 3 / 2, A + 1) + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 497 },
  'T2/p-33': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 361 },
  'T2/two_arrays1': { "stdout": True, 'originalBound': "409 ", 'parsedBound': "409", 'degree': 0.0, 'variableCount': 0, 'time': 1460 },
  'T2/wtf': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/cover': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/fourn.c.i.fourn.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/consts5': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 272 },
  'T2/stored': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 502 },
  'T2/queue_10': { "stdout": True, 'originalBound': "43 ", 'parsedBound': "43", 'degree': 0.0, 'variableCount': 0, 'time': 415 },
  'T2/consts2': { "stdout": True, 'originalBound': "max([1*A+ -999,1]) ", 'parsedBound': "max(A + -999, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 283 },
  'T2/st88.bug': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 407 },
  'T2/n-6a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 403 },
  'T2/jfdctint': { "stdout": True, 'originalBound': "84 ", 'parsedBound': "84", 'degree': 0.0, 'variableCount': 0, 'time': 1560 },
  'T2/bf20': { "stdout": True, 'originalBound': "145 ", 'parsedBound': "145", 'degree': 0.0, 'variableCount': 0, 'time': 1221 },
  'T2/sudoku': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex12': { "stdout": True, 'originalBound': "20 ", 'parsedBound': "20", 'degree': 0.0, 'variableCount': 0, 'time': 319 },
  'T2/slayer-n3-filtered': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 305 },
  'T2/traverse2': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-10': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 536 },
  'T2/loop_on_input': { "stdout": True, 'originalBound': "6 ", 'parsedBound': "6", 'degree': 0.0, 'variableCount': 0, 'time': 308 },
  'T2/mc91test': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 737 },
  'T2/create_via_tmps': { "stdout": True, 'originalBound': "max([1*A+1,1]) ", 'parsedBound': "max(A + 1, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 3734 },
  'T2/fun3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/zeroconf': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/fuhs-inflasso': { "stdout": True, 'originalBound': "max([1*C+nat(1*C+ -1+ (1*C+ -1)* (1*C+ -1))+1,1]) ", 'parsedBound': "max(C + max(0, C + -1 + (C + -1) * (C + -1)) + 1, 1)", 'degree': 2.0, 'variableCount': 1, 'time': 437 },
  'T2/create': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 557 },
  'T2/bf5': { "stdout": True, 'originalBound': "55 ", 'parsedBound': "55", 'degree': 0.0, 'variableCount': 0, 'time': 1227 },
  'T2/disj_nightmare_abi': { "stdout": True, 'originalBound': "2 ", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 279 },
  'T2/fourn': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bitcount32': { "stdout": True, 'originalBound': "34 ", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 598 },
  'T2/byron-4': { "stdout": True, 'originalBound': "max([2*A+4,4]) ", 'parsedBound': "max(2 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 377 },
  'T2/n-3a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 668 },
  'T2/randomwalk': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 2654 },
  'T2/seq2': { "stdout": True, 'originalBound': "max([1*A+1,1]) ", 'parsedBound': "max(A + 1, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 284 },
  'T2/p-43': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 381 },
  'T2/invgen': { "stdout": True, 'originalBound': "max([1*B+2,1]) ", 'parsedBound': "max(B + 2, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 297 },
  'T2/sort': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/array_init_assign': { "stdout": True, 'originalBound': "7 ", 'parsedBound': "7", 'degree': 0.0, 'variableCount': 0, 'time': 327 },
  'T2/pentagon': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 643 },
  'T2/n-33': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 479 },
  'T2/ex37': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 259 },
  'T2/fun2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/slayer-4-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/toeplz.c.i.toeplz.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 40850 },
  'T2/n_firewire_instrumented-PP': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/vmcai_bytes': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 258 },
  'T2/ex11': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 381 },
  'T2/destroy_seg_leak': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-18a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 298 },
  'T2/queue_1': { "stdout": True, 'originalBound': "7 ", 'parsedBound': "7", 'degree': 0.0, 'variableCount': 0, 'time': 354 },
  'T2/n-13': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 296 },
  'T2/bf9': { "stdout": True, 'originalBound': "79 ", 'parsedBound': "79", 'degree': 0.0, 'variableCount': 0, 'time': 1224 },
  'T2/ex3': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 333 },
  'T2/queue_1000': { "stdout": True, 'originalBound': "4003 ", 'parsedBound': "4003", 'degree': 0.0, 'variableCount': 0, 'time': 423 },
  'T2/p-37': { "stdout": True, 'originalBound': "6 ", 'parsedBound': "6", 'degree': 0.0, 'variableCount': 0, 'time': 416 },
  'T2/rewrite': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 279 },
  'T2/p-63': { "stdout": True, 'originalBound': "max([1*A+3,2]) ", 'parsedBound': "max(A + 3, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 359 },
  'T2/fibcall': { "stdout": True, 'originalBound': "31 ", 'parsedBound': "31", 'degree': 0.0, 'variableCount': 0, 'time': 433 },
  'T2/selectSort': { "stdout": True, 'originalBound': "max([ (1*C+1)* (1*C)+1*C+1*C+4,5]) ", 'parsedBound': "max((C + 1) * C + C + C + 4, 5)", 'degree': 2.0, 'variableCount': 1, 'time': 1227 },
  'T2/ex30': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 640 },
  'T2/slayer-n1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 5580 },
  'T2/n-3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 345 },
  'T2/heidy5': { "stdout": True, 'originalBound': "max([1*B+2,2]) ", 'parsedBound': "max(B + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 315 },
  'T2/p-53': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 480 },
  'T2/ndes': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/elmhes.c.i.elmhes.pl.t2.fixed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 20642 },
  'T2/heidy8': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 521 },
  'T2/wrong_loop': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 364 },
  'T2/ex16': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1001 },
  'T2/3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 275 },
  'T2/rlft3': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/dsa_test6': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 295 },
  'T2/dsa_test1': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 260 },
  'T2/dsa_test': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 257 },
  'T2/sumit': { "stdout": True, 'originalBound': "max([-3*B+3*C+3,3,3*B+6,3*C+6]) ", 'parsedBound': "max(-3 * B + 3 * C + 3, 3, 3 * B + 6, 3 * C + 6)", 'degree': 1.0, 'variableCount': 2, 'time': 2241 },
  'T2/pldi': { "stdout": True, 'originalBound': "max([ (1*B+1)* (1*B)+4,4]) ", 'parsedBound': "max((B + 1) * B + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 647 },
  'T2/p-46': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 379 },
  'T2/neg-e-acqrel-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 509 },
  'T2/create_seg': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 647 },
  'T2/bitcount16': { "stdout": True, 'originalBound': "18 ", 'parsedBound': "18", 'degree': 0.0, 'variableCount': 0, 'time': 599 },
  'T2/jacobi.c.i.jacobi.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/popl07-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 2986 },
  'T2/fun1b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/nakata': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/cfg': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 287 },
  'T2/refine_disj_problem': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 348 },
  'T2/flipflop': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 280 },
  'T2/hqr.c.i.hqr.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/elmhes': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 16901 },
  'T2/hqr.c.i.hqr.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex8': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 525 },
  'T2/e-acqrel-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 364 },
  'T2/fake-succeed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ludcmp': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/afagx1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 343 },
  'T2/graycode': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/acqrel-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 431 },
  'T2/heidy9': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 298 },
  'T2/array3': { "stdout": True, 'originalBound': "103 ", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 353 },
  'T2/apchild-live': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/fir': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 5506 },
  'T2/fermat': { "stdout": True, 'originalBound': "13 ", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 1705 },
  'T2/oct_vs_subpoly': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 291 },
  'T2/1394-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/slayer-n2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 304 },
  'T2/seq': { "stdout": True, 'originalBound': "max([1*A+2,1]) ", 'parsedBound': "max(A + 2, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 288 },
  'T2/p-3': { "stdout": True, 'originalBound': "max([-1*A+1*B+3,3]) ", 'parsedBound': "max(-1 * A + B + 3, 3)", 'degree': 1.0, 'variableCount': 2, 'time': 325 },
  'T2/n-16a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 306 },
  'T2/ex14': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 300 },
  'T2/walk': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1009 },
  'T2/crc': { "stdout": True, 'originalBound': "2649 ", 'parsedBound': "2649", 'degree': 0.0, 'variableCount': 0, 'time': 15797 },
  'T2/1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1259 },
  'T2/n-1c': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 447 },
  'T2/bf17': { "stdout": True, 'originalBound': "127 ", 'parsedBound': "127", 'degree': 0.0, 'variableCount': 0, 'time': 1217 },
  'T2/n-15a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 399 },
  'T2/p-55': { "stdout": True, 'originalBound': "max([-1*A+103,2]) ", 'parsedBound': "max(-1 * A + 103, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 494 },
  'T2/p-40': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 314 },
  'T2/polling': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf10': { "stdout": True, 'originalBound': "85 ", 'parsedBound': "85", 'degree': 0.0, 'variableCount': 0, 'time': 1220 },
  'T2/n-14': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 402 },
  'T2/dsa_test13': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 257 },
  'T2/p-1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 319 },
  'T2/p-49': { "stdout": True, 'originalBound': "max([1*A+3,2]) ", 'parsedBound': "max(A + 3, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 299 },
  'T2/n-16': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 327 },
  'T2/new_ex': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 995 },
  'T2/consts4': { "stdout": True, 'originalBound': "max([1*A+ -1199,1]) ", 'parsedBound': "max(A + -1199, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 287 },
  'T2/print': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 51390 },
  'T2/smagillc-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1144 },
  'T2/fast_poll': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/heidy2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 308 },
  'T2/array_free': { "stdout": True, 'originalBound': "44 ", 'parsedBound': "44", 'degree': 0.0, 'variableCount': 0, 'time': 287 },
  'T2/polyrank3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 340 },
  'T2/eric2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 23054 },
  'T2/consts5nt': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 294 },
  'T2/w1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 278 },
  'T2/ex32': { "stdout": True, 'originalBound': "2003 ", 'parsedBound': "2003", 'degree': 0.0, 'variableCount': 0, 'time': 389 },
  'T2/edn': { "stdout": True, 'originalBound': "6723 ", 'parsedBound': "6723", 'degree': 0.0, 'variableCount': 0, 'time': 27915 },
  'T2/bs': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 690 },
  'T2/bio': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/consts1': { "stdout": True, 'originalBound': "200 ", 'parsedBound': "200", 'degree': 0.0, 'variableCount': 0, 'time': 299 },
  'T2/p-21': { "stdout": True, 'originalBound': "max([1*A+2*B+ -68,1*A+ -26,2,2*B+ -38]) ", 'parsedBound': "max(A + 2 * B + -68, A + -26, 2, 2 * B + -38)", 'degree': 1.0, 'variableCount': 2, 'time': 407 },
  'T2/heidy7': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 424 },
  'T2/p-1a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 342 },
  'T2/brp_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/dsa_test9': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 259 },
  'T2/p-16': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 289 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/consts3': { "stdout": True, 'originalBound': "max([1*A+ -200,1]) ", 'parsedBound': "max(A + -200, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 284 },
  'T2/fourn.c.i.fourn.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex36': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/slayer-3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex22': { "stdout": True, 'originalBound': "390 ", 'parsedBound': "390", 'degree': 0.0, 'variableCount': 0, 'time': 5238 },
  'T2/minmax': { "stdout": True, 'originalBound': "3 ", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 279 },
  'T2/complex_guard': { "stdout": True, 'originalBound': "10 ", 'parsedBound': "10", 'degree': 0.0, 'variableCount': 0, 'time': 312 },
  'T2/bf12': { "stdout": True, 'originalBound': "97 ", 'parsedBound': "97", 'degree': 0.0, 'variableCount': 0, 'time': 1212 },
  'T2/traverse': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 26884 },
  'T2/ex20': { "stdout": True, 'originalBound': "1026 ", 'parsedBound': "1026", 'degree': 0.0, 'variableCount': 0, 'time': 517 },
  'T2/neg-e-1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/polyrank4': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 336 },
  'T2/fun7': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 14191 },
  'T2/slayer-3-new': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/simple_double_free': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 254 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.nor.t2.rlgfixed': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 2713 },
  'T2/polyrank2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 307 },
  'T2/dummy': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 295 },
  'T2/2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1221 },
  'T2/d': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 290 },
  'T2/rev_nt3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 7266 },
  'T2/e-acqrel-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 495 },
  'T2/ex10': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 558 },
  'T2/tqli': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/subpoly_crash': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 296 },
  'T2/ex31': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 303 },
  'T2/p-43-terminate': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 291 },
  'T2/slayer-3-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/broydn': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/consts3nt': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 286 },
  'T2/dsa_test15': { "stdout": True, 'originalBound': "23 ", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 357 },
  'T2/p-1b': { "stdout": True, 'originalBound': "max([-1*A+1*B+2,2]) ", 'parsedBound': "max(-1 * A + B + 2, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 314 },
  'T2/bf11': { "stdout": True, 'originalBound': "91 ", 'parsedBound': "91", 'degree': 0.0, 'variableCount': 0, 'time': 1223 },
  'T2/smagillb-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1039 },
  'T2/eric': { "stdout": True, 'originalBound': "max([2*A+ -2*B+1,1,2*A+3]) ", 'parsedBound': "max(2 * A + -2 * B + 1, 1, 2 * A + 3)", 'degree': 1.0, 'variableCount': 2, 'time': 729 },
  'T2/bf8': { "stdout": True, 'originalBound': "73 ", 'parsedBound': "73", 'degree': 0.0, 'variableCount': 0, 'time': 1221 },
  'T2/1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex6': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 256 },
  'T2/pearl-necklace': { "stdout": True, 'originalBound': "max([4*A+ -1*B+4,2*A+1*B+4,1*A+ -1*B+4,4,1*B+4,1*A+1*B+4,3*A+ -1*B+4]) ", 'parsedBound': "max(4 * A + -1 * B + 4, 2 * A + B + 4, A + -1 * B + 4, 4, B + 4, A + B + 4, 3 * A + -1 * B + 4)", 'degree': 1.0, 'variableCount': 2, 'time': 663 },
  'T2/constants': { "stdout": True, 'originalBound': "402 ", 'parsedBound': "402", 'degree': 0.0, 'variableCount': 0, 'time': 417 },
  'T2/firewire': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/spctrm.c.i.spctrm.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-19a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 345 },
  'T2/neg-e-pgarch-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 493 },
  'T2/traverse_seg': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/neg-e-pgarch-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 483 },
  'T2/bf15': { "stdout": True, 'originalBound': "115 ", 'parsedBound': "115", 'degree': 0.0, 'variableCount': 0, 'time': 1230 },
  'T2/n-8': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 427 },
  'T2/p-45': { "stdout": True, 'originalBound': "max([1*B+2,2,1*A+2]) ", 'parsedBound': "max(B + 2, 2, A + 2)", 'degree': 1.0, 'variableCount': 2, 'time': 414 },
  'T2/array_init': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 289 },
  'T2/p-60': { "stdout": True, 'originalBound': "102 ", 'parsedBound': "102", 'degree': 0.0, 'variableCount': 0, 'time': 339 },
  'T2/p-5': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1436 },
  'T2/slayer-n2-filtered': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 303 },
  'T2/byron-1': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 315 },
  'T2/popl07-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 2828 },
  'T2/nakata_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/fun11': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 455 },
  'T2/232': { "stdout": True, 'originalBound': "max([1*A+nat((1*A+ -1)* (1*A+ -1)+1*A)+1,1]) ", 'parsedBound': "max(A + max(0, (A + -1) * (A + -1) + A) + 1, 1)", 'degree': 2.0, 'variableCount': 1, 'time': 353 },
  'T2/n-4': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 257 },
  'T2/fun10b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/reverse': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-20': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 407 },
  'T2/st88': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 387 },
  'T2/p-14': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 297 },
  'T2/tqli.c.i.tqli.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/e-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-4': { "stdout": True, 'originalBound': "max([2*A+ -1*B+ -1*C+1,1*A+ -1*B+1,1,1*B+ -1*C+1]) ", 'parsedBound': "max(2 * A + -1 * B + -1 * C + 1, A + -1 * B + 1, 1, B + -1 * C + 1)", 'degree': 1.0, 'variableCount': 3, 'time': 479 },
  'T2/s1-saved': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 25261 },
  'T2/two_arrays': { "stdout": True, 'originalBound': "307 ", 'parsedBound': "307", 'degree': 0.0, 'variableCount': 0, 'time': 904 },
  'T2/ex15': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 268 },
  'T2/apchild-accepted-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/db2': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 40725 },
  'T2/simple_pre2': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 257 },
  'T2/polyrank6': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 381 },
  'T2/send-more-money': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/neg-popl07-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 3525 },
  'T2/elmhes.c.i.elmhes.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 16762 },
  'T2/spctrm': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-8a': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 311 },
  'T2/p-6': { "stdout": True, 'originalBound': "max([-1*A+1*B+2,2]) ", 'parsedBound': "max(-1 * A + B + 2, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 403 },
  'T2/p-18': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 292 },
  'T2/e-pgarch-fail': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 642 },
  'T2/vmcai_struct': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 260 },
  'T2/dsa_test8': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 255 },
  'T2/simple': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 305 },
  'T2/neg-1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/janne_complex': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1038 },
  'T2/1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/fun10': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/curious': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 279 },
  'T2/brp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/dsa_test4': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 258 },
  'T2/fun1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/simple_control_on_input': { "stdout": True, 'originalBound': "21 ", 'parsedBound': "21", 'degree': 0.0, 'variableCount': 0, 'time': 289 },
  'T2/smagillc-succeed': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 851 },
  'SAS10/wise': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 277 },
  'SAS10/counterex1': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 263 },
  'SAS10/relation1': { "stdout": True, 'originalBound': "3 ", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 265 },
  'SAS10/realshellsort': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'SAS10/realbubble': { "stdout": True, 'originalBound': "max([nat((1*A+ -2)* (1*A+ -2)+ (1*A+ -2)* (1*A+ -2)+ (1*A+ -2))*2+nat((1*A+ -2)* (1*A+ -2)+ (1*A+ -2)* (1*A+ -2)+ (1*A+ -2))+3*A+5,5]) ", 'parsedBound': "max(max(0, (A + -2) * (A + -2) + (A + -2) * (A + -2) + A + -2) * 2 + max(0, (A + -2) * (A + -2) + (A + -2) * (A + -2) + A + -2) + 3 * A + 5, 5)", 'degree': 2.0, 'variableCount': 1, 'time': 1247 },
  'SAS10/realheapsort': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 310 },
  'SAS10/nd_loop': { "stdout": True, 'originalBound': "21 ", 'parsedBound': "21", 'degree': 0.0, 'variableCount': 0, 'time': 411 },
  'SAS10/easy2': { "stdout": True, 'originalBound': "max([1*A+3,3]) ", 'parsedBound': "max(A + 3, 3)", 'degree': 1.0, 'variableCount': 1, 'time': 479 },
  'SAS10/insertsort': { "stdout": True, 'originalBound': "max([1*A+max([ (min([1*A+ -3,nat(2*A+ -7)])+3)* (1*A),3*A])+5,4,max([ (min([1*A+ -3,nat(2*A+ -7)])+3)* (1*A),3*A])+5]) ", 'parsedBound': "max(A + max((min(A + -3, max(0, 2 * A + -7)) + 3) * A, 3 * A) + 5, 4, max((min(A + -3, max(0, 2 * A + -7)) + 3) * A, 3 * A) + 5)", 'degree': 2.0, 'variableCount': 1, 'time': 2948 },
  'SAS10/random2d': { "stdout": True, 'originalBound': "max([2*A+4,4]) ", 'parsedBound': "max(2 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 3520 },
  'SAS10/ax': { "stdout": True, 'originalBound': "max([2*A+ -6+nat(1*A+ -2+ (1*A+ -2)* (1*A+ -2))+3,3,2*A+nat(1*A+ -2+ (1*A+ -2)* (1*A+ -2))+3]) ", 'parsedBound': "max(2 * A + -6 + max(0, A + -2 + (A + -2) * (A + -2)) + 3, 3, 2 * A + max(0, A + -2 + (A + -2) * (A + -2)) + 3)", 'degree': 2.0, 'variableCount': 1, 'time': 798 },
  'SAS10/exmini': { "stdout": True, 'originalBound': "max([min([-2/3*A+4/3*E+ -2/3*G+2/3,-2*A+1*E+ -1*G+199,-1*A+1*E+ -1*G+100])+3,3,min([-2*A+1*E+ -1*G+199,2*E+ -202])+3]) ", 'parsedBound': "max(min(-2 / 3 * A + 4 / 3 * E + -2 / 3 * G + 2 / 3, -2 * A + E + -1 * G + 199, -1 * A + E + -1 * G + 100) + 3, 3, min(-2 * A + E + -1 * G + 199, 2 * E + -202) + 3)", 'degree': 1.0, 'variableCount': 3, 'time': 1435 },
  'SAS10/cousot9': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 265 },
  'SAS10/while2': { "stdout": True, 'originalBound': "max([2*A+nat(1*A+ -1+ (1*A+ -1)* (1*A+ -1))+4,4]) ", 'parsedBound': "max(2 * A + max(0, A + -1 + (A + -1) * (A + -1)) + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 622 },
  'SAS10/ackermann': { "stdout": True, 'originalBound': "max([4*A+5,5]) ", 'parsedBound': "max(4 * A + 5, 5)", 'degree': 1.0, 'variableCount': 1, 'time': 418 },
  'SAS10/aaron2': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 268 },
  'SAS10/terminate': { "stdout": True, 'originalBound': "max([min([-2/3*A+4/3*C+ -2/3*E+2/3,-1*A+1*C+ -1*E+99])+3,3,min([-1*A+1*C+ -1*E+99,2*C+ -202])+3]) ", 'parsedBound': "max(min(-2 / 3 * A + 4 / 3 * C + -2 / 3 * E + 2 / 3, -1 * A + C + -1 * E + 99) + 3, 3, min(-1 * A + C + -1 * E + 99, 2 * C + -202) + 3)", 'degree': 1.0, 'variableCount': 3, 'time': 1679 },
  'SAS10/wcet2': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 276 },
  'SAS10/random1d': { "stdout": True, 'originalBound': "max([1*A+3,3]) ", 'parsedBound': "max(A + 3, 3)", 'degree': 1.0, 'variableCount': 1, 'time': 626 },
  'SAS10/nestedLoop': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 272 },
  'SAS10/maccarthy91': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 274 },
  'SAS10/realselect': { "stdout": True, 'originalBound': "5 ", 'parsedBound': "5", 'degree': 0.0, 'variableCount': 0, 'time': 535 },
  'SAS10/sipmabubble': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 265 },
  'SAS10/determinant': { "stdout": True, 'originalBound': "max([ (1*A+1)* (1*A)+1*A+5, ((1*A+1)* (1*A+ -1)+2)* (1*A)+4, (1*A+1)* (1*A)+4,max([ (1*A+ -3)* (1*A)+1*A,min([ (1*A+ -3)* (1*A)+max([1*A,min([1*A+ -3+ ((1*A+1)* (1*A+ -1)+2)*3, ((1*A+1)* (1*A+ -1)+2)* (1*A), ((1*A+1)* (1*A+ -1)+2)* (1*A+ -3)+3])]),1*A* (1*A)+1*A]),min([ ((1*A+1)* (1*A+ -1)+2)* (1*A+ -3)+max([min([ (1*A+ -3)* (1*A),3*A])+3,min([ (1*A+ -3)* (1*A)+3,3*A+3])]), ((1*A+1)* (1*A+ -1)+2)* (1*A)])])+5,max([ ((1*A+1)* (1*A+ -1)+2)* (1*A),1*A])+5,5,max([min([ ((1*A+1)* (1*A+ -1)+2)* (1*A+ -3)+min([ (1*A+ -3)* (1*A),3*A]), ((1*A+1)* (1*A+ -1)+2)* (1*A)]),min([ (1*A+ -3)* (1*A)+min([ ((1*A+1)* (1*A+ -1)+2)* (1*A+ -3), ((1*A+1)* (1*A+ -1)+2)*3]),1*A* (1*A)])])+5,max([ ((1*A+1)* (1*A+ -1)+2)* (1*A),1*A* (1*A)])+4,1*A+5, (1*A+1)* (1*A)+5, ((1*A+1)* (1*A+ -1)+2)* (1*A)+5]) ", 'parsedBound': "max((A + 1) * A + A + 5, ((A + 1) * (A + -1) + 2) * A + 4, (A + 1) * A + 4, max((A + -3) * A + A, min((A + -3) * A + max(A, min(A + -3 + ((A + 1) * (A + -1) + 2) * 3, ((A + 1) * (A + -1) + 2) * A, ((A + 1) * (A + -1) + 2) * (A + -3) + 3)), A * A + A), min(((A + 1) * (A + -1) + 2) * (A + -3) + max(min((A + -3) * A, 3 * A) + 3, min((A + -3) * A + 3, 3 * A + 3)), ((A + 1) * (A + -1) + 2) * A)) + 5, max(((A + 1) * (A + -1) + 2) * A, A) + 5, 5, max(min(((A + 1) * (A + -1) + 2) * (A + -3) + min((A + -3) * A, 3 * A), ((A + 1) * (A + -1) + 2) * A), min((A + -3) * A + min(((A + 1) * (A + -1) + 2) * (A + -3), ((A + 1) * (A + -1) + 2) * 3), A * A)) + 5, max(((A + 1) * (A + -1) + 2) * A, A * A) + 4, A + 5, (A + 1) * A + 5, ((A + 1) * (A + -1) + 2) * A + 5)", 'degree': 3.0, 'variableCount': 1, 'time': 3351 },
  'SAS10/rsd': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 272 },
  'SAS10/speedpldi4': { "stdout": True, 'originalBound': "max([-2*A+1*C+1+min([-1/2*A+1/2*C+ -3/2,1*A,-2*A+1*C])+3,-1*A+1*C+6,6,-2*A+1*C+7,-2*A+1*C+1+min([-2*A+1*C,1*A])+6]) ", 'parsedBound': "max(-2 * A + C + 1 + min(-1 / 2 * A + 1 / 2 * C + -3 / 2, A, -2 * A + C) + 3, -1 * A + C + 6, 6, -2 * A + C + 7, -2 * A + C + 1 + min(-2 * A + C, A) + 6)", 'degree': 1.0, 'variableCount': 2, 'time': 4997 },
  'SAS10/perfect': { "stdout": True, 'originalBound': "max([2*A+nat((1*A+ -1)* (1*A+ -2)+ (1*A+ -1)* (1*A+ -2)+1)+2,2]) ", 'parsedBound': "max(2 * A + max(0, (A + -1) * (A + -2) + (A + -1) * (A + -2) + 1) + 2, 2)", 'degree': 2.0, 'variableCount': 1, 'time': 1172 },
  'SAS10/gcd': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 258 },
  'SAS10/loops': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 259 },
  'SAS10/easy1': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 263 },
  'SAS10/speedpldi2': { "stdout": True, 'originalBound': "max([2*G+3,3]) ", 'parsedBound': "max(2 * G + 3, 3)", 'degree': 1.0, 'variableCount': 1, 'time': 755 },
  'SAS10/complex': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 264 },
  'SAS10/speedpldi3': { "stdout": True, 'originalBound': "max([2*C+nat(1*C+ -2+ (1*C+ -1)* (1*C+ -2))+4,3]) ", 'parsedBound': "max(2 * C + max(0, C + -2 + (C + -1) * (C + -2)) + 4, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 1321 },
  'SAS10/speedFails4': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 280 },
  'SAS10/ndecr': { "stdout": True, 'originalBound': "max([1*A+3,3]) ", 'parsedBound': "max(A + 3, 3)", 'degree': 1.0, 'variableCount': 1, 'time': 347 },
  'SAS10/wcet1': { "stdout": True, 'originalBound': "max([1*A+3,3]) ", 'parsedBound': "max(A + 3, 3)", 'degree': 1.0, 'variableCount': 1, 'time': 1145 },
  'costa/misc/n_log_n': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 270 },
  'costa/misc/ms': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 267 },
  'costa/misc/no_cover_point': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 264 },
  'costa/misc/direct_n_log_n': { "stdout": True, 'originalBound': "max([1*A+1,1]) ", 'parsedBound': "max(A + 1, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 335 },
  'costa/misc/ack': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 325 },
  'costa/misc/exponential': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 256 },
  'costa/misc/quadratic': { "stdout": True, 'originalBound': "max([ (2*A+5)* (1*A)+3,3]) ", 'parsedBound': "max((2 * A + 5) * A + 3, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 293 },
  'costa/misc/linear': { "stdout": True, 'originalBound': "max([1*A+1,101]) ", 'parsedBound': "max(A + 1, 101)", 'degree': 1.0, 'variableCount': 1, 'time': 301 },
  'costa/misc/mspe': { "stdout": True, 'originalBound': "max([max([-1*A+1*B+1,min([1/2*B+ -1/2*F+1+max([1/2*B+ -1/2*F,min([-1/2*B+2*E+ -3/2*F+1+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),1/2*B+ -1/2*F,nat(1/2*B+ -1/2*F+ -1)+1,nat(-1*A+1/2*B+1/2*F+ -1)+1,-1/2*B+2*C+ -3/2*F+ -1+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])])]),1*E+ -1*F+1+max([1*B+ -1*E,min([2*C+ -1*E+ -1*F+ -1+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*B+ -1*E,1*E+ -1*F+1+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])])]),2*C+ -2*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*B+ -1*F+max([min([-1*B+2*E+ -1*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),1,-1*B+2*C+ -1*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])]),1]),-1*A+1*B+1,1*C+ -1*F+max([1*B+ -1*C+1,min([-1*C+2*E+ -1*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),1*B+ -1*C+1,1*C+ -1*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])])]),-1*A+1*E+1+max([1*B+ -1*E,min([1*A+2*C+ -1*E+ -2*F+ -1+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*B+ -1*E,1*A+1*E+ -2*F+1+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])])]),2*E+ -2*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])]),min([1/2*B+1/2*F+2+max([min([1*B+ -1*C+1,nat(-1/2*B+2*C+ -5/2*F+ -1),nat(1/2*B+ -3/2*F+ -1),nat(-1*A+1/2*B+ -1/2*F+ -1),nat(-1/2*B+2*E+ -5/2*F+1)]),min([1*C+ -1*F,nat(-1*A+1/2*B+ -1/2*F+ -2)+1,nat(-1/2*B+2*E+ -5/2*F)+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),nat(-1/2*B+2*C+ -5/2*F+ -1),nat(1/2*B+ -3/2*F+ -1),nat(-1*A+1/2*B+ -1/2*F+ -1),nat(-1/2*B+2*E+ -5/2*F+1),nat(1/2*B+ -3/2*F+ -2)+1,nat(-1/2*B+2*C+ -5/2*F+ -2)+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])])]),2*C+ -2*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*C+1+max([min([1*B+ -1*C+1,nat(1*B+ -1*C+ -1*F),nat(1*C+ -2*F),nat(-1*A+1*B+ -1*C),nat(-1*C+2*E+ -2*F+2)]),min([1*C+ -1*F,nat(-1*C+2*E+ -2*F+1)+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),nat(1*C+ -2*F+ -1)+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),nat(1*B+ -1*C+ -1*F),nat(1*C+ -2*F),nat(-1*A+1*B+ -1*C),nat(-1*C+2*E+ -2*F+2),nat(-1*A+1*B+ -1*C+ -1)+1,nat(1*B+ -1*C+ -1*F+ -1)+1])]),-1*A+1*B+1,1*E+2+max([min([1*B+ -1*C+1,nat(1*B+ -1*E+ -1*F+ -1),nat(1*E+ -2*F+1),nat(-1*A+1*B+ -1*E+ -1),nat(2*C+ -1*E+ -2*F+ -1)]),min([1*C+ -1*F,nat(1*B+ -1*E+ -1*F+ -2)+1,nat(1*E+ -2*F)+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),nat(1*B+ -1*E+ -1*F+ -1),nat(1*E+ -2*F+1),nat(-1*A+1*B+ -1*E+ -1),nat(2*C+ -1*E+ -2*F+ -1),nat(-1*A+1*B+ -1*E+ -2)+1,nat(2*C+ -1*E+ -2*F+ -2)+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])])]),2*E+ -2*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])])])+1,max([min([1/2*B+1/2*F+2+max([min([1*C+ -1*F,nat(-1*A+1/2*B+ -1/2*F+ -2)+1,nat(-1/2*B+2*E+ -5/2*F)+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),nat(-1/2*B+2*C+ -5/2*F+ -1),nat(1/2*B+ -3/2*F+ -1),nat(-1*A+1/2*B+ -1/2*F+ -1),nat(-1/2*B+2*E+ -5/2*F+1),nat(1/2*B+ -3/2*F+ -2)+1,nat(-1/2*B+2*C+ -5/2*F+ -2)+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])]),min([-1*A+1*C,nat(-1/2*B+2*C+ -5/2*F+ -1),nat(1/2*B+ -3/2*F+ -1),nat(-1*A+1/2*B+ -1/2*F+ -1),nat(-1/2*B+2*E+ -5/2*F+1)])]),2*C+ -2*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*C+1+max([min([1*C+ -1*F,nat(-1*C+2*E+ -2*F+1)+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),nat(1*C+ -2*F+ -1)+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),nat(1*B+ -1*C+ -1*F),nat(1*C+ -2*F),nat(-1*A+1*B+ -1*C),nat(-1*C+2*E+ -2*F+2),nat(-1*A+1*B+ -1*C+ -1)+1,nat(1*B+ -1*C+ -1*F+ -1)+1]),min([-1*A+1*C,nat(1*B+ -1*C+ -1*F),nat(1*C+ -2*F),nat(-1*A+1*B+ -1*C),nat(-1*C+2*E+ -2*F+2)])]),-1*A+1*B+1,1*E+2+max([min([1*C+ -1*F,nat(1*B+ -1*E+ -1*F+ -2)+1,nat(1*E+ -2*F)+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),nat(1*B+ -1*E+ -1*F+ -1),nat(1*E+ -2*F+1),nat(-1*A+1*B+ -1*E+ -1),nat(2*C+ -1*E+ -2*F+ -1),nat(-1*A+1*B+ -1*E+ -2)+1,nat(2*C+ -1*E+ -2*F+ -2)+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])]),min([-1*A+1*C,nat(1*B+ -1*E+ -1*F+ -1),nat(1*E+ -2*F+1),nat(-1*A+1*B+ -1*E+ -1),nat(2*C+ -1*E+ -2*F+ -1)])]),2*E+ -2*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])]),min([1*E+ -1*F+1+max([1*B+ -1*E,min([1*E+ -1*F+1+min([1*B+ -1*E+ -1,nat(1*B+ -2*E+1*F+ -1),1,nat(-1*A+1*B+ -2*E+2*F+ -1)]),1*C+ -1*F+min([1*C+ -1*E,nat(-1*A+1*B+ -1*C+ -1*E+2*F),nat(1*B+ -1*C+ -1*E+1*F),1*B+ -1*C]),1*B+ -1*E,-1*A+1*E+1+min([1*B+ -1*E+ -1,nat(1*B+ -2*E+1*F+ -1),nat(1*A+1*B+ -2*E+ -1),1*A+ -1*F+1])])]),-1*A+1*C+max([1*B+ -1*C+1,min([1*E+ -1*F+1+min([1*A+1*C+ -1*E+ -1*F,nat(1*B+ -1*C+ -1*E+1*F),nat(1*A+1*B+ -1*C+ -1*E),1*B+ -1*E+ -1]),1*C+ -1*F+min([1*A+ -1*F+1,nat(1*B+ -2*C+1*F+1),nat(1*A+1*B+ -2*C+1),1*B+ -1*C]),1*B+ -1*C+1,-1*A+1*E+1+min([2*A+1*C+ -1*E+ -2*F,nat(2*A+1*B+ -1*C+ -1*E+ -1*F),nat(1*A+1*B+ -1*C+ -1*E),1*B+ -1*E+ -1])])]),-1*A+1*B+1,1*C+ -1*F+max([1*B+ -1*C+1,min([1*E+ -1*F+1+min([1*B+ -1*E+ -1,nat(-1*A+1*B+ -1*C+ -1*E+2*F),nat(1*B+ -1*C+ -1*E+1*F),1*C+ -1*E]),1*C+ -1*F+min([1*B+ -1*C,nat(1*B+ -2*C+1*F+1),1,nat(-1*A+1*B+ -2*C+2*F+1)]),1*B+ -1*C+1,-1*A+1*E+1+min([1*A+1*C+ -1*E+ -1*F,nat(1*B+ -1*C+ -1*E+1*F),nat(1*A+1*B+ -1*C+ -1*E),1*B+ -1*E+ -1])])])]),min([1/2*B+ -1/2*F+1+max([1/2*B+ -1/2*F,min([-1/2*B+2*E+ -3/2*F+1+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),1/2*B+ -1/2*F,nat(1/2*B+ -1/2*F+ -1)+1,nat(-1*A+1/2*B+1/2*F+ -1)+1,-1/2*B+2*C+ -3/2*F+ -1+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])])]),1*E+ -1*F+1+max([min([2*C+ -1*E+ -1*F+ -1+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*B+ -1*E,1*E+ -1*F+1+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])]),min([1*E+ -1*F+1+min([1*B+ -1*E+ -1,nat(1*B+ -2*E+1*F+ -1),1,nat(-1*A+1*B+ -2*E+2*F+ -1)]),-1*A+1*C+min([1*A+1*C+ -1*E+ -1*F,nat(1*B+ -1*C+ -1*E+1*F),nat(1*A+1*B+ -1*C+ -1*E),1*B+ -1*E+ -1]),1*B+ -1*E,1*C+ -1*F+min([1*B+ -1*E+ -1,nat(-1*A+1*B+ -1*C+ -1*E+2*F),nat(1*B+ -1*C+ -1*E+1*F),1*C+ -1*E])])]),2*C+ -2*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*B+ -1*F+max([min([-1*B+2*E+ -1*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),1,-1*B+2*C+ -1*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])]),1]),-1*A+1*B+1,1*C+ -1*F+max([min([-1*C+2*E+ -1*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)]),1*B+ -1*C+1,1*C+ -1*F+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)])]),min([1*E+ -1*F+1+min([1*C+ -1*E,nat(-1*A+1*B+ -1*C+ -1*E+2*F),nat(1*B+ -1*C+ -1*E+1*F),1*B+ -1*C]),1*B+ -1*C+1,-1*A+1*C+min([1*A+ -1*F+1,nat(1*B+ -2*C+1*F+1),nat(1*A+1*B+ -2*C+1),1*B+ -1*C]),1*C+ -1*F+min([1*B+ -1*C,nat(1*B+ -2*C+1*F+1),1,nat(-1*A+1*B+ -2*C+2*F+1)])])]),-1*A+1*E+1+max([min([1*A+2*C+ -1*E+ -2*F+ -1+min([nat(-1*A+1*B+ -2*C+2*F+1),1,nat(1*B+ -2*C+1*F+1)]),1*B+ -1*E,1*A+1*E+ -2*F+1+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])]),min([1*E+ -1*F+1+min([1*B+ -1*E+ -1,nat(1*B+ -2*E+1*F+ -1),nat(1*A+1*B+ -2*E+ -1),1*A+ -1*F+1]),-1*A+1*C+min([2*A+1*C+ -1*E+ -2*F,nat(2*A+1*B+ -1*C+ -1*E+ -1*F),nat(1*A+1*B+ -1*C+ -1*E),1*B+ -1*E+ -1]),1*B+ -1*E,1*C+ -1*F+min([1*A+1*C+ -1*E+ -1*F,nat(1*B+ -1*C+ -1*E+1*F),nat(1*A+1*B+ -1*C+ -1*E),1*B+ -1*E+ -1])])]),2*E+ -2*F+2+min([nat(-1*A+1*B+ -2*E+2*F+ -1),1,nat(1*B+ -2*E+1*F+ -1)])])])+1,1,max([min([1/2*B+1/2*F+2+min([1*C+ -1*F,nat(-1*A+1/2*B+ -1/2*F+ -2),nat(-1/2*B+2*E+ -5/2*F),nat(1/2*B+ -3/2*F+ -2),nat(-1/2*B+2*C+ -5/2*F+ -2)]),1*C+1+min([1*C+ -1*F,nat(-1*C+2*E+ -2*F+1),nat(1*C+ -2*F+ -1),nat(-1*A+1*B+ -1*C+ -1),nat(1*B+ -1*C+ -1*F+ -1)]),-1*A+1*B,1*E+2+min([1*C+ -1*F,nat(1*B+ -1*E+ -1*F+ -2),nat(1*E+ -2*F),nat(-1*A+1*B+ -1*E+ -2),nat(2*C+ -1*E+ -2*F+ -2)])]),min([1/2*B+ -1/2*F+1+min([-1/2*B+2*C+ -3/2*F+ -1,nat(1/2*B+ -1/2*F+ -1),nat(-1*A+1/2*B+1/2*F+ -1)]),-1*A+1*B])])+1]) ", 'parsedBound': "max(max(-1 * A + B + 1, min(1 / 2 * B + -1 / 2 * F + 1 + max(1 / 2 * B + -1 / 2 * F, min(-1 / 2 * B + 2 * E + -3 / 2 * F + 1 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), 1 / 2 * B + -1 / 2 * F, max(0, 1 / 2 * B + -1 / 2 * F + -1) + 1, max(0, -1 * A + 1 / 2 * B + 1 / 2 * F + -1) + 1, -1 / 2 * B + 2 * C + -3 / 2 * F + -1 + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)))), E + -1 * F + 1 + max(B + -1 * E, min(2 * C + -1 * E + -1 * F + -1 + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), B + -1 * E, E + -1 * F + 1 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)))), 2 * C + -2 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), B + -1 * F + max(min(-1 * B + 2 * E + -1 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), 1, -1 * B + 2 * C + -1 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1))), 1), -1 * A + B + 1, C + -1 * F + max(B + -1 * C + 1, min(-1 * C + 2 * E + -1 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), B + -1 * C + 1, C + -1 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)))), -1 * A + E + 1 + max(B + -1 * E, min(A + 2 * C + -1 * E + -2 * F + -1 + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), B + -1 * E, A + E + -2 * F + 1 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)))), 2 * E + -2 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1))), min(1 / 2 * B + 1 / 2 * F + 2 + max(min(B + -1 * C + 1, max(0, -1 / 2 * B + 2 * C + -5 / 2 * F + -1), max(0, 1 / 2 * B + -3 / 2 * F + -1), max(0, -1 * A + 1 / 2 * B + -1 / 2 * F + -1), max(0, -1 / 2 * B + 2 * E + -5 / 2 * F + 1)), min(C + -1 * F, max(0, -1 * A + 1 / 2 * B + -1 / 2 * F + -2) + 1, max(0, -1 / 2 * B + 2 * E + -5 / 2 * F) + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), max(0, -1 / 2 * B + 2 * C + -5 / 2 * F + -1), max(0, 1 / 2 * B + -3 / 2 * F + -1), max(0, -1 * A + 1 / 2 * B + -1 / 2 * F + -1), max(0, -1 / 2 * B + 2 * E + -5 / 2 * F + 1), max(0, 1 / 2 * B + -3 / 2 * F + -2) + 1, max(0, -1 / 2 * B + 2 * C + -5 / 2 * F + -2) + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)))), 2 * C + -2 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), C + 1 + max(min(B + -1 * C + 1, max(0, B + -1 * C + -1 * F), max(0, C + -2 * F), max(0, -1 * A + B + -1 * C), max(0, -1 * C + 2 * E + -2 * F + 2)), min(C + -1 * F, max(0, -1 * C + 2 * E + -2 * F + 1) + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), max(0, C + -2 * F + -1) + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), max(0, B + -1 * C + -1 * F), max(0, C + -2 * F), max(0, -1 * A + B + -1 * C), max(0, -1 * C + 2 * E + -2 * F + 2), max(0, -1 * A + B + -1 * C + -1) + 1, max(0, B + -1 * C + -1 * F + -1) + 1)), -1 * A + B + 1, E + 2 + max(min(B + -1 * C + 1, max(0, B + -1 * E + -1 * F + -1), max(0, E + -2 * F + 1), max(0, -1 * A + B + -1 * E + -1), max(0, 2 * C + -1 * E + -2 * F + -1)), min(C + -1 * F, max(0, B + -1 * E + -1 * F + -2) + 1, max(0, E + -2 * F) + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), max(0, B + -1 * E + -1 * F + -1), max(0, E + -2 * F + 1), max(0, -1 * A + B + -1 * E + -1), max(0, 2 * C + -1 * E + -2 * F + -1), max(0, -1 * A + B + -1 * E + -2) + 1, max(0, 2 * C + -1 * E + -2 * F + -2) + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)))), 2 * E + -2 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)))) + 1, max(min(1 / 2 * B + 1 / 2 * F + 2 + max(min(C + -1 * F, max(0, -1 * A + 1 / 2 * B + -1 / 2 * F + -2) + 1, max(0, -1 / 2 * B + 2 * E + -5 / 2 * F) + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), max(0, -1 / 2 * B + 2 * C + -5 / 2 * F + -1), max(0, 1 / 2 * B + -3 / 2 * F + -1), max(0, -1 * A + 1 / 2 * B + -1 / 2 * F + -1), max(0, -1 / 2 * B + 2 * E + -5 / 2 * F + 1), max(0, 1 / 2 * B + -3 / 2 * F + -2) + 1, max(0, -1 / 2 * B + 2 * C + -5 / 2 * F + -2) + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1))), min(-1 * A + C, max(0, -1 / 2 * B + 2 * C + -5 / 2 * F + -1), max(0, 1 / 2 * B + -3 / 2 * F + -1), max(0, -1 * A + 1 / 2 * B + -1 / 2 * F + -1), max(0, -1 / 2 * B + 2 * E + -5 / 2 * F + 1))), 2 * C + -2 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), C + 1 + max(min(C + -1 * F, max(0, -1 * C + 2 * E + -2 * F + 1) + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), max(0, C + -2 * F + -1) + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), max(0, B + -1 * C + -1 * F), max(0, C + -2 * F), max(0, -1 * A + B + -1 * C), max(0, -1 * C + 2 * E + -2 * F + 2), max(0, -1 * A + B + -1 * C + -1) + 1, max(0, B + -1 * C + -1 * F + -1) + 1), min(-1 * A + C, max(0, B + -1 * C + -1 * F), max(0, C + -2 * F), max(0, -1 * A + B + -1 * C), max(0, -1 * C + 2 * E + -2 * F + 2))), -1 * A + B + 1, E + 2 + max(min(C + -1 * F, max(0, B + -1 * E + -1 * F + -2) + 1, max(0, E + -2 * F) + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), max(0, B + -1 * E + -1 * F + -1), max(0, E + -2 * F + 1), max(0, -1 * A + B + -1 * E + -1), max(0, 2 * C + -1 * E + -2 * F + -1), max(0, -1 * A + B + -1 * E + -2) + 1, max(0, 2 * C + -1 * E + -2 * F + -2) + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1))), min(-1 * A + C, max(0, B + -1 * E + -1 * F + -1), max(0, E + -2 * F + 1), max(0, -1 * A + B + -1 * E + -1), max(0, 2 * C + -1 * E + -2 * F + -1))), 2 * E + -2 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1))), min(E + -1 * F + 1 + max(B + -1 * E, min(E + -1 * F + 1 + min(B + -1 * E + -1, max(0, B + -2 * E + F + -1), 1, max(0, -1 * A + B + -2 * E + 2 * F + -1)), C + -1 * F + min(C + -1 * E, max(0, -1 * A + B + -1 * C + -1 * E + 2 * F), max(0, B + -1 * C + -1 * E + F), B + -1 * C), B + -1 * E, -1 * A + E + 1 + min(B + -1 * E + -1, max(0, B + -2 * E + F + -1), max(0, A + B + -2 * E + -1), A + -1 * F + 1))), -1 * A + C + max(B + -1 * C + 1, min(E + -1 * F + 1 + min(A + C + -1 * E + -1 * F, max(0, B + -1 * C + -1 * E + F), max(0, A + B + -1 * C + -1 * E), B + -1 * E + -1), C + -1 * F + min(A + -1 * F + 1, max(0, B + -2 * C + F + 1), max(0, A + B + -2 * C + 1), B + -1 * C), B + -1 * C + 1, -1 * A + E + 1 + min(2 * A + C + -1 * E + -2 * F, max(0, 2 * A + B + -1 * C + -1 * E + -1 * F), max(0, A + B + -1 * C + -1 * E), B + -1 * E + -1))), -1 * A + B + 1, C + -1 * F + max(B + -1 * C + 1, min(E + -1 * F + 1 + min(B + -1 * E + -1, max(0, -1 * A + B + -1 * C + -1 * E + 2 * F), max(0, B + -1 * C + -1 * E + F), C + -1 * E), C + -1 * F + min(B + -1 * C, max(0, B + -2 * C + F + 1), 1, max(0, -1 * A + B + -2 * C + 2 * F + 1)), B + -1 * C + 1, -1 * A + E + 1 + min(A + C + -1 * E + -1 * F, max(0, B + -1 * C + -1 * E + F), max(0, A + B + -1 * C + -1 * E), B + -1 * E + -1)))), min(1 / 2 * B + -1 / 2 * F + 1 + max(1 / 2 * B + -1 / 2 * F, min(-1 / 2 * B + 2 * E + -3 / 2 * F + 1 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), 1 / 2 * B + -1 / 2 * F, max(0, 1 / 2 * B + -1 / 2 * F + -1) + 1, max(0, -1 * A + 1 / 2 * B + 1 / 2 * F + -1) + 1, -1 / 2 * B + 2 * C + -3 / 2 * F + -1 + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)))), E + -1 * F + 1 + max(min(2 * C + -1 * E + -1 * F + -1 + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), B + -1 * E, E + -1 * F + 1 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1))), min(E + -1 * F + 1 + min(B + -1 * E + -1, max(0, B + -2 * E + F + -1), 1, max(0, -1 * A + B + -2 * E + 2 * F + -1)), -1 * A + C + min(A + C + -1 * E + -1 * F, max(0, B + -1 * C + -1 * E + F), max(0, A + B + -1 * C + -1 * E), B + -1 * E + -1), B + -1 * E, C + -1 * F + min(B + -1 * E + -1, max(0, -1 * A + B + -1 * C + -1 * E + 2 * F), max(0, B + -1 * C + -1 * E + F), C + -1 * E))), 2 * C + -2 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), B + -1 * F + max(min(-1 * B + 2 * E + -1 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), 1, -1 * B + 2 * C + -1 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1))), 1), -1 * A + B + 1, C + -1 * F + max(min(-1 * C + 2 * E + -1 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)), B + -1 * C + 1, C + -1 * F + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1))), min(E + -1 * F + 1 + min(C + -1 * E, max(0, -1 * A + B + -1 * C + -1 * E + 2 * F), max(0, B + -1 * C + -1 * E + F), B + -1 * C), B + -1 * C + 1, -1 * A + C + min(A + -1 * F + 1, max(0, B + -2 * C + F + 1), max(0, A + B + -2 * C + 1), B + -1 * C), C + -1 * F + min(B + -1 * C, max(0, B + -2 * C + F + 1), 1, max(0, -1 * A + B + -2 * C + 2 * F + 1)))), -1 * A + E + 1 + max(min(A + 2 * C + -1 * E + -2 * F + -1 + min(max(0, -1 * A + B + -2 * C + 2 * F + 1), 1, max(0, B + -2 * C + F + 1)), B + -1 * E, A + E + -2 * F + 1 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1))), min(E + -1 * F + 1 + min(B + -1 * E + -1, max(0, B + -2 * E + F + -1), max(0, A + B + -2 * E + -1), A + -1 * F + 1), -1 * A + C + min(2 * A + C + -1 * E + -2 * F, max(0, 2 * A + B + -1 * C + -1 * E + -1 * F), max(0, A + B + -1 * C + -1 * E), B + -1 * E + -1), B + -1 * E, C + -1 * F + min(A + C + -1 * E + -1 * F, max(0, B + -1 * C + -1 * E + F), max(0, A + B + -1 * C + -1 * E), B + -1 * E + -1))), 2 * E + -2 * F + 2 + min(max(0, -1 * A + B + -2 * E + 2 * F + -1), 1, max(0, B + -2 * E + F + -1)))) + 1, 1, max(min(1 / 2 * B + 1 / 2 * F + 2 + min(C + -1 * F, max(0, -1 * A + 1 / 2 * B + -1 / 2 * F + -2), max(0, -1 / 2 * B + 2 * E + -5 / 2 * F), max(0, 1 / 2 * B + -3 / 2 * F + -2), max(0, -1 / 2 * B + 2 * C + -5 / 2 * F + -2)), C + 1 + min(C + -1 * F, max(0, -1 * C + 2 * E + -2 * F + 1), max(0, C + -2 * F + -1), max(0, -1 * A + B + -1 * C + -1), max(0, B + -1 * C + -1 * F + -1)), -1 * A + B, E + 2 + min(C + -1 * F, max(0, B + -1 * E + -1 * F + -2), max(0, E + -2 * F), max(0, -1 * A + B + -1 * E + -2), max(0, 2 * C + -1 * E + -2 * F + -2))), min(1 / 2 * B + -1 / 2 * F + 1 + min(-1 / 2 * B + 2 * C + -3 / 2 * F + -1, max(0, 1 / 2 * B + -1 / 2 * F + -1), max(0, -1 * A + 1 / 2 * B + 1 / 2 * F + -1)), -1 * A + B)) + 1)", 'degree': 1.0, 'variableCount': 3, 'time': 47110 },
  'costa/misc/merge': { "stdout": True, 'originalBound': "max([1*A+1*B+1,1]) ", 'parsedBound': "max(A + B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 375 },
  'costa/misc/logarithmic': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 285 },
  'costa/misc/divide_and_conquer': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 259 },
  'costa/RAML/insertionsort': { "stdout": True, 'originalBound': "max([max([ (1*A+1)* (1*A),2*A])+3,3]) ", 'parsedBound': "max(max((A + 1) * A, 2 * A) + 3, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 333 },
  'costa/RAML/eratosthenes': { "stdout": True, 'originalBound': "max([ (1*A+1)* (1*A)+3,3]) ", 'parsedBound': "max((A + 1) * A + 3, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 300 },
  'costa/RAML/minsort': { "stdout": True, 'originalBound': "max([ (1*A+2)* (1*A)+2,2]) ", 'parsedBound': "max((A + 2) * A + 2, 2)", 'degree': 2.0, 'variableCount': 1, 'time': 289 },
  'costa/RAML/quicksort': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 260 },
  'costa/RAML/mergesort': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 262 },
  'costa/RAML/cleavermmult': { "stdout": True, 'originalBound': "max([ (2*C+2)* (1*A)+1, (max([3*C,min([ (1*D+2)* (1*B+ -1), (1*D+2)* (1*C)]),min([ (1*D+3)* (1*B+ -1), (1*D+3)* (1*C)])])+2)* (1*A)+1,2*A+1,1, (max([3*B,min([ (1*D+2)* (1*C), (1*D+2)* (1*B)]),min([ (1*D+3)* (1*C), (1*D+3)* (1*B)])])+2)* (1*A)+1, (2*B+2)* (1*A)+1]) ", 'parsedBound': "max((2 * C + 2) * A + 1, (max(3 * C, min((D + 2) * (B + -1), (D + 2) * C), min((D + 3) * (B + -1), (D + 3) * C)) + 2) * A + 1, 2 * A + 1, 1, (max(3 * B, min((D + 2) * C, (D + 2) * B), min((D + 3) * C, (D + 3) * B)) + 2) * A + 1, (2 * B + 2) * A + 1)", 'degree': 3.0, 'variableCount': 4, 'time': 884 },
  'costa/RAML/bitvectors': { "stdout": True, 'originalBound': "max([max([ (min([nat(1*B)*2,2*A])+3)* (1*A),min([ (min([nat(1*B)*2,2*A])+3)*nat(1*A+ -1*B+1)+max([ (min([nat(1*B)*2,2*A])+3)*nat(1*B+ -1),nat(1*B+ -1),nat(1*B+ -1)*3]), (min([nat(1*B)*2,2*A])+3)* (1*A)]),3*A])+max([ (min([nat(1*B)*2,2*A])+3)* (1*A),min([ (min([nat(1*B)*2,2*A])+3)*nat(1*A+ -1*B+1)+max([ (min([nat(1*B)*2,2*A])+3)*nat(1*B+ -1),nat(1*B+ -1),nat(1*B+ -1)*3]), (min([nat(1*B)*2,2*A])+3)* (1*A)]),3*A])+3,3]) ", 'parsedBound': "max(max((min(max(0, B) * 2, 2 * A) + 3) * A, min((min(max(0, B) * 2, 2 * A) + 3) * max(0, A + -1 * B + 1) + max((min(max(0, B) * 2, 2 * A) + 3) * max(0, B + -1), max(0, B + -1), max(0, B + -1) * 3), (min(max(0, B) * 2, 2 * A) + 3) * A), 3 * A) + max((min(max(0, B) * 2, 2 * A) + 3) * A, min((min(max(0, B) * 2, 2 * A) + 3) * max(0, A + -1 * B + 1) + max((min(max(0, B) * 2, 2 * A) + 3) * max(0, B + -1), max(0, B + -1), max(0, B + -1) * 3), (min(max(0, B) * 2, 2 * A) + 3) * A), 3 * A) + 3, 3)", 'degree': 2.0, 'variableCount': 2, 'time': 504 },
  'costa/RAML/rationalPotential': { "stdout": True, 'originalBound': "max([min([1*C,1*A,1*B])+1,1]) ", 'parsedBound': "max(min(C, A, B) + 1, 1)", 'degree': 1.0, 'variableCount': 3, 'time': 352 },
  'costa/RAML/lcs': { "stdout": True, 'originalBound': "max([2*A+3,max([min([ (4*B+2)* (1*A)+1*B,1*A+1*B]),min([ (4*B+2)* (1*A)+1*B, (4*B+2)* (1*A+1*B)])])+3,3,1*B+3]) ", 'parsedBound': "max(2 * A + 3, max(min((4 * B + 2) * A + B, A + B), min((4 * B + 2) * A + B, (4 * B + 2) * (A + B))) + 3, 3, B + 3)", 'degree': 2.0, 'variableCount': 2, 'time': 601 },
  'costa/RAML/matrix': { "stdout": True, 'originalBound': "max([ ((1*B+2)* (1*C)+2)* (1*A)+1*D+min([ (1*C+1)* (1*D), (1*C+1)* (1*C)])+7, (2*C+2)* (1*A)+1*D+min([ (1*C+1)* (1*D), (1*C+1)* (1*C)])+7,min([ ((1*A+3)* (1*C)+2)* (1*B+ -2), ((1*A+3)* (1*C)+2)* (1*A)])+1+3*C+7, ((1*B+2)* (1*C)+2)* (1*A)+max([min([2*C+ -2+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),2*D+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),1*D+max([min([ (2*C+ -1*D+ -2)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*C+1*D+2)]), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C), (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D)]),min([ (1*D+2)* (1*C+ -1*D)+min([ (2*C+ -1*D+ -2)* (1*D+1), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)]), (1*D+2)* (1*C)])]),1*C+ -1+max([min([ (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D), (1*D+1)*nat(-1*C+2*D+1)+min([ (2*C+ -2*D+ -1)* (1*D+2), (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)])]),min([ (1*D+2)* (1*C+ -1*D)+min([ (1*D+1)* (1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)* (1*D)]), (1*D+2)* (1*C)])])]),min([ (1*D+1)* (1*C+ -1)+max([min([1*D+2+min([1*D,nat(-1*C+2*D+1)]), (1*D+2)* (1*C+ -1*D)+min([1*D,nat(-1*C+2*D+1)])]),min([1*C+ -1+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),nat(-1*C+2*D+1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),1*D+min([1*D+2, (1*D+2)* (1*C+ -1*D)])])]), (1*D+1)* (1*D)+max([ (1*D+2)* (1*C+ -1*D)+1*D,min([2*C+ -1*D+ -2+ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C+ -1*D)+1*D,1*C+ -1+ (1*D+2)* (1*C+ -1*D)])]), (2*C+ -2)* (1*D+1), (1*D+1)* (1*C)+min([1*C+ -2,nat(-1*C+2*D),1*D]), (1*D+1)* (2*D)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*C+ -2*D)])]),min([ (1*D+2)* (1*C+ -1*D)+max([min([1*C+ -1+min([ (1*D+1)* (1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)* (1*D)]),2*D,1*D+min([ (2*C+ -1*D+ -2)* (1*D+1), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)])]),min([ (1*D+1)* (1*C+ -1)+min([1*D,nat(-1*C+2*D+1)]), (2*C+ -2)* (1*D+1), (1*D+1)* (2*D), (1*D+1)* (1*D)+1*D])]), (1*D+2)* (1*C)+1*D])])+7, (2*C+2)* (1*A)+max([min([2*C+ -2+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),2*D+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),1*D+max([min([ (2*C+ -1*D+ -2)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*C+1*D+2)]), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C), (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D)]),min([ (1*D+2)* (1*C+ -1*D)+min([ (2*C+ -1*D+ -2)* (1*D+1), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)]), (1*D+2)* (1*C)])]),1*C+ -1+max([min([ (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D), (1*D+1)*nat(-1*C+2*D+1)+min([ (2*C+ -2*D+ -1)* (1*D+2), (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)])]),min([ (1*D+2)* (1*C+ -1*D)+min([ (1*D+1)* (1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)* (1*D)]), (1*D+2)* (1*C)])])]),min([ (1*D+1)* (1*C+ -1)+max([min([1*D+2+min([1*D,nat(-1*C+2*D+1)]), (1*D+2)* (1*C+ -1*D)+min([1*D,nat(-1*C+2*D+1)])]),min([1*C+ -1+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),nat(-1*C+2*D+1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),1*D+min([1*D+2, (1*D+2)* (1*C+ -1*D)])])]), (1*D+1)* (1*D)+max([ (1*D+2)* (1*C+ -1*D)+1*D,min([2*C+ -1*D+ -2+ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C+ -1*D)+1*D,1*C+ -1+ (1*D+2)* (1*C+ -1*D)])]), (2*C+ -2)* (1*D+1), (1*D+1)* (1*C)+min([1*C+ -2,nat(-1*C+2*D),1*D]), (1*D+1)* (2*D)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*C+ -2*D)])]),min([ (1*D+2)* (1*C+ -1*D)+max([min([1*C+ -1+min([ (1*D+1)* (1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)* (1*D)]),2*D,1*D+min([ (2*C+ -1*D+ -2)* (1*D+1), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)])]),min([ (1*D+1)* (1*C+ -1)+min([1*D,nat(-1*C+2*D+1)]), (2*C+ -2)* (1*D+1), (1*D+1)* (2*D), (1*D+1)* (1*D)+1*D])]), (1*D+2)* (1*C)+1*D])])+7,4*A+1*D+7,1*D+min([ (1*B+ -1*D+ -1)* (1*A+1*D+4), (1*A+1*D+4)* (1*A)])+7,min([ (1*B+ -1*D+ -1)* ((1*A+1*D+2)* (1*C)+2), ((1*A+1*D+2)* (1*C)+2)* (1*A)])+max([min([-1*A+1*B+ -1+min([ (1*A+1*B+ -3)* (1*C+1), (1*C+1)* (1*B+ -2), (1*C+1)* (1*C), (1*C+1)*nat(1*A+ -1*B+2*D+1), (1*C+1)* (1*D), (-1*A+1*B+ -1)* (1*C+1)]),1*D+min([ (-2*A+2*B+ -1*D+ -2)* (1*C+1), (-1*A+1*B+ -1)* (1*C+1), (1*C+1)* (1*D), (1*C+1)* (1*C), (1*C+1)* (1*B+ -2), (2*B+ -1*D+ -4)* (1*C+1)]),2*D,1*B+ -2+min([ (-1*A+1*B+ -1)* (1*C+1), (1*C+1)* (1*D), (1*C+1)*nat(-1*B+2*D+2), (1*C+1)*nat(-2*A+1*B), (1*C+1)* (1*C), (1*C+1)* (1*B+ -2)])]),min([ (-1*A+1*B+ -1)* (1*C+1)+min([1*D,nat(1*A+ -1*B+2*D+1)]), (1*C+1)* (1*D)+1*D, (-2*A+2*B+ -2)* (1*C+1), (1*C+1)* (2*D), (2*B+ -4)* (1*C+1), (1*C+1)* (1*C)+1*D, (1*C+1)* (1*B+ -2)+min([1*D,nat(-2*A+1*B),nat(-1*B+2*D+2)])])])+7,3*C+8,2*A+4,max([min([2*C+ -2+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),2*D+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),1*D+max([min([ (2*C+ -1*D+ -2)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*C+1*D+2)]), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C), (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D)]),min([ (1*D+2)* (1*C+ -1*D)+min([ (2*C+ -1*D+ -2)* (1*D+1), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)]), (1*D+2)* (1*C)])]),1*C+ -1+max([min([ (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D), (1*D+1)*nat(-1*C+2*D+1)+min([ (2*C+ -2*D+ -1)* (1*D+2), (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)])]),min([ (1*D+2)* (1*C+ -1*D)+min([ (1*D+1)* (1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)* (1*D)]), (1*D+2)* (1*C)])])]),min([ (1*D+1)* (1*C+ -1)+max([min([1*D+2+min([1*D,nat(-1*C+2*D+1)]), (1*D+2)* (1*C+ -1*D)+min([1*D,nat(-1*C+2*D+1)])]),min([1*C+ -1+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),nat(-1*C+2*D+1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),1*D+min([1*D+2, (1*D+2)* (1*C+ -1*D)])])]), (1*D+1)* (1*D)+max([ (1*D+2)* (1*C+ -1*D)+1*D,min([2*C+ -1*D+ -2+ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C+ -1*D)+1*D,1*C+ -1+ (1*D+2)* (1*C+ -1*D)])]), (2*C+ -2)* (1*D+1), (1*D+1)* (1*C)+min([1*C+ -2,nat(-1*C+2*D),1*D]), (1*D+1)* (2*D)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*C+ -2*D)])]),min([ (1*D+2)* (1*C+ -1*D)+max([min([1*C+ -1+min([ (1*D+1)* (1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)* (1*D)]),2*D,1*D+min([ (2*C+ -1*D+ -2)* (1*D+1), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)])]),min([ (1*D+1)* (1*C+ -1)+min([1*D,nat(-1*C+2*D+1)]), (2*C+ -2)* (1*D+1), (1*D+1)* (2*D), (1*D+1)* (1*D)+1*D])]), (1*D+2)* (1*C)+1*D])])+7,4,1*D+7,2*C+5,min([ (1*B+ -1*D+ -1)* ((1*A+1*D+2)* (1*C)+2), ((1*A+1*D+2)* (1*C)+2)* (1*A)])+max([min([-1*A+1*B+ -1+max([min([ (1*A+1*B+ -3)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*A+ -1*B+1*C+3)]), (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D), (1*D+1)* (1*B+ -2)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]), (1*D+1)*nat(1*A+ -1*B+2*C+ -1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*A+1*B+ -1*C+1)]), (1*D+1)* (1*C), (1*D+1)*nat(1*A+ -1*B+2*D+1)+min([ (-1*A+1*B+1*C+ -2*D+ -1)* (1*D+2), (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]), (-1*A+1*B+ -1)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)])]),min([ (1*D+2)* (1*C+ -1*D)+min([ (1*A+1*B+ -3)* (1*D+1), (1*D+1)* (1*C+ -1), (1*D+1)* (1*D), (1*D+1)*nat(1*A+ -1*B+2*C+ -1), (1*D+1)*nat(1*A+ -1*B+2*D+1), (1*D+1)* (1*B+ -2), (-1*A+1*B+ -1)* (1*D+1)]), (1*D+2)* (1*C)])]),2*C+ -2+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),1*C+ -1+max([min([ (-1*A+1*B+ -1)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]), (1*D+1)*nat(-2*A+2*B+ -1*C+ -1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(2*A+ -2*B+2*C+1)]), (1*D+1)*nat(-1*C+2*D+1)+min([ (2*C+ -2*D+ -1)* (1*D+2), (1*D+2)* (1*C+ -1*D)]), (1*D+1)* (1*C), (1*D+1)*nat(2*B+ -1*C+ -3)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-2*B+2*C+3)]), (1*D+1)* (1*B+ -2)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]), (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D)]),min([ (1*D+2)* (1*C+ -1*D)+min([ (-1*A+1*B+ -1)* (1*D+1), (1*D+1)* (1*B+ -2), (1*D+1)*nat(-2*A+2*B+ -1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)*nat(2*B+ -1*C+ -3), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)]), (1*D+2)* (1*C)])]),2*D+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),1*D+max([min([ (-2*A+2*B+ -1*D+ -2)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(2*A+ -2*B+1*C+1*D+2)]), (2*B+ -1*D+ -4)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-2*B+1*C+1*D+4)]), (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D), (1*D+1)* (1*B+ -2)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]), (1*D+1)* (1*C), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]), (-1*A+1*B+ -1)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]), (2*C+ -1*D+ -2)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*C+1*D+2)])]),min([ (1*D+2)* (1*C+ -1*D)+min([ (-2*A+2*B+ -1*D+ -2)* (1*D+1), (2*B+ -1*D+ -4)* (1*D+1), (1*D+1)* (1*C+ -1), (1*D+1)* (1*D), (1*D+1)* (1*B+ -2), (-1*A+1*B+ -1)* (1*D+1), (2*C+ -1*D+ -2)* (1*D+1)]), (1*D+2)* (1*C)])]),1*B+ -2+max([min([ (-1*A+1*B+ -1)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]), (1*D+1)* (1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]), (1*D+1)*nat(-1*B+2*D+2)+min([ (1*B+1*C+ -2*D+ -2)* (1*D+2), (1*D+2)* (1*C+ -1*D)]), (1*D+1)*nat(-2*A+1*B)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(2*A+ -1*B+1*C)]), (1*D+1)* (1*C), (1*D+1)*nat(-1*B+2*C)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*B+ -1*C)]), (1*D+1)* (1*B+ -2)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]), (1*D+2)* (1*C+ -1*D)+ (1*D+1)* (1*D)]),min([ (1*D+2)* (1*C+ -1*D)+min([ (-1*A+1*B+ -1)* (1*D+1), (1*D+1)* (1*B+ -2), (1*D+1)*nat(-1*B+2*D+2), (1*D+1)*nat(-2*A+1*B), (1*D+1)*nat(-1*B+2*C), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)]), (1*D+2)* (1*C)])]),2*B+ -4+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)]),-2*A+2*B+ -2+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C)])]),min([ (1*D+2)* (1*C+ -1*D)+max([min([-1*A+1*B+ -1+min([ (1*A+1*B+ -3)* (1*D+1), (1*D+1)* (1*C+ -1), (1*D+1)* (1*D), (1*D+1)*nat(1*A+ -1*B+2*C+ -1), (1*D+1)*nat(1*A+ -1*B+2*D+1), (1*D+1)* (1*B+ -2), (-1*A+1*B+ -1)* (1*D+1)]),1*B+ -2+min([ (-1*A+1*B+ -1)* (1*D+1), (1*D+1)* (1*B+ -2), (1*D+1)*nat(-1*B+2*D+2), (1*D+1)*nat(-2*A+1*B), (1*D+1)*nat(-1*B+2*C), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)]),2*D,1*D+min([ (-2*A+2*B+ -1*D+ -2)* (1*D+1), (2*B+ -1*D+ -4)* (1*D+1), (1*D+1)* (1*C+ -1), (1*D+1)* (1*D), (1*D+1)* (1*B+ -2), (-1*A+1*B+ -1)* (1*D+1), (2*C+ -1*D+ -2)* (1*D+1)]),1*C+ -1+min([ (-1*A+1*B+ -1)* (1*D+1), (1*D+1)* (1*B+ -2), (1*D+1)*nat(-2*A+2*B+ -1*C+ -1), (1*D+1)*nat(-1*C+2*D+1), (1*D+1)*nat(2*B+ -1*C+ -3), (1*D+1)* (1*D), (1*D+1)* (1*C+ -1)])]),min([ (-1*A+1*B+ -1)* (1*D+1)+min([1*D,nat(1*A+ -1*B+2*C+ -1),nat(1*A+ -1*B+2*D+1)]), (1*D+1)* (1*B+ -2)+min([1*D,nat(-1*B+2*C),nat(-2*A+1*B),nat(-1*B+2*D+2)]), (-2*A+2*B+ -2)* (1*D+1), (2*B+ -4)* (1*D+1), (1*D+1)* (2*D), (2*C+ -2)* (1*D+1), (1*D+1)* (1*D)+1*D, (1*D+1)* (1*C+ -1)+min([1*D,nat(2*B+ -1*C+ -3),nat(-1*C+2*D+1),nat(-2*A+2*B+ -1*C+ -1)])])]), (1*D+2)* (1*C)+1*D]),min([ (-1*A+1*B+ -1)* (1*D+1)+max([min([1*A+1*B+ -3+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]),1*C+ -1+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]),1*D+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]),nat(1*A+ -1*B+2*C+ -1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]),nat(1*A+ -1*B+2*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]),1*B+ -2+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)]),-1*A+1*B+ -1+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*A+ -1*B+1*C+1)])]),min([ (1*D+2)* (1*C+ -1*D)+min([1*D,nat(1*A+ -1*B+2*C+ -1),nat(1*A+ -1*B+2*D+1)]), (1*D+2)*nat(1*A+ -1*B+1*C+1)+min([1*D,nat(1*A+ -1*B+2*C+ -1),nat(1*A+ -1*B+2*D+1)])])]), (2*B+ -4)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-2*B+1*C+4)]), (1*D+1)* (1*B+ -2)+max([min([-1*A+1*B+ -1+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]),1*B+ -2+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]),nat(-1*B+2*D+2)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]),nat(-2*A+1*B)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]),nat(-1*B+2*C)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]),1*D+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)]),1*C+ -1+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(-1*B+1*C+2)])]),min([ (1*D+2)* (1*C+ -1*D)+min([1*D,nat(-1*B+2*C),nat(-2*A+1*B),nat(-1*B+2*D+2)]), (1*D+2)*nat(-1*B+1*C+2)+min([1*D,nat(-1*B+2*C),nat(-2*A+1*B),nat(-1*B+2*D+2)])])]), (1*D+1)* (1*D)+max([ (1*D+2)* (1*C+ -1*D)+1*D,min([-2*A+2*B+ -1*D+ -2+ (1*D+2)* (1*C+ -1*D),2*B+ -1*D+ -4+ (1*D+2)* (1*C+ -1*D),1*C+ -1+ (1*D+2)* (1*C+ -1*D), (1*D+2)* (1*C+ -1*D)+1*D,1*B+ -2+ (1*D+2)* (1*C+ -1*D),-1*A+1*B+ -1+ (1*D+2)* (1*C+ -1*D),2*C+ -1*D+ -2+ (1*D+2)* (1*C+ -1*D)])]), (2*C+ -2)* (1*D+1), (1*D+1)* (1*C)+min([1*C+ -2,nat(-2*A+2*B+ -1*C+ -2),nat(-1*C+2*D),nat(2*B+ -1*C+ -4),1*D]), (1*D+1)* (2*D)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(1*C+ -2*D)]), (1*D+1)* (1*C+ -1)+max([min([-1*A+1*B+ -1+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),1*B+ -2+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),nat(-2*A+2*B+ -1*C+ -1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),nat(-1*C+2*D+1)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),nat(2*B+ -1*C+ -3)+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),1*D+min([1*D+2, (1*D+2)* (1*C+ -1*D)]),1*C+ -1+min([1*D+2, (1*D+2)* (1*C+ -1*D)])]),min([1*D+2+min([1*D,nat(2*B+ -1*C+ -3),nat(-1*C+2*D+1),nat(-2*A+2*B+ -1*C+ -1)]), (1*D+2)* (1*C+ -1*D)+min([1*D,nat(2*B+ -1*C+ -3),nat(-1*C+2*D+1),nat(-2*A+2*B+ -1*C+ -1)])])]), (-2*A+2*B+ -2)* (1*D+1)+min([ (1*D+2)* (1*C+ -1*D), (1*D+2)*nat(2*A+ -2*B+1*C+2)])])])+7,1*D+min([ (1*C+1)* (1*D), (1*C+1)* (1*C)])+7,2*C+min([ ((1*A+2)* (1*C)+2)* (1*B+ -1), ((1*A+2)* (1*C)+2)* (1*A)])+5, (1*B+4)* (1*A)+1*D+7, (2*C+2)* (1*A)+2*C+5, ((1*B+2)* (1*C)+2)* (1*A)+2*C+5, (2*C+2)* (1*A)+1+3*C+7, ((1*B+2)* (1*C)+2)* (1*A)+1+3*C+7]) ", 'parsedBound': "max(((B + 2) * C + 2) * A + D + min((C + 1) * D, (C + 1) * C) + 7, (2 * C + 2) * A + D + min((C + 1) * D, (C + 1) * C) + 7, min(((A + 3) * C + 2) * (B + -2), ((A + 3) * C + 2) * A) + 1 + 3 * C + 7, ((B + 2) * C + 2) * A + max(min(2 * C + -2 + min((D + 2) * (C + -1 * D), (D + 2) * C), 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * C), D + max(min((2 * C + -1 * D + -2) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * C + D + 2)), (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), (D + 1) * C, (D + 2) * (C + -1 * D) + (D + 1) * D), min((D + 2) * (C + -1 * D) + min((2 * C + -1 * D + -2) * (D + 1), (D + 1) * D, (D + 1) * (C + -1)), (D + 2) * C)), C + -1 + max(min((D + 2) * (C + -1 * D) + (D + 1) * D, (D + 1) * max(0, -1 * C + 2 * D + 1) + min((2 * C + -2 * D + -1) * (D + 2), (D + 2) * (C + -1 * D)), (D + 1) * C, (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D))), min((D + 2) * (C + -1 * D) + min((D + 1) * (C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * D), (D + 2) * C))), min((D + 1) * (C + -1) + max(min(D + 2 + min(D, max(0, -1 * C + 2 * D + 1)), (D + 2) * (C + -1 * D) + min(D, max(0, -1 * C + 2 * D + 1))), min(C + -1 + min(D + 2, (D + 2) * (C + -1 * D)), max(0, -1 * C + 2 * D + 1) + min(D + 2, (D + 2) * (C + -1 * D)), D + min(D + 2, (D + 2) * (C + -1 * D)))), (D + 1) * D + max((D + 2) * (C + -1 * D) + D, min(2 * C + -1 * D + -2 + (D + 2) * (C + -1 * D), (D + 2) * (C + -1 * D) + D, C + -1 + (D + 2) * (C + -1 * D))), (2 * C + -2) * (D + 1), (D + 1) * C + min(C + -2, max(0, -1 * C + 2 * D), D), (D + 1) * 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * max(0, C + -2 * D))), min((D + 2) * (C + -1 * D) + max(min(C + -1 + min((D + 1) * (C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * D), 2 * D, D + min((2 * C + -1 * D + -2) * (D + 1), (D + 1) * D, (D + 1) * (C + -1))), min((D + 1) * (C + -1) + min(D, max(0, -1 * C + 2 * D + 1)), (2 * C + -2) * (D + 1), (D + 1) * 2 * D, (D + 1) * D + D)), (D + 2) * C + D)) + 7, (2 * C + 2) * A + max(min(2 * C + -2 + min((D + 2) * (C + -1 * D), (D + 2) * C), 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * C), D + max(min((2 * C + -1 * D + -2) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * C + D + 2)), (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), (D + 1) * C, (D + 2) * (C + -1 * D) + (D + 1) * D), min((D + 2) * (C + -1 * D) + min((2 * C + -1 * D + -2) * (D + 1), (D + 1) * D, (D + 1) * (C + -1)), (D + 2) * C)), C + -1 + max(min((D + 2) * (C + -1 * D) + (D + 1) * D, (D + 1) * max(0, -1 * C + 2 * D + 1) + min((2 * C + -2 * D + -1) * (D + 2), (D + 2) * (C + -1 * D)), (D + 1) * C, (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D))), min((D + 2) * (C + -1 * D) + min((D + 1) * (C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * D), (D + 2) * C))), min((D + 1) * (C + -1) + max(min(D + 2 + min(D, max(0, -1 * C + 2 * D + 1)), (D + 2) * (C + -1 * D) + min(D, max(0, -1 * C + 2 * D + 1))), min(C + -1 + min(D + 2, (D + 2) * (C + -1 * D)), max(0, -1 * C + 2 * D + 1) + min(D + 2, (D + 2) * (C + -1 * D)), D + min(D + 2, (D + 2) * (C + -1 * D)))), (D + 1) * D + max((D + 2) * (C + -1 * D) + D, min(2 * C + -1 * D + -2 + (D + 2) * (C + -1 * D), (D + 2) * (C + -1 * D) + D, C + -1 + (D + 2) * (C + -1 * D))), (2 * C + -2) * (D + 1), (D + 1) * C + min(C + -2, max(0, -1 * C + 2 * D), D), (D + 1) * 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * max(0, C + -2 * D))), min((D + 2) * (C + -1 * D) + max(min(C + -1 + min((D + 1) * (C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * D), 2 * D, D + min((2 * C + -1 * D + -2) * (D + 1), (D + 1) * D, (D + 1) * (C + -1))), min((D + 1) * (C + -1) + min(D, max(0, -1 * C + 2 * D + 1)), (2 * C + -2) * (D + 1), (D + 1) * 2 * D, (D + 1) * D + D)), (D + 2) * C + D)) + 7, 4 * A + D + 7, D + min((B + -1 * D + -1) * (A + D + 4), (A + D + 4) * A) + 7, min((B + -1 * D + -1) * ((A + D + 2) * C + 2), ((A + D + 2) * C + 2) * A) + max(min(-1 * A + B + -1 + min((A + B + -3) * (C + 1), (C + 1) * (B + -2), (C + 1) * C, (C + 1) * max(0, A + -1 * B + 2 * D + 1), (C + 1) * D, (-1 * A + B + -1) * (C + 1)), D + min((-2 * A + 2 * B + -1 * D + -2) * (C + 1), (-1 * A + B + -1) * (C + 1), (C + 1) * D, (C + 1) * C, (C + 1) * (B + -2), (2 * B + -1 * D + -4) * (C + 1)), 2 * D, B + -2 + min((-1 * A + B + -1) * (C + 1), (C + 1) * D, (C + 1) * max(0, -1 * B + 2 * D + 2), (C + 1) * max(0, -2 * A + B), (C + 1) * C, (C + 1) * (B + -2))), min((-1 * A + B + -1) * (C + 1) + min(D, max(0, A + -1 * B + 2 * D + 1)), (C + 1) * D + D, (-2 * A + 2 * B + -2) * (C + 1), (C + 1) * 2 * D, (2 * B + -4) * (C + 1), (C + 1) * C + D, (C + 1) * (B + -2) + min(D, max(0, -2 * A + B), max(0, -1 * B + 2 * D + 2)))) + 7, 3 * C + 8, 2 * A + 4, max(min(2 * C + -2 + min((D + 2) * (C + -1 * D), (D + 2) * C), 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * C), D + max(min((2 * C + -1 * D + -2) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * C + D + 2)), (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), (D + 1) * C, (D + 2) * (C + -1 * D) + (D + 1) * D), min((D + 2) * (C + -1 * D) + min((2 * C + -1 * D + -2) * (D + 1), (D + 1) * D, (D + 1) * (C + -1)), (D + 2) * C)), C + -1 + max(min((D + 2) * (C + -1 * D) + (D + 1) * D, (D + 1) * max(0, -1 * C + 2 * D + 1) + min((2 * C + -2 * D + -1) * (D + 2), (D + 2) * (C + -1 * D)), (D + 1) * C, (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D))), min((D + 2) * (C + -1 * D) + min((D + 1) * (C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * D), (D + 2) * C))), min((D + 1) * (C + -1) + max(min(D + 2 + min(D, max(0, -1 * C + 2 * D + 1)), (D + 2) * (C + -1 * D) + min(D, max(0, -1 * C + 2 * D + 1))), min(C + -1 + min(D + 2, (D + 2) * (C + -1 * D)), max(0, -1 * C + 2 * D + 1) + min(D + 2, (D + 2) * (C + -1 * D)), D + min(D + 2, (D + 2) * (C + -1 * D)))), (D + 1) * D + max((D + 2) * (C + -1 * D) + D, min(2 * C + -1 * D + -2 + (D + 2) * (C + -1 * D), (D + 2) * (C + -1 * D) + D, C + -1 + (D + 2) * (C + -1 * D))), (2 * C + -2) * (D + 1), (D + 1) * C + min(C + -2, max(0, -1 * C + 2 * D), D), (D + 1) * 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * max(0, C + -2 * D))), min((D + 2) * (C + -1 * D) + max(min(C + -1 + min((D + 1) * (C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * D), 2 * D, D + min((2 * C + -1 * D + -2) * (D + 1), (D + 1) * D, (D + 1) * (C + -1))), min((D + 1) * (C + -1) + min(D, max(0, -1 * C + 2 * D + 1)), (2 * C + -2) * (D + 1), (D + 1) * 2 * D, (D + 1) * D + D)), (D + 2) * C + D)) + 7, 4, D + 7, 2 * C + 5, min((B + -1 * D + -1) * ((A + D + 2) * C + 2), ((A + D + 2) * C + 2) * A) + max(min(-1 * A + B + -1 + max(min((A + B + -3) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * A + -1 * B + C + 3)), (D + 2) * (C + -1 * D) + (D + 1) * D, (D + 1) * (B + -2) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), (D + 1) * max(0, A + -1 * B + 2 * C + -1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * A + B + -1 * C + 1)), (D + 1) * C, (D + 1) * max(0, A + -1 * B + 2 * D + 1) + min((-1 * A + B + C + -2 * D + -1) * (D + 2), (D + 2) * (C + -1 * D)), (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), (-1 * A + B + -1) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1))), min((D + 2) * (C + -1 * D) + min((A + B + -3) * (D + 1), (D + 1) * (C + -1), (D + 1) * D, (D + 1) * max(0, A + -1 * B + 2 * C + -1), (D + 1) * max(0, A + -1 * B + 2 * D + 1), (D + 1) * (B + -2), (-1 * A + B + -1) * (D + 1)), (D + 2) * C)), 2 * C + -2 + min((D + 2) * (C + -1 * D), (D + 2) * C), C + -1 + max(min((-1 * A + B + -1) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), (D + 1) * max(0, -2 * A + 2 * B + -1 * C + -1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, 2 * A + -2 * B + 2 * C + 1)), (D + 1) * max(0, -1 * C + 2 * D + 1) + min((2 * C + -2 * D + -1) * (D + 2), (D + 2) * (C + -1 * D)), (D + 1) * C, (D + 1) * max(0, 2 * B + -1 * C + -3) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -2 * B + 2 * C + 3)), (D + 1) * (B + -2) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), (D + 2) * (C + -1 * D) + (D + 1) * D), min((D + 2) * (C + -1 * D) + min((-1 * A + B + -1) * (D + 1), (D + 1) * (B + -2), (D + 1) * max(0, -2 * A + 2 * B + -1 * C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * max(0, 2 * B + -1 * C + -3), (D + 1) * D, (D + 1) * (C + -1)), (D + 2) * C)), 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * C), D + max(min((-2 * A + 2 * B + -1 * D + -2) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, 2 * A + -2 * B + C + D + 2)), (2 * B + -1 * D + -4) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -2 * B + C + D + 4)), (D + 2) * (C + -1 * D) + (D + 1) * D, (D + 1) * (B + -2) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), (D + 1) * C, (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), (-1 * A + B + -1) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), (2 * C + -1 * D + -2) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * C + D + 2))), min((D + 2) * (C + -1 * D) + min((-2 * A + 2 * B + -1 * D + -2) * (D + 1), (2 * B + -1 * D + -4) * (D + 1), (D + 1) * (C + -1), (D + 1) * D, (D + 1) * (B + -2), (-1 * A + B + -1) * (D + 1), (2 * C + -1 * D + -2) * (D + 1)), (D + 2) * C)), B + -2 + max(min((-1 * A + B + -1) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), (D + 1) * (C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), (D + 1) * max(0, -1 * B + 2 * D + 2) + min((B + C + -2 * D + -2) * (D + 2), (D + 2) * (C + -1 * D)), (D + 1) * max(0, -2 * A + B) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, 2 * A + -1 * B + C)), (D + 1) * C, (D + 1) * max(0, -1 * B + 2 * C) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, B + -1 * C)), (D + 1) * (B + -2) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), (D + 2) * (C + -1 * D) + (D + 1) * D), min((D + 2) * (C + -1 * D) + min((-1 * A + B + -1) * (D + 1), (D + 1) * (B + -2), (D + 1) * max(0, -1 * B + 2 * D + 2), (D + 1) * max(0, -2 * A + B), (D + 1) * max(0, -1 * B + 2 * C), (D + 1) * D, (D + 1) * (C + -1)), (D + 2) * C)), 2 * B + -4 + min((D + 2) * (C + -1 * D), (D + 2) * C), -2 * A + 2 * B + -2 + min((D + 2) * (C + -1 * D), (D + 2) * C)), min((D + 2) * (C + -1 * D) + max(min(-1 * A + B + -1 + min((A + B + -3) * (D + 1), (D + 1) * (C + -1), (D + 1) * D, (D + 1) * max(0, A + -1 * B + 2 * C + -1), (D + 1) * max(0, A + -1 * B + 2 * D + 1), (D + 1) * (B + -2), (-1 * A + B + -1) * (D + 1)), B + -2 + min((-1 * A + B + -1) * (D + 1), (D + 1) * (B + -2), (D + 1) * max(0, -1 * B + 2 * D + 2), (D + 1) * max(0, -2 * A + B), (D + 1) * max(0, -1 * B + 2 * C), (D + 1) * D, (D + 1) * (C + -1)), 2 * D, D + min((-2 * A + 2 * B + -1 * D + -2) * (D + 1), (2 * B + -1 * D + -4) * (D + 1), (D + 1) * (C + -1), (D + 1) * D, (D + 1) * (B + -2), (-1 * A + B + -1) * (D + 1), (2 * C + -1 * D + -2) * (D + 1)), C + -1 + min((-1 * A + B + -1) * (D + 1), (D + 1) * (B + -2), (D + 1) * max(0, -2 * A + 2 * B + -1 * C + -1), (D + 1) * max(0, -1 * C + 2 * D + 1), (D + 1) * max(0, 2 * B + -1 * C + -3), (D + 1) * D, (D + 1) * (C + -1))), min((-1 * A + B + -1) * (D + 1) + min(D, max(0, A + -1 * B + 2 * C + -1), max(0, A + -1 * B + 2 * D + 1)), (D + 1) * (B + -2) + min(D, max(0, -1 * B + 2 * C), max(0, -2 * A + B), max(0, -1 * B + 2 * D + 2)), (-2 * A + 2 * B + -2) * (D + 1), (2 * B + -4) * (D + 1), (D + 1) * 2 * D, (2 * C + -2) * (D + 1), (D + 1) * D + D, (D + 1) * (C + -1) + min(D, max(0, 2 * B + -1 * C + -3), max(0, -1 * C + 2 * D + 1), max(0, -2 * A + 2 * B + -1 * C + -1)))), (D + 2) * C + D), min((-1 * A + B + -1) * (D + 1) + max(min(A + B + -3 + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), C + -1 + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), D + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), max(0, A + -1 * B + 2 * C + -1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), max(0, A + -1 * B + 2 * D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), B + -2 + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1)), -1 * A + B + -1 + min((D + 2) * (C + -1 * D), (D + 2) * max(0, A + -1 * B + C + 1))), min((D + 2) * (C + -1 * D) + min(D, max(0, A + -1 * B + 2 * C + -1), max(0, A + -1 * B + 2 * D + 1)), (D + 2) * max(0, A + -1 * B + C + 1) + min(D, max(0, A + -1 * B + 2 * C + -1), max(0, A + -1 * B + 2 * D + 1)))), (2 * B + -4) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -2 * B + C + 4)), (D + 1) * (B + -2) + max(min(-1 * A + B + -1 + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), B + -2 + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), max(0, -1 * B + 2 * D + 2) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), max(0, -2 * A + B) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), max(0, -1 * B + 2 * C) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), D + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2)), C + -1 + min((D + 2) * (C + -1 * D), (D + 2) * max(0, -1 * B + C + 2))), min((D + 2) * (C + -1 * D) + min(D, max(0, -1 * B + 2 * C), max(0, -2 * A + B), max(0, -1 * B + 2 * D + 2)), (D + 2) * max(0, -1 * B + C + 2) + min(D, max(0, -1 * B + 2 * C), max(0, -2 * A + B), max(0, -1 * B + 2 * D + 2)))), (D + 1) * D + max((D + 2) * (C + -1 * D) + D, min(-2 * A + 2 * B + -1 * D + -2 + (D + 2) * (C + -1 * D), 2 * B + -1 * D + -4 + (D + 2) * (C + -1 * D), C + -1 + (D + 2) * (C + -1 * D), (D + 2) * (C + -1 * D) + D, B + -2 + (D + 2) * (C + -1 * D), -1 * A + B + -1 + (D + 2) * (C + -1 * D), 2 * C + -1 * D + -2 + (D + 2) * (C + -1 * D))), (2 * C + -2) * (D + 1), (D + 1) * C + min(C + -2, max(0, -2 * A + 2 * B + -1 * C + -2), max(0, -1 * C + 2 * D), max(0, 2 * B + -1 * C + -4), D), (D + 1) * 2 * D + min((D + 2) * (C + -1 * D), (D + 2) * max(0, C + -2 * D)), (D + 1) * (C + -1) + max(min(-1 * A + B + -1 + min(D + 2, (D + 2) * (C + -1 * D)), B + -2 + min(D + 2, (D + 2) * (C + -1 * D)), max(0, -2 * A + 2 * B + -1 * C + -1) + min(D + 2, (D + 2) * (C + -1 * D)), max(0, -1 * C + 2 * D + 1) + min(D + 2, (D + 2) * (C + -1 * D)), max(0, 2 * B + -1 * C + -3) + min(D + 2, (D + 2) * (C + -1 * D)), D + min(D + 2, (D + 2) * (C + -1 * D)), C + -1 + min(D + 2, (D + 2) * (C + -1 * D))), min(D + 2 + min(D, max(0, 2 * B + -1 * C + -3), max(0, -1 * C + 2 * D + 1), max(0, -2 * A + 2 * B + -1 * C + -1)), (D + 2) * (C + -1 * D) + min(D, max(0, 2 * B + -1 * C + -3), max(0, -1 * C + 2 * D + 1), max(0, -2 * A + 2 * B + -1 * C + -1)))), (-2 * A + 2 * B + -2) * (D + 1) + min((D + 2) * (C + -1 * D), (D + 2) * max(0, 2 * A + -2 * B + C + 2)))) + 7, D + min((C + 1) * D, (C + 1) * C) + 7, 2 * C + min(((A + 2) * C + 2) * (B + -1), ((A + 2) * C + 2) * A) + 5, (B + 4) * A + D + 7, (2 * C + 2) * A + 2 * C + 5, ((B + 2) * C + 2) * A + 2 * C + 5, (2 * C + 2) * A + 1 + 3 * C + 7, ((B + 2) * C + 2) * A + 1 + 3 * C + 7)", 'degree': 3.0, 'variableCount': 4, 'time': 4380 },
  'costa/RAML/duplicates': { "stdout": True, 'originalBound': "max([1*B+1,1,1*A+1]) ", 'parsedBound': "max(B + 1, 1, A + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 305 },
  'costa/RAML/dyade': { "stdout": True, 'originalBound': "max([ (1*B+2)* (1*A)+1,1,2*A+1]) ", 'parsedBound': "max((B + 2) * A + 1, 1, 2 * A + 1)", 'degree': 2.0, 'variableCount': 2, 'time': 313 },
  'costa/RAML/listsort': { "stdout": True, 'originalBound': "max([max([ ((1*B+2)* (1*A+ -1)+1*B+3)* (1*A), (1*B+3)* (1*A), ((1*B+2)* (1*A+ -1)+2)* (1*A)])+3,3,max([ (2*A+1)* (1*A),3*A,2*A* (1*A)])+3]) ", 'parsedBound': "max(max(((B + 2) * (A + -1) + B + 3) * A, (B + 3) * A, ((B + 2) * (A + -1) + 2) * A) + 3, 3, max((2 * A + 1) * A, 3 * A, 2 * A * A) + 3)", 'degree': 3.0, 'variableCount': 1, 'time': 504 },
  'costa/jvm-cost/DetEval': { "stdout": True, 'originalBound': "max([ (27*A+16)* (1*A)+15*A+32*A+ ((24*A+36)* (1*A+ -1)+39*A+35)* (1*A)+9*A+54,153]) ", 'parsedBound': "max((27 * A + 16) * A + 15 * A + 32 * A + ((24 * A + 36) * (A + -1) + 39 * A + 35) * A + 9 * A + 54, 153)", 'degree': 3.0, 'variableCount': 1, 'time': 3481 },
  'costa/jvm-cost/Cons': { "stdout": True, 'originalBound': "max([22*A+24,24]) ", 'parsedBound': "max(22 * A + 24, 24)", 'degree': 1.0, 'variableCount': 1, 'time': 295 },
  'costa/jvm-cost/DivByTwo': { "stdout": True, 'originalBound': "max([16*A+6,6]) ", 'parsedBound': "max(16 * A + 6, 6)", 'degree': 1.0, 'variableCount': 1, 'time': 285 },
  'costa/jvm-cost/ms': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 352 },
  'costa/jvm-cost/Fibonacci': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 256 },
  'costa/jvm-cost/Factorial': { "stdout": True, 'originalBound': "max([9*A+4,4]) ", 'parsedBound': "max(9 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 273 },
  'costa/jvm-cost/MatMult': { "stdout": True, 'originalBound': "max([max([ (max([ (27*A+10)*nat(1*A),nat(1*A)*10])+10)* (1*B),10*B])+17,17]) ", 'parsedBound': "max(max((max((27 * A + 10) * max(0, A), max(0, A) * 10) + 10) * B, 10 * B) + 17, 17)", 'degree': 3.0, 'variableCount': 2, 'time': 444 },
  'costa/jvm-cost/ArrayReverse': { "stdout": True, 'originalBound': "max([14*A+12,12]) ", 'parsedBound': "max(14 * A + 12, 12)", 'degree': 1.0, 'variableCount': 1, 'time': 289 },
  'costa/jvm-cost/SelectOrd': { "stdout": True, 'originalBound': "max([max([ (17*A+17)* (1*A),34*A])+9,9]) ", 'parsedBound': "max(max((17 * A + 17) * A, 34 * A) + 9, 9)", 'degree': 2.0, 'variableCount': 1, 'time': 444 },
  'costa/jvm-cost/MergeList': { "stdout": True, 'originalBound': "max([29*A+26*B+26,26]) ", 'parsedBound': "max(29 * A + 26 * B + 26, 26)", 'degree': 1.0, 'variableCount': 2, 'time': 492 },
  'costa/jvm-cost/Hanoi': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 275 },
  'costa/jvm-cost/Incr': { "stdout": True, 'originalBound': "max([19*A+28,9]) ", 'parsedBound': "max(19 * A + 28, 9)", 'degree': 1.0, 'variableCount': 1, 'time': 483 },
  'costa/jvm-cost/LinEqSolve': { "stdout": True, 'originalBound': "max([ (28*C+16)* (1*C)+ (26*B+ -12)* (1*B)+ (22*B+32)* (1*B)+ ((24*C+36)* (1*C+ -1)+40*C+35)* (1*C)+9*C+74, ((24*C+36)* (1*C+ -1)+40*C+35)* (1*C)+ (28*C+16)* (1*C)+9*C+74,127, (26*B+ -12)* (1*B)+ (22*B+32)* (1*B)+74, (22*B+32)* (1*B)+44+ (26*B+ -12)* (1*B)+9+74]) ", 'parsedBound': "max((28 * C + 16) * C + (26 * B + -12) * B + (22 * B + 32) * B + ((24 * C + 36) * (C + -1) + 40 * C + 35) * C + 9 * C + 74, ((24 * C + 36) * (C + -1) + 40 * C + 35) * C + (28 * C + 16) * C + 9 * C + 74, 127, (26 * B + -12) * B + (22 * B + 32) * B + 74, (22 * B + 32) * B + 44 + (26 * B + -12) * B + 9 + 74)", 'degree': 3.0, 'variableCount': 2, 'time': 3092 },
  'costa/jvm-cost/FibonacciNew': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 262 },
  'costa/jvm-cost/Matrixinverse': { "stdout": True, 'originalBound': "max([ ((24*A+36)* (1*A+ -1)+39*A+35)* (1*A)+9*A+ ((26*A+38)* (1*A)+39)* (1*A)+ ((30*A+10)* (1*A+ -1)+14)* (1*A)+ (27*A+16)* (1*A)+11*A+62,164]) ", 'parsedBound': "max(((24 * A + 36) * (A + -1) + 39 * A + 35) * A + 9 * A + ((26 * A + 38) * A + 39) * A + ((30 * A + 10) * (A + -1) + 14) * A + (27 * A + 16) * A + 11 * A + 62, 164)", 'degree': 3.0, 'variableCount': 1, 'time': 5511 },
  'costa/jvm-cost/EvenDigits': { "stdout": True, 'originalBound': "max([max([16*A,min([ (min([nat(2*A+ -3)*8,24])+16)*3+nat(1*A+ -3)*16, (min([nat(2*A+ -3)*8,24])+16)* (1*A)])])+9,9]) ", 'parsedBound': "max(max(16 * A, min((min(max(0, 2 * A + -3) * 8, 24) + 16) * 3 + max(0, A + -3) * 16, (min(max(0, 2 * A + -3) * 8, 24) + 16) * A)) + 9, 9)", 'degree': 1.0, 'variableCount': 1, 'time': 383 },
  'costa/jvm-cost/ListInter': { "stdout": True, 'originalBound': "max([max([ (10*B+43)* (1*A),43*A, (10*B+24)* (1*A)])+21,21]) ", 'parsedBound': "max(max((10 * B + 43) * A, 43 * A, (10 * B + 24) * A) + 21, 21)", 'degree': 2.0, 'variableCount': 2, 'time': 438 },
  'costa/jvm-cost/Power': { "stdout": True, 'originalBound': "max([10*A+4,4]) ", 'parsedBound': "max(10 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 272 },
  'costa/jvm-cost/Polynomial': { "stdout": True, 'originalBound': "216 ", 'parsedBound': "216", 'degree': 0.0, 'variableCount': 0, 'time': 320 },
  'costa/jvm-cost/Concat': { "stdout": True, 'originalBound': "max([11*A+11*B+25,11*A+25,25,11*B+25]) ", 'parsedBound': "max(11 * A + 11 * B + 25, 11 * A + 25, 25, 11 * B + 25)", 'degree': 1.0, 'variableCount': 2, 'time': 343 },
  'costa/jvm-cost/BST': { "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 274 },
  'costa/jvm-cost/FactSum': { "stdout": True, 'originalBound': "max([ (9*A+16)* (1*A)+22,22]) ", 'parsedBound': "max((9 * A + 16) * A + 22, 22)", 'degree': 2.0, 'variableCount': 1, 'time': 316 },
  'costa/jvm-cost/ListReverse': { "stdout": True, 'originalBound': "max([13*A+8,8]) ", 'parsedBound': "max(13 * A + 8, 8)", 'degree': 1.0, 'variableCount': 1, 'time': 279 },
  'costa/jvm-cost/Delete': { "stdout": True, 'originalBound': "max([max([ (25*F+37)* (1*A), (15*F+37)* (1*A), (10*F+37)* (1*A),38*A,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*D), (15*F+37)*nat(1*A+ -1*D), (10*F+37)*nat(1*A+ -1*D),nat(1*A+ -1*D)*38,nat(1*A+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+33)*nat(1*A+ -3*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+38)*nat(1*A+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+38)*nat(1*A+ -3*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+33)*nat(1*A+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (25*D+38)*nat(1*A+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+38)*nat(1*A+ -3*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+38)*nat(1*A+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+38)*nat(1*A+ -3*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+38)*nat(1*A+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (10*D+33)*nat(1*A+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+33)*nat(1*A+ -3*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+38)*nat(1*A+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+38)*nat(1*A+ -3*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+33)*nat(1*A+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (10*D+38)*nat(1*A+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),nat(1*A+ -1*D)*32,nat(1*A+ -1*D)*37, (10*F+32)*nat(1*A+ -1*D), (15*D+38)*nat(1*A+ -1*D), (25*F+32)*nat(1*A+ -1*D)]), (25*D+33)* (1*A), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C), (15*F+37)*nat(1*A+ -1*C), (10*F+37)*nat(1*A+ -1*C),nat(1*A+ -1*C)*38,nat(1*A+ -1*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (25*D+38)*nat(1*A+ -1*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+38)*nat(1*A+ -2*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+33)*nat(1*A+ -3*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+33)*nat(1*A+ -2*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+38)*nat(1*A+ -3*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (10*D+33)*nat(1*A+ -1*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+38)*nat(1*A+ -2*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+38)*nat(1*A+ -3*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+38)*nat(1*A+ -2*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+38)*nat(1*A+ -3*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (10*D+38)*nat(1*A+ -1*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+38)*nat(1*A+ -2*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+33)*nat(1*A+ -3*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+33)*nat(1*A+ -2*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+38)*nat(1*A+ -3*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),nat(1*A+ -1*C)*32,nat(1*A+ -1*C)*37, (10*F+32)*nat(1*A+ -1*C), (15*D+38)*nat(1*A+ -1*C), (25*F+32)*nat(1*A+ -1*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*D), (15*F+37)*nat(1*A+ -1*D), (10*F+37)*nat(1*A+ -1*D),nat(1*A+ -1*D)*38,nat(1*A+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+38)*nat(1*A+ -3*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+33)*nat(1*A+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+33)*nat(1*A+ -3*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+38)*nat(1*A+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (25*D+38)*nat(1*A+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+33)*nat(1*A+ -3*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+38)*nat(1*A+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+38)*nat(1*A+ -3*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+33)*nat(1*A+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (10*D+38)*nat(1*A+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+38)*nat(1*A+ -3*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+38)*nat(1*A+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+38)*nat(1*A+ -3*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+38)*nat(1*A+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (25*D+33)*nat(1*A+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),nat(1*A+ -1*D)*32,nat(1*A+ -1*D)*37, (10*F+32)*nat(1*A+ -1*D), (15*D+38)*nat(1*A+ -1*D), (25*F+32)*nat(1*A+ -1*D)]), (10*D+33)* (1*A), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C), (15*F+37)*nat(1*A+ -1*C), (10*F+37)*nat(1*A+ -1*C),nat(1*A+ -1*C)*38,nat(1*A+ -1*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (25*D+38)*nat(1*A+ -1*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+33)*nat(1*A+ -2*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+38)*nat(1*A+ -3*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+38)*nat(1*A+ -2*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+33)*nat(1*A+ -3*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (10*D+38)*nat(1*A+ -1*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+38)*nat(1*A+ -2*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+33)*nat(1*A+ -3*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+33)*nat(1*A+ -2*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+38)*nat(1*A+ -3*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (25*D+33)*nat(1*A+ -1*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+38)*nat(1*A+ -2*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+38)*nat(1*A+ -3*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+38)*nat(1*A+ -2*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+38)*nat(1*A+ -3*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),nat(1*A+ -1*C)*32,nat(1*A+ -1*C)*37, (10*F+32)*nat(1*A+ -1*C), (15*D+38)*nat(1*A+ -1*C), (25*F+32)*nat(1*A+ -1*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*D), (15*F+37)*nat(1*A+ -1*D), (10*F+37)*nat(1*A+ -1*D),nat(1*A+ -1*D)*38,nat(1*A+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+33)*nat(1*A+ -3*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+33)*nat(1*A+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+33)*nat(1*A+ -3*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+33)*nat(1*A+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (25*D+38)*nat(1*A+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+33)*nat(1*A+ -3*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+38)*nat(1*A+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+38)*nat(1*A+ -3*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+33)*nat(1*A+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (10*D+33)*nat(1*A+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+33)*nat(1*A+ -3*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+38)*nat(1*A+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+38)*nat(1*A+ -3*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+33)*nat(1*A+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (25*D+33)*nat(1*A+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),nat(1*A+ -1*D)*32,nat(1*A+ -1*D)*37, (10*F+32)*nat(1*A+ -1*D), (15*D+38)*nat(1*A+ -1*D), (25*F+32)*nat(1*A+ -1*D)]), (10*D+38)* (1*A), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C), (15*F+37)*nat(1*A+ -1*C), (10*F+37)*nat(1*A+ -1*C),nat(1*A+ -1*C)*38,nat(1*A+ -1*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (25*D+38)*nat(1*A+ -1*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+33)*nat(1*A+ -2*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+33)*nat(1*A+ -3*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+33)*nat(1*A+ -2*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+33)*nat(1*A+ -3*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (10*D+33)*nat(1*A+ -1*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+38)*nat(1*A+ -2*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+33)*nat(1*A+ -3*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+33)*nat(1*A+ -2*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+38)*nat(1*A+ -3*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+38)*nat(1*A+ -1*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+38)*nat(1*A+ -1*C+ -2*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (25*D+33)*nat(1*A+ -1*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+38)*nat(1*A+ -2*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+33)*nat(1*A+ -3*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+38)*nat(1*A+ -2*C+ -1*D), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+33)*nat(1*A+ -2*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+38)*nat(1*A+ -3*C), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),nat(1*A+ -1*C)*32,nat(1*A+ -1*C)*37, (10*F+32)*nat(1*A+ -1*C), (15*D+38)*nat(1*A+ -1*C), (25*F+32)*nat(1*A+ -1*C)])]),min([ (25*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*D), (15*F+37)*nat(1*A+ -1*D), (10*F+37)*nat(1*A+ -1*D),nat(1*A+ -1*D)*38,nat(1*A+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+33)*nat(1*A+ -3*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+38)*nat(1*A+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+38)*nat(1*A+ -3*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+33)*nat(1*A+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (25*D+33)*nat(1*A+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+38)*nat(1*A+ -3*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+33)*nat(1*A+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+33)*nat(1*A+ -3*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+38)*nat(1*A+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (10*D+33)*nat(1*A+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*D), (15*F+37)*nat(1*A+ -2*D), (10*F+37)*nat(1*A+ -2*D),nat(1*A+ -2*D)*38,nat(1*A+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (10*D+33)*nat(1*A+ -3*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (25*D+33)*nat(1*A+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*D), (15*F+37)*nat(1*A+ -3*D), (10*F+37)*nat(1*A+ -3*D),nat(1*A+ -3*D)*38,nat(1*A+ -3*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -4*D), (15*F+37)*nat(1*A+ -4*D), (10*F+37)*nat(1*A+ -4*D),nat(1*A+ -4*D)*38,nat(1*A+ -4*D)*33,nat(1*A+ -4*D)*32,nat(1*A+ -4*D)*37, (10*F+32)*nat(1*A+ -4*D), (15*D+38)*nat(1*A+ -4*D), (25*F+32)*nat(1*A+ -4*D)]), (25*D+33)*nat(1*A+ -3*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)])]),nat(1*A+ -3*D)*32,nat(1*A+ -3*D)*37, (10*F+32)*nat(1*A+ -3*D), (15*D+38)*nat(1*A+ -3*D), (25*F+32)*nat(1*A+ -3*D)]), (10*D+33)*nat(1*A+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)])]),nat(1*A+ -2*D)*32,nat(1*A+ -2*D)*37, (10*F+32)*nat(1*A+ -2*D), (15*D+38)*nat(1*A+ -2*D), (25*F+32)*nat(1*A+ -2*D)]), (10*D+38)*nat(1*A+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)])]),nat(1*A+ -1*D)*32,nat(1*A+ -1*D)*37, (10*F+32)*nat(1*A+ -1*D), (15*D+38)*nat(1*A+ -1*D), (25*F+32)*nat(1*A+ -1*D)]), (25*D+38)* (1*A), (25*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -1*C), (15*F+37)*nat(1*A+ -1*C), (10*F+37)*nat(1*A+ -1*C),nat(1*A+ -1*C)*38,nat(1*A+ -1*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (25*D+33)*nat(1*A+ -1*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+38)*nat(1*A+ -2*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+33)*nat(1*A+ -3*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+33)*nat(1*A+ -2*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+38)*nat(1*A+ -3*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+38)*nat(1*A+ -1*C+ -2*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+38)*nat(1*A+ -1*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (10*D+33)*nat(1*A+ -1*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+38)*nat(1*A+ -2*C+ -1*D), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+33)*nat(1*A+ -2*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+38)*nat(1*A+ -3*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+38)*nat(1*A+ -2*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+33)*nat(1*A+ -3*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),min([ (10*D+38)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -1*D), (15*F+37)*nat(1*A+ -1*C+ -1*D), (10*F+37)*nat(1*A+ -1*C+ -1*D),nat(1*A+ -1*C+ -1*D)*38,nat(1*A+ -1*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (10*D+33)*nat(1*A+ -1*C+ -2*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (25*D+33)*nat(1*A+ -1*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -2*D), (15*F+37)*nat(1*A+ -1*C+ -2*D), (10*F+37)*nat(1*A+ -1*C+ -2*D),nat(1*A+ -1*C+ -2*D)*38,nat(1*A+ -1*C+ -2*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -1*C+ -3*D), (15*F+37)*nat(1*A+ -1*C+ -3*D), (10*F+37)*nat(1*A+ -1*C+ -3*D),nat(1*A+ -1*C+ -3*D)*38,nat(1*A+ -1*C+ -3*D)*33,nat(1*A+ -1*C+ -3*D)*32,nat(1*A+ -1*C+ -3*D)*37, (10*F+32)*nat(1*A+ -1*C+ -3*D), (15*D+38)*nat(1*A+ -1*C+ -3*D), (25*F+32)*nat(1*A+ -1*C+ -3*D)]), (25*D+33)*nat(1*A+ -1*C+ -2*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)])]),nat(1*A+ -1*C+ -2*D)*32,nat(1*A+ -1*C+ -2*D)*37, (10*F+32)*nat(1*A+ -1*C+ -2*D), (15*D+38)*nat(1*A+ -1*C+ -2*D), (25*F+32)*nat(1*A+ -1*C+ -2*D)]), (10*D+33)*nat(1*A+ -1*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)])]),nat(1*A+ -1*C+ -1*D)*32,nat(1*A+ -1*C+ -1*D)*37, (10*F+32)*nat(1*A+ -1*C+ -1*D), (15*D+38)*nat(1*A+ -1*C+ -1*D), (25*F+32)*nat(1*A+ -1*C+ -1*D)]), (10*D+38)*nat(1*A+ -1*C), (10*D+38)* (1*C)+max([ (25*F+37)*nat(1*A+ -2*C), (15*F+37)*nat(1*A+ -2*C), (10*F+37)*nat(1*A+ -2*C),nat(1*A+ -2*C)*38,nat(1*A+ -2*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (10*D+33)*nat(1*A+ -2*C+ -1*D), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (25*D+33)*nat(1*A+ -2*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (10*D+33)*nat(1*A+ -3*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),min([ (10*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -1*D), (15*F+37)*nat(1*A+ -2*C+ -1*D), (10*F+37)*nat(1*A+ -2*C+ -1*D),nat(1*A+ -2*C+ -1*D)*38,nat(1*A+ -2*C+ -1*D)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -2*C+ -2*D), (15*F+37)*nat(1*A+ -2*C+ -2*D), (10*F+37)*nat(1*A+ -2*C+ -2*D),nat(1*A+ -2*C+ -2*D)*38,nat(1*A+ -2*C+ -2*D)*33,nat(1*A+ -2*C+ -2*D)*32,nat(1*A+ -2*C+ -2*D)*37, (10*F+32)*nat(1*A+ -2*C+ -2*D), (15*D+38)*nat(1*A+ -2*C+ -2*D), (25*F+32)*nat(1*A+ -2*C+ -2*D)]), (25*D+33)*nat(1*A+ -2*C+ -1*D), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)])]),nat(1*A+ -2*C+ -1*D)*32,nat(1*A+ -2*C+ -1*D)*37, (10*F+32)*nat(1*A+ -2*C+ -1*D), (15*D+38)*nat(1*A+ -2*C+ -1*D), (25*F+32)*nat(1*A+ -2*C+ -1*D)]), (10*D+33)*nat(1*A+ -2*C), (10*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -3*C), (15*F+37)*nat(1*A+ -3*C), (10*F+37)*nat(1*A+ -3*C),nat(1*A+ -3*C)*38,nat(1*A+ -3*C)*33,min([ (25*D+33)* (1*D)+max([ (25*F+37)*nat(1*A+ -3*C+ -1*D), (15*F+37)*nat(1*A+ -3*C+ -1*D), (10*F+37)*nat(1*A+ -3*C+ -1*D),nat(1*A+ -3*C+ -1*D)*38,nat(1*A+ -3*C+ -1*D)*33,nat(1*A+ -3*C+ -1*D)*32,nat(1*A+ -3*C+ -1*D)*37, (10*F+32)*nat(1*A+ -3*C+ -1*D), (15*D+38)*nat(1*A+ -3*C+ -1*D), (25*F+32)*nat(1*A+ -3*C+ -1*D)]), (25*D+33)*nat(1*A+ -3*C), (25*D+33)* (1*C)+max([ (25*F+37)*nat(1*A+ -4*C), (15*F+37)*nat(1*A+ -4*C), (10*F+37)*nat(1*A+ -4*C),nat(1*A+ -4*C)*38,nat(1*A+ -4*C)*33,nat(1*A+ -4*C)*32,nat(1*A+ -4*C)*37, (10*F+32)*nat(1*A+ -4*C), (15*D+38)*nat(1*A+ -4*C), (25*F+32)*nat(1*A+ -4*C)])]),nat(1*A+ -3*C)*32,nat(1*A+ -3*C)*37, (10*F+32)*nat(1*A+ -3*C), (15*D+38)*nat(1*A+ -3*C), (25*F+32)*nat(1*A+ -3*C)])]),nat(1*A+ -2*C)*32,nat(1*A+ -2*C)*37, (10*F+32)*nat(1*A+ -2*C), (15*D+38)*nat(1*A+ -2*C), (25*F+32)*nat(1*A+ -2*C)])]),nat(1*A+ -1*C)*32,nat(1*A+ -1*C)*37, (10*F+32)*nat(1*A+ -1*C), (15*D+38)*nat(1*A+ -1*C), (25*F+32)*nat(1*A+ -1*C)])]), (10*F+32)* (1*A), (15*D+38)* (1*A), (25*F+32)* (1*A)])+3,3]) ", 'parsedBound': "max(max((25 * F + 37) * A, (15 * F + 37) * A, (10 * F + 37) * A, 38 * A, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * D), (15 * F + 37) * max(0, A + -1 * D), (10 * F + 37) * max(0, A + -1 * D), max(0, A + -1 * D) * 38, max(0, A + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 33) * max(0, A + -3 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 38) * max(0, A + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 38) * max(0, A + -3 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 33) * max(0, A + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (25 * D + 38) * max(0, A + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 38) * max(0, A + -3 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 38) * max(0, A + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 38) * max(0, A + -3 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 38) * max(0, A + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (10 * D + 33) * max(0, A + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 33) * max(0, A + -3 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 38) * max(0, A + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 38) * max(0, A + -3 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 33) * max(0, A + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (10 * D + 38) * max(0, A + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), max(0, A + -1 * D) * 32, max(0, A + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * D), (15 * D + 38) * max(0, A + -1 * D), (25 * F + 32) * max(0, A + -1 * D)), (25 * D + 33) * A, (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C), (15 * F + 37) * max(0, A + -1 * C), (10 * F + 37) * max(0, A + -1 * C), max(0, A + -1 * C) * 38, max(0, A + -1 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (25 * D + 38) * max(0, A + -1 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 38) * max(0, A + -2 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 33) * max(0, A + -3 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 33) * max(0, A + -2 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 38) * max(0, A + -3 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (10 * D + 33) * max(0, A + -1 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 38) * max(0, A + -2 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 38) * max(0, A + -3 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 38) * max(0, A + -2 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 38) * max(0, A + -3 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (10 * D + 38) * max(0, A + -1 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 38) * max(0, A + -2 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 33) * max(0, A + -3 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 33) * max(0, A + -2 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 38) * max(0, A + -3 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), max(0, A + -1 * C) * 32, max(0, A + -1 * C) * 37, (10 * F + 32) * max(0, A + -1 * C), (15 * D + 38) * max(0, A + -1 * C), (25 * F + 32) * max(0, A + -1 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * D), (15 * F + 37) * max(0, A + -1 * D), (10 * F + 37) * max(0, A + -1 * D), max(0, A + -1 * D) * 38, max(0, A + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 38) * max(0, A + -3 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 33) * max(0, A + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 33) * max(0, A + -3 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 38) * max(0, A + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (25 * D + 38) * max(0, A + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 33) * max(0, A + -3 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 38) * max(0, A + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 38) * max(0, A + -3 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 33) * max(0, A + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (10 * D + 38) * max(0, A + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 38) * max(0, A + -3 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 38) * max(0, A + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 38) * max(0, A + -3 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 38) * max(0, A + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (25 * D + 33) * max(0, A + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), max(0, A + -1 * D) * 32, max(0, A + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * D), (15 * D + 38) * max(0, A + -1 * D), (25 * F + 32) * max(0, A + -1 * D)), (10 * D + 33) * A, (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C), (15 * F + 37) * max(0, A + -1 * C), (10 * F + 37) * max(0, A + -1 * C), max(0, A + -1 * C) * 38, max(0, A + -1 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (25 * D + 38) * max(0, A + -1 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 33) * max(0, A + -2 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 38) * max(0, A + -3 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 38) * max(0, A + -2 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 33) * max(0, A + -3 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (10 * D + 38) * max(0, A + -1 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 38) * max(0, A + -2 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 33) * max(0, A + -3 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 33) * max(0, A + -2 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 38) * max(0, A + -3 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (25 * D + 33) * max(0, A + -1 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 38) * max(0, A + -2 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 38) * max(0, A + -3 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 38) * max(0, A + -2 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 38) * max(0, A + -3 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), max(0, A + -1 * C) * 32, max(0, A + -1 * C) * 37, (10 * F + 32) * max(0, A + -1 * C), (15 * D + 38) * max(0, A + -1 * C), (25 * F + 32) * max(0, A + -1 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * D), (15 * F + 37) * max(0, A + -1 * D), (10 * F + 37) * max(0, A + -1 * D), max(0, A + -1 * D) * 38, max(0, A + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 33) * max(0, A + -3 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 33) * max(0, A + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 33) * max(0, A + -3 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 33) * max(0, A + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (25 * D + 38) * max(0, A + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 33) * max(0, A + -3 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 38) * max(0, A + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 38) * max(0, A + -3 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 33) * max(0, A + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (10 * D + 33) * max(0, A + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 33) * max(0, A + -3 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 38) * max(0, A + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 38) * max(0, A + -3 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 33) * max(0, A + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (25 * D + 33) * max(0, A + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), max(0, A + -1 * D) * 32, max(0, A + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * D), (15 * D + 38) * max(0, A + -1 * D), (25 * F + 32) * max(0, A + -1 * D)), (10 * D + 38) * A, (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C), (15 * F + 37) * max(0, A + -1 * C), (10 * F + 37) * max(0, A + -1 * C), max(0, A + -1 * C) * 38, max(0, A + -1 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (25 * D + 38) * max(0, A + -1 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 33) * max(0, A + -2 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 33) * max(0, A + -3 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 33) * max(0, A + -2 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 33) * max(0, A + -3 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (10 * D + 33) * max(0, A + -1 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 38) * max(0, A + -2 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 33) * max(0, A + -3 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 33) * max(0, A + -2 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 38) * max(0, A + -3 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (25 * D + 33) * max(0, A + -1 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 38) * max(0, A + -2 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 33) * max(0, A + -3 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 33) * max(0, A + -2 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 38) * max(0, A + -3 * C), (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), max(0, A + -1 * C) * 32, max(0, A + -1 * C) * 37, (10 * F + 32) * max(0, A + -1 * C), (15 * D + 38) * max(0, A + -1 * C), (25 * F + 32) * max(0, A + -1 * C))), min((25 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * D), (15 * F + 37) * max(0, A + -1 * D), (10 * F + 37) * max(0, A + -1 * D), max(0, A + -1 * D) * 38, max(0, A + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 33) * max(0, A + -3 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 38) * max(0, A + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 38) * max(0, A + -3 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 33) * max(0, A + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (25 * D + 33) * max(0, A + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 38) * max(0, A + -3 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 33) * max(0, A + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 33) * max(0, A + -3 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 38) * max(0, A + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (10 * D + 33) * max(0, A + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * D), (15 * F + 37) * max(0, A + -2 * D), (10 * F + 37) * max(0, A + -2 * D), max(0, A + -2 * D) * 38, max(0, A + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (10 * D + 33) * max(0, A + -3 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (25 * D + 33) * max(0, A + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * D), (15 * F + 37) * max(0, A + -3 * D), (10 * F + 37) * max(0, A + -3 * D), max(0, A + -3 * D) * 38, max(0, A + -3 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -4 * D), (15 * F + 37) * max(0, A + -4 * D), (10 * F + 37) * max(0, A + -4 * D), max(0, A + -4 * D) * 38, max(0, A + -4 * D) * 33, max(0, A + -4 * D) * 32, max(0, A + -4 * D) * 37, (10 * F + 32) * max(0, A + -4 * D), (15 * D + 38) * max(0, A + -4 * D), (25 * F + 32) * max(0, A + -4 * D)), (25 * D + 33) * max(0, A + -3 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D))), max(0, A + -3 * D) * 32, max(0, A + -3 * D) * 37, (10 * F + 32) * max(0, A + -3 * D), (15 * D + 38) * max(0, A + -3 * D), (25 * F + 32) * max(0, A + -3 * D)), (10 * D + 33) * max(0, A + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D))), max(0, A + -2 * D) * 32, max(0, A + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * D), (15 * D + 38) * max(0, A + -2 * D), (25 * F + 32) * max(0, A + -2 * D)), (10 * D + 38) * max(0, A + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D))), max(0, A + -1 * D) * 32, max(0, A + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * D), (15 * D + 38) * max(0, A + -1 * D), (25 * F + 32) * max(0, A + -1 * D)), (25 * D + 38) * A, (25 * D + 38) * C + max((25 * F + 37) * max(0, A + -1 * C), (15 * F + 37) * max(0, A + -1 * C), (10 * F + 37) * max(0, A + -1 * C), max(0, A + -1 * C) * 38, max(0, A + -1 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (25 * D + 33) * max(0, A + -1 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 38) * max(0, A + -2 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 33) * max(0, A + -3 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 33) * max(0, A + -2 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 38) * max(0, A + -3 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 38) * max(0, A + -1 * C + -2 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 38) * max(0, A + -1 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (10 * D + 33) * max(0, A + -1 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 38) * max(0, A + -2 * C + -1 * D), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 33) * max(0, A + -2 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 38) * max(0, A + -3 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 38) * max(0, A + -2 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 33) * max(0, A + -3 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), min((10 * D + 38) * D + max((25 * F + 37) * max(0, A + -1 * C + -1 * D), (15 * F + 37) * max(0, A + -1 * C + -1 * D), (10 * F + 37) * max(0, A + -1 * C + -1 * D), max(0, A + -1 * C + -1 * D) * 38, max(0, A + -1 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (10 * D + 33) * max(0, A + -1 * C + -2 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (25 * D + 33) * max(0, A + -1 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -2 * D), (15 * F + 37) * max(0, A + -1 * C + -2 * D), (10 * F + 37) * max(0, A + -1 * C + -2 * D), max(0, A + -1 * C + -2 * D) * 38, max(0, A + -1 * C + -2 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -1 * C + -3 * D), (15 * F + 37) * max(0, A + -1 * C + -3 * D), (10 * F + 37) * max(0, A + -1 * C + -3 * D), max(0, A + -1 * C + -3 * D) * 38, max(0, A + -1 * C + -3 * D) * 33, max(0, A + -1 * C + -3 * D) * 32, max(0, A + -1 * C + -3 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -3 * D), (15 * D + 38) * max(0, A + -1 * C + -3 * D), (25 * F + 32) * max(0, A + -1 * C + -3 * D)), (25 * D + 33) * max(0, A + -1 * C + -2 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D))), max(0, A + -1 * C + -2 * D) * 32, max(0, A + -1 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -2 * D), (15 * D + 38) * max(0, A + -1 * C + -2 * D), (25 * F + 32) * max(0, A + -1 * C + -2 * D)), (10 * D + 33) * max(0, A + -1 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D))), max(0, A + -1 * C + -1 * D) * 32, max(0, A + -1 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -1 * C + -1 * D), (15 * D + 38) * max(0, A + -1 * C + -1 * D), (25 * F + 32) * max(0, A + -1 * C + -1 * D)), (10 * D + 38) * max(0, A + -1 * C), (10 * D + 38) * C + max((25 * F + 37) * max(0, A + -2 * C), (15 * F + 37) * max(0, A + -2 * C), (10 * F + 37) * max(0, A + -2 * C), max(0, A + -2 * C) * 38, max(0, A + -2 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (10 * D + 33) * max(0, A + -2 * C + -1 * D), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (25 * D + 33) * max(0, A + -2 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (10 * D + 33) * max(0, A + -3 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), min((10 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -1 * D), (15 * F + 37) * max(0, A + -2 * C + -1 * D), (10 * F + 37) * max(0, A + -2 * C + -1 * D), max(0, A + -2 * C + -1 * D) * 38, max(0, A + -2 * C + -1 * D) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -2 * C + -2 * D), (15 * F + 37) * max(0, A + -2 * C + -2 * D), (10 * F + 37) * max(0, A + -2 * C + -2 * D), max(0, A + -2 * C + -2 * D) * 38, max(0, A + -2 * C + -2 * D) * 33, max(0, A + -2 * C + -2 * D) * 32, max(0, A + -2 * C + -2 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -2 * D), (15 * D + 38) * max(0, A + -2 * C + -2 * D), (25 * F + 32) * max(0, A + -2 * C + -2 * D)), (25 * D + 33) * max(0, A + -2 * C + -1 * D), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D))), max(0, A + -2 * C + -1 * D) * 32, max(0, A + -2 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -2 * C + -1 * D), (15 * D + 38) * max(0, A + -2 * C + -1 * D), (25 * F + 32) * max(0, A + -2 * C + -1 * D)), (10 * D + 33) * max(0, A + -2 * C), (10 * D + 33) * C + max((25 * F + 37) * max(0, A + -3 * C), (15 * F + 37) * max(0, A + -3 * C), (10 * F + 37) * max(0, A + -3 * C), max(0, A + -3 * C) * 38, max(0, A + -3 * C) * 33, min((25 * D + 33) * D + max((25 * F + 37) * max(0, A + -3 * C + -1 * D), (15 * F + 37) * max(0, A + -3 * C + -1 * D), (10 * F + 37) * max(0, A + -3 * C + -1 * D), max(0, A + -3 * C + -1 * D) * 38, max(0, A + -3 * C + -1 * D) * 33, max(0, A + -3 * C + -1 * D) * 32, max(0, A + -3 * C + -1 * D) * 37, (10 * F + 32) * max(0, A + -3 * C + -1 * D), (15 * D + 38) * max(0, A + -3 * C + -1 * D), (25 * F + 32) * max(0, A + -3 * C + -1 * D)), (25 * D + 33) * max(0, A + -3 * C), (25 * D + 33) * C + max((25 * F + 37) * max(0, A + -4 * C), (15 * F + 37) * max(0, A + -4 * C), (10 * F + 37) * max(0, A + -4 * C), max(0, A + -4 * C) * 38, max(0, A + -4 * C) * 33, max(0, A + -4 * C) * 32, max(0, A + -4 * C) * 37, (10 * F + 32) * max(0, A + -4 * C), (15 * D + 38) * max(0, A + -4 * C), (25 * F + 32) * max(0, A + -4 * C))), max(0, A + -3 * C) * 32, max(0, A + -3 * C) * 37, (10 * F + 32) * max(0, A + -3 * C), (15 * D + 38) * max(0, A + -3 * C), (25 * F + 32) * max(0, A + -3 * C))), max(0, A + -2 * C) * 32, max(0, A + -2 * C) * 37, (10 * F + 32) * max(0, A + -2 * C), (15 * D + 38) * max(0, A + -2 * C), (25 * F + 32) * max(0, A + -2 * C))), max(0, A + -1 * C) * 32, max(0, A + -1 * C) * 37, (10 * F + 32) * max(0, A + -1 * C), (15 * D + 38) * max(0, A + -1 * C), (25 * F + 32) * max(0, A + -1 * C))), (10 * F + 32) * A, (15 * D + 38) * A, (25 * F + 32) * A) + 3, 3)", 'degree': 2.0, 'variableCount': 4, 'time': 33401 },
  'costa/jvm-cost/FactSumNew': { "stdout": True, 'originalBound': "max([ (9*A+12)* (1*A)+19,19]) ", 'parsedBound': "max((9 * A + 12) * A + 19, 19)", 'degree': 2.0, 'variableCount': 1, 'time': 323 },
  'costa/jvm-cost/EvenDigitsNew': { "stdout": True, 'originalBound': "max([ (14*A+ -5)* (1*A)+26,10]) ", 'parsedBound': "max((14 * A + -5) * A + 26, 10)", 'degree': 2.0, 'variableCount': 1, 'time': 377 },
  'c-examples/ABC/ex08': { "stdout": True, 'originalBound': "max([ (2*B+3)* (1*A)+4,4,3*A+4]) ", 'parsedBound': "max((2 * B + 3) * A + 4, 4, 3 * A + 4)", 'degree': 2.0, 'variableCount': 2, 'time': 430 },
  'c-examples/ABC/ex06': { "stdout": True, 'originalBound': "max([ (2*B+3)* (1*B)+4,4]) ", 'parsedBound': "max((2 * B + 3) * B + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 450 },
  'c-examples/ABC/ex03': { "stdout": True, 'originalBound': "max([ (((2*B+3)* (1*B+ -1)+3)* (1*B+ -1)+2)* (1*B)+3*B+6,9]) ", 'parsedBound': "max((((2 * B + 3) * (B + -1) + 3) * (B + -1) + 2) * B + 3 * B + 6, 9)", 'degree': 4.0, 'variableCount': 1, 'time': 2110 },
  'c-examples/ABC/ex13': { "stdout": True, 'originalBound': "max([-3*A+3*B+7, (-1*A+1*B+1)* (min([-4*C+4*D,-4*C+2])+min([ (-1*A+1*B+1*D+1)* (4*D+6), (4*D+6)* (-1*C+1*D), (4*D+6)* (1*D+1)])+3)+4,4, (-1*A+1*B+1)* (min([ (-1*A+1*B+1*D+1)* (4*D+6), (4*D+6)* (1*D+1), (-1*C+1*D+1)* (4*D+6)])+3)+4, (-1*A+1*B+1)* (-4*C+4*D+7)+4]) ", 'parsedBound': "max(-3 * A + 3 * B + 7, (-1 * A + B + 1) * (min(-4 * C + 4 * D, -4 * C + 2) + min((-1 * A + B + D + 1) * (4 * D + 6), (4 * D + 6) * (-1 * C + D), (4 * D + 6) * (D + 1)) + 3) + 4, 4, (-1 * A + B + 1) * (min((-1 * A + B + D + 1) * (4 * D + 6), (4 * D + 6) * (D + 1), (-1 * C + D + 1) * (4 * D + 6)) + 3) + 4, (-1 * A + B + 1) * (-4 * C + 4 * D + 7) + 4)", 'degree': 3.0, 'variableCount': 4, 'time': 2728 },
  'c-examples/ABC/ex09': { "stdout": True, 'originalBound': "max([ (2*D+3)* (1*B)+4,4,3*B+4]) ", 'parsedBound': "max((2 * D + 3) * B + 4, 4, 3 * B + 4)", 'degree': 2.0, 'variableCount': 2, 'time': 517 },
  'c-examples/ABC/ex12': { "stdout": True, 'originalBound': "max([5*A+4,4]) ", 'parsedBound': "max(5 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 332 },
  'c-examples/ABC/ex02': { "stdout": True, 'originalBound': "max([ (2*B+3)* (1*B)+4,4]) ", 'parsedBound': "max((2 * B + 3) * B + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 494 },
  'c-examples/ABC/ex05': { "stdout": True, 'originalBound': "max([ (2*B+3)* (1*B)+4,4]) ", 'parsedBound': "max((2 * B + 3) * B + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 492 },
  'c-examples/ABC/ex11': { "stdout": True, 'originalBound': "max([ (2*B+3)* (1*A)+4,4,3*A+4]) ", 'parsedBound': "max((2 * B + 3) * A + 4, 4, 3 * A + 4)", 'degree': 2.0, 'variableCount': 2, 'time': 431 },
  'c-examples/ABC/ex14': { "stdout": True, 'originalBound': "max([ ((min([ (2*A+2*B+3)* (1*B+1), (2*A+2*B+3)* (1*A+1*B)])+3)* (1*B)+3)* (1*A)+4,4,3*A+4]) ", 'parsedBound': "max(((min((2 * A + 2 * B + 3) * (B + 1), (2 * A + 2 * B + 3) * (A + B)) + 3) * B + 3) * A + 4, 4, 3 * A + 4)", 'degree': 4.0, 'variableCount': 2, 'time': 2645 },
  'c-examples/ABC/ex01': { "stdout": True, 'originalBound': "max([-2*A+2*B+6,4]) ", 'parsedBound': "max(-2 * A + 2 * B + 6, 4)", 'degree': 1.0, 'variableCount': 2, 'time': 314 },
  'c-examples/ABC/ex10': { "stdout": True, 'originalBound': "max([ (2*B+3)* (1*A)+4,4,3*A+4]) ", 'parsedBound': "max((2 * B + 3) * A + 4, 4, 3 * A + 4)", 'degree': 2.0, 'variableCount': 2, 'time': 458 },
  'c-examples/ABC/ex15': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 2389 },
  'c-examples/ABC/ex04': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1711 },
  'c-examples/ABC/ex07': { "stdout": True, 'originalBound': "max([ (2*D+3)* (1*B)+4,4,3*B+4]) ", 'parsedBound': "max((2 * D + 3) * B + 4, 4, 3 * B + 4)", 'degree': 2.0, 'variableCount': 2, 'time': 520 },
  'c-examples/WTC/wise': { "stdout": True, 'originalBound': "max([3*A+ -3*B+4,4,-3*A+3*B+4]) ", 'parsedBound': "max(3 * A + -3 * B + 4, 4, -3 * A + 3 * B + 4)", 'degree': 1.0, 'variableCount': 2, 'time': 424 },
  'c-examples/WTC/realshellsort': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 2947 },
  'c-examples/WTC/realbubble': { "stdout": True, 'originalBound': "max([4*A* (1*A)+4*A+6,4*A+6,4,4*A* (1*A)+4]) ", 'parsedBound': "max(4 * A * A + 4 * A + 6, 4 * A + 6, 4, 4 * A * A + 4)", 'degree': 2.0, 'variableCount': 1, 'time': 745 },
  'c-examples/WTC/realheapsort': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 1756 },
  'c-examples/WTC/nd_loop': { "stdout": True, 'originalBound': "13 ", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 374 },
  'c-examples/WTC/easy2': { "stdout": True, 'originalBound': "max([2*A+4,4]) ", 'parsedBound': "max(2 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 292 },
  'c-examples/WTC/insertsort': { "stdout": True, 'originalBound': "max([3*B+max([ (3*B+2)* (1*B),5*B, (3*B+1)* (1*B)])+5,max([ (3*B+2)* (1*B),5*B, (3*B+1)* (1*B)])+4,5,max([ (3*B+2)* (1*B),5*B, (3*B+1)* (1*B)])+5]) ", 'parsedBound': "max(3 * B + max((3 * B + 2) * B, 5 * B, (3 * B + 1) * B) + 5, max((3 * B + 2) * B, 5 * B, (3 * B + 1) * B) + 4, 5, max((3 * B + 2) * B, 5 * B, (3 * B + 1) * B) + 5)", 'degree': 2.0, 'variableCount': 1, 'time': 927 },
  'c-examples/WTC/random2d': { "stdout": True, 'originalBound': "max([7*B+4,4]) ", 'parsedBound': "max(7 * B + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 651 },
  'c-examples/WTC/ax': { "stdout": True, 'originalBound': "max([ (2*C+1)* (1*C+ -3)+2*C+4,2*C+4,8, (2*C+1)* (1*C)+2*C+6]) ", 'parsedBound': "max((2 * C + 1) * (C + -3) + 2 * C + 4, 2 * C + 4, 8, (2 * C + 1) * C + 2 * C + 6)", 'degree': 2.0, 'variableCount': 1, 'time': 609 },
  'c-examples/WTC/exmini': { "stdout": True, 'originalBound': "max([-2*A+2*B+ -2*C+206,min([-2*A+2*B+ -2*C+202,-4*A+ -4*C+804])+2,4,min([-2*A+2*B+ -2*C+202,4*B+ -400])+4,min([-4/3*A+8/3*B+ -4/3*C+4/3,-2*A+2*B+ -2*C+202])+2]) ", 'parsedBound': "max(-2 * A + 2 * B + -2 * C + 206, min(-2 * A + 2 * B + -2 * C + 202, -4 * A + -4 * C + 804) + 2, 4, min(-2 * A + 2 * B + -2 * C + 202, 4 * B + -400) + 4, min(-4 / 3 * A + 8 / 3 * B + -4 / 3 * C + 4 / 3, -2 * A + 2 * B + -2 * C + 202) + 2)", 'degree': 1.0, 'variableCount': 3, 'time': 504 },
  'c-examples/WTC/cousot9': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 396 },
  'c-examples/WTC/while2': { "stdout": True, 'originalBound': "max([ (2*B+3)* (1*B)+4,4]) ", 'parsedBound': "max((2 * B + 3) * B + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 416 },
  'c-examples/WTC/aaron2': { "stdout": True, 'originalBound': "max([3*B+ -3*C+7,4]) ", 'parsedBound': "max(3 * B + -3 * C + 7, 4)", 'degree': 1.0, 'variableCount': 2, 'time': 457 },
  'c-examples/WTC/terminate': { "stdout": True, 'originalBound': "max([-2*A+2*B+ -2*C+206,min([-2*A+2*B+ -2*C+202,-4*A+ -4*C+804])+2,4,min([-2*A+2*B+ -2*C+202,4*B+ -400])+4,min([-4/3*A+8/3*B+ -4/3*C+4/3,-2*A+2*B+ -2*C+202])+2]) ", 'parsedBound': "max(-2 * A + 2 * B + -2 * C + 206, min(-2 * A + 2 * B + -2 * C + 202, -4 * A + -4 * C + 804) + 2, 4, min(-2 * A + 2 * B + -2 * C + 202, 4 * B + -400) + 4, min(-4 / 3 * A + 8 / 3 * B + -4 / 3 * C + 4 / 3, -2 * A + 2 * B + -2 * C + 202) + 2)", 'degree': 1.0, 'variableCount': 3, 'time': 500 },
  'c-examples/WTC/wcet2': { "stdout": True, 'originalBound': "max([-3*A+59,46,-23*A+119]) ", 'parsedBound': "max(-3 * A + 59, 46, -23 * A + 119)", 'degree': 1.0, 'variableCount': 1, 'time': 594 },
  'c-examples/WTC/random1d': { "stdout": True, 'originalBound': "max([2*A+4,3]) ", 'parsedBound': "max(2 * A + 4, 3)", 'degree': 1.0, 'variableCount': 1, 'time': 317 },
  'c-examples/WTC/nestedLoop': { "stdout": True, 'originalBound': "max([ (3*B+3)* (1*A+ -1*C)+3*B+2*C+10,3*A+4,4, (3*B+3)* (1*A)+4]) ", 'parsedBound': "max((3 * B + 3) * (A + -1 * C) + 3 * B + 2 * C + 10, 3 * A + 4, 4, (3 * B + 3) * A + 4)", 'degree': 2.0, 'variableCount': 3, 'time': 2478 },
  'c-examples/WTC/counterex1b': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 5036 },
  'c-examples/WTC/realselect': { "stdout": True, 'originalBound': "max([ (2*B+2)* (1*B)+4,4]) ", 'parsedBound': "max((2 * B + 2) * B + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 439 },
  'c-examples/WTC/sipmabubble': { "stdout": True, 'originalBound': "max([ (4*A+3)* (1*A)+7,7]) ", 'parsedBound': "max((4 * A + 3) * A + 7, 7)", 'degree': 2.0, 'variableCount': 1, 'time': 417 },
  'c-examples/WTC/sipma91': { "stdout": True, 'originalBound': "max([-3/11*A+300/11+ (min([-27/11*A+2760/11,-3*A+300])+min([-27/11*A+2760/11,-3*A+300]))+ (-2*A+202)+7,9]) ", 'parsedBound': "max(-3 / 11 * A + 300 / 11 + min(-27 / 11 * A + 2760 / 11, -3 * A + 300) + min(-27 / 11 * A + 2760 / 11, -3 * A + 300) + -2 * A + 202 + 7, 9)", 'degree': 1.0, 'variableCount': 1, 'time': 583 },
  'c-examples/WTC/rsd': { "stdout": True, 'originalBound': "max([3*A+3+min([nat(2*A+1+ (2*A+1)* (2*A))*3,nat(2*A+1+ (1*A+1)* (2*A))*3])+5,3]) ", 'parsedBound': "max(3 * A + 3 + min(max(0, 2 * A + 1 + (2 * A + 1) * 2 * A) * 3, max(0, 2 * A + 1 + (A + 1) * 2 * A) * 3) + 5, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 536 },
  'c-examples/WTC/speedpldi4': { "stdout": True, 'originalBound': "max([-3*A+3*B+3+min([-3*A+3*B,3*A])+4,3,-3*A+3*B+7]) ", 'parsedBound': "max(-3 * A + 3 * B + 3 + min(-3 * A + 3 * B, 3 * A) + 4, 3, -3 * A + 3 * B + 7)", 'degree': 1.0, 'variableCount': 2, 'time': 427 },
  'c-examples/WTC/perfect': { "stdout": True, 'originalBound': "max([ (2*A+3)* (1*A)+6,3]) ", 'parsedBound': "max((2 * A + 3) * A + 6, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 811 },
  'c-examples/WTC/realheapsort_step2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 868 },
  'c-examples/WTC/gcd': { "stdout": True, 'originalBound': "max([3*A+3*B+4,4]) ", 'parsedBound': "max(3 * A + 3 * B + 4, 4)", 'degree': 1.0, 'variableCount': 2, 'time': 435 },
  'c-examples/WTC/loops': { "stdout": True, 'originalBound': "max([ (2*A+2)* (1*A)+6+4,3,3*A+7]) ", 'parsedBound': "max((2 * A + 2) * A + 6 + 4, 3, 3 * A + 7)", 'degree': 2.0, 'variableCount': 1, 'time': 432 },
  'c-examples/WTC/easy1': { "stdout": True, 'originalBound': "124 ", 'parsedBound': "124", 'degree': 0.0, 'variableCount': 0, 'time': 392 },
  'c-examples/WTC/speedpldi2': { "stdout": True, 'originalBound': "max([5*A+4,4]) ", 'parsedBound': "max(5 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 413 },
  'c-examples/WTC/complex': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'c-examples/WTC/realheapsort_step1': { "stdout": True, 'originalBound': "max([max([7*A+ -12,min([3*A+ -12+3*A* (1*A), (2*A+ -4)* (3*A)]),min([6*A+ -12,3*A+max([4*A+ -16, (1*A+ -4)* (3*A), (3*A+1)* (1*A+ -4)])]),min([3*A+ -12+ (3*A+1)* (1*A), (3*A+1)* (2*A+ -4)])])+4,4,max([ (3*A+1)* (1*A),4*A,3*A* (1*A)])+4]) ", 'parsedBound': "max(max(7 * A + -12, min(3 * A + -12 + 3 * A * A, (2 * A + -4) * 3 * A), min(6 * A + -12, 3 * A + max(4 * A + -16, (A + -4) * 3 * A, (3 * A + 1) * (A + -4))), min(3 * A + -12 + (3 * A + 1) * A, (3 * A + 1) * (2 * A + -4))) + 4, 4, max((3 * A + 1) * A, 4 * A, 3 * A * A) + 4)", 'degree': 2.0, 'variableCount': 1, 'time': 997 },
  'c-examples/WTC/speedpldi3': { "stdout": True, 'originalBound': "max([3*B+min([nat(1*B+ -1+ (1*B+ -1)* (1*B))*3,nat((1*B+ -1)* (1*B)+1*A)*3,nat(1*B* (1*A)+1*A)*3,nat(1*B+ -1+1*B* (1*A))*3])+4,3]) ", 'parsedBound': "max(3 * B + min(max(0, B + -1 + (B + -1) * B) * 3, max(0, (B + -1) * B + A) * 3, max(0, B * A + A) * 3, max(0, B + -1 + B * A) * 3) + 4, 3)", 'degree': 2.0, 'variableCount': 2, 'time': 509 },
  'c-examples/WTC/speedFails4': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 421 },
  'c-examples/WTC/ndecr': { "stdout": True, 'originalBound': "max([2*A+4,4]) ", 'parsedBound': "max(2 * A + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 292 },
  'c-examples/WTC/wcet1': { "stdout": True, 'originalBound': "max([4*A+7,7]) ", 'parsedBound': "max(4 * A + 7, 7)", 'degree': 1.0, 'variableCount': 1, 'time': 674 },
  'c-examples/Rank/ex1': { "stdout": True, 'originalBound': "max([nat((1*B+1)* (1*B+1)+ (1*B+1)* (1*B)+1)*3+max([6*B+6, (3*B+6)* (1*B+1), (3*B+8)* (1*B+1)])+4,4,nat((1*B+1)* (1*B+1)+ (1*B+1)* (1*B)+1)*3+max([ (3*B+8)* (1*B),6*B, (3*B+6)* (1*B)])+2]) ", 'parsedBound': "max(max(0, (B + 1) * (B + 1) + (B + 1) * B + 1) * 3 + max(6 * B + 6, (3 * B + 6) * (B + 1), (3 * B + 8) * (B + 1)) + 4, 4, max(0, (B + 1) * (B + 1) + (B + 1) * B + 1) * 3 + max((3 * B + 8) * B, 6 * B, (3 * B + 6) * B) + 2)", 'degree': 2.0, 'variableCount': 1, 'time': 1522 },
  'c-examples/Rank/ex2': { "stdout": True, 'originalBound': "max([max([ (9/2*B+4)* (1*B)+9*B,14*B,9*B+max([ (9/2*B+4)* (1*B),5*B])])+4,4]) ", 'parsedBound': "max(max((9 / 2 * B + 4) * B + 9 * B, 14 * B, 9 * B + max((9 / 2 * B + 4) * B, 5 * B)) + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 746 },
  'c-examples/Rank/ex3': { "stdout": True, 'originalBound': "max([max([ (15/2*B+ -1)* (1*B),5*B,15/2*B* (1*B)])+4,4]) ", 'parsedBound': "max(max((15 / 2 * B + -1) * B, 5 * B, 15 / 2 * B * B) + 4, 4)", 'degree': 2.0, 'variableCount': 1, 'time': 863 },
  'c-examples/SPEED/PLDI09/NestedLoop': { "stdout": True, 'originalBound': "max([4*A+5,max([nat(1*A+1*C+ -8)*5+max([nat(1*A+1*C+ -8)*5,nat(1*A+1*C+ -8)*3]), (5*B+3*C+8)*nat(1*A+1*C+ -8), (4*B+3*C+8)*nat(1*A+1*C+ -8), (3*C+max([5*B,min([nat(1*B+ -1*C)*5+5*C,5*B])])+4)*nat(1*A+1*C+ -8), (4*B+5)*nat(1*A+1*C+ -8),nat(1*A+1*C+ -8)*5,min([nat(1*A+1*C+ -8)*5+max([nat(1*A+1*C+ -8)*5,min([nat(1*A+1*C+ -8)*5+nat(1*A+1*C+ -8)*5,max([nat(1*A+1*C+ -8)*5,nat(1*A+1*C+ -8)*3])]),nat(1*A+1*C+ -8)*3]),nat(1*A+1*C+ -8)*5+max([nat(1*A+1*C+ -8)*5,min([nat(1*A+1*C+ -8)*3,max([nat(1*A+1*C+ -8)*5,nat(1*A+1*C+ -8)*3])]),nat(1*A+1*C+ -8)*3]),nat(1*A+1*C+ -8)*5+max([nat(1*A+1*C+ -8)*5,min([nat(1*A+1*C+ -8)*5+nat(1*A+1*C+ -8)*5,max([nat(1*A+1*C+ -8)*5,nat(1*A+1*C+ -8)*3])]),min([nat(1*A+1*C+ -8)*3,max([nat(1*A+1*C+ -8)*5,nat(1*A+1*C+ -8)*3])]),nat(1*A+1*C+ -8)*3])]),min([nat(1*A+1*C+ -8)*5+nat(1*A+1*C+ -8)*3,nat(1*A+1*C+ -8)*3+max([nat(1*A+1*C+ -8)*5,min([nat(1*A+1*C+ -8)*5,nat(1*A+1*C+ -8)*3])]),nat(1*A+1*C+ -8)*3+max([nat(1*A+1*C+ -8)*5,min([nat(1*A+1*C+ -8)*3+nat(-1*A+ -1*C+8)*5,nat(1*A+1*C+ -8)*5])])]), (4*B+4)*nat(1*A+1*C+ -8), (3*C+max([min([nat(1*B+ -3)*5+min([nat(1*B+ -3)*4,12]),5*B]),min([nat(1*B+ -3)*4+min([nat(1*B+ -3)*5,15]),4*B])])+9)*nat(1*A+1*C+ -8), (3*C+max([5*B,min([nat(1*B+ -1*C)*5+5*C,5*B])])+5)*nat(1*A+1*C+ -8), (4*B+3*C+9)*nat(1*A+1*C+ -8), (5*B+3*C+9)*nat(1*A+1*C+ -8)])+4,5,max([nat(1*A+ -9)*5+max([nat(1*A+ -9)*5,nat(1*A+ -9)*3]), (5*B+3*C+8)*nat(1*A+ -9), (4*B+3*C+8)*nat(1*A+ -9), (3*C+max([5*B,min([nat(1*B+ -1*C)*5+5*C,5*B])])+4)*nat(1*A+ -9), (4*B+5)*nat(1*A+ -9),nat(1*A+ -9)*5,min([nat(1*A+ -9)*5+max([nat(1*A+ -9)*5,min([nat(1*A+ -9)*5+nat(1*A+ -9)*5,max([nat(1*A+ -9)*5,nat(1*A+ -9)*3])]),nat(1*A+ -9)*3]),nat(1*A+ -9)*5+max([nat(1*A+ -9)*5,min([nat(1*A+ -9)*3,max([nat(1*A+ -9)*5,nat(1*A+ -9)*3])]),nat(1*A+ -9)*3]),nat(1*A+ -9)*5+max([nat(1*A+ -9)*5,min([nat(1*A+ -9)*5+nat(1*A+ -9)*5,max([nat(1*A+ -9)*5,nat(1*A+ -9)*3])]),min([nat(1*A+ -9)*3,max([nat(1*A+ -9)*5,nat(1*A+ -9)*3])]),nat(1*A+ -9)*3])]),min([nat(1*A+ -9)*5+nat(1*A+ -9)*3,nat(1*A+ -9)*3+max([nat(1*A+ -9)*5,min([nat(1*A+ -9)*5,nat(1*A+ -9)*3])]),nat(1*A+ -9)*3+max([nat(1*A+ -9)*5,min([nat(1*A+ -9)*3+nat(-1*A+9)*5,nat(1*A+ -9)*5])])]), (4*B+4)*nat(1*A+ -9), (3*C+max([min([nat(1*B+ -3)*5+min([nat(1*B+ -3)*4,12]),5*B]),min([nat(1*B+ -3)*4+min([nat(1*B+ -3)*5,15]),4*B])])+9)*nat(1*A+ -9), (3*C+max([5*B,min([nat(1*B+ -1*C)*5+5*C,5*B])])+5)*nat(1*A+ -9), (4*B+3*C+9)*nat(1*A+ -9), (5*B+3*C+9)*nat(1*A+ -9)])+5]) ", 'parsedBound': "max(4 * A + 5, max(max(0, A + C + -8) * 5 + max(max(0, A + C + -8) * 5, max(0, A + C + -8) * 3), (5 * B + 3 * C + 8) * max(0, A + C + -8), (4 * B + 3 * C + 8) * max(0, A + C + -8), (3 * C + max(5 * B, min(max(0, B + -1 * C) * 5 + 5 * C, 5 * B)) + 4) * max(0, A + C + -8), (4 * B + 5) * max(0, A + C + -8), max(0, A + C + -8) * 5, min(max(0, A + C + -8) * 5 + max(max(0, A + C + -8) * 5, min(max(0, A + C + -8) * 5 + max(0, A + C + -8) * 5, max(max(0, A + C + -8) * 5, max(0, A + C + -8) * 3)), max(0, A + C + -8) * 3), max(0, A + C + -8) * 5 + max(max(0, A + C + -8) * 5, min(max(0, A + C + -8) * 3, max(max(0, A + C + -8) * 5, max(0, A + C + -8) * 3)), max(0, A + C + -8) * 3), max(0, A + C + -8) * 5 + max(max(0, A + C + -8) * 5, min(max(0, A + C + -8) * 5 + max(0, A + C + -8) * 5, max(max(0, A + C + -8) * 5, max(0, A + C + -8) * 3)), min(max(0, A + C + -8) * 3, max(max(0, A + C + -8) * 5, max(0, A + C + -8) * 3)), max(0, A + C + -8) * 3)), min(max(0, A + C + -8) * 5 + max(0, A + C + -8) * 3, max(0, A + C + -8) * 3 + max(max(0, A + C + -8) * 5, min(max(0, A + C + -8) * 5, max(0, A + C + -8) * 3)), max(0, A + C + -8) * 3 + max(max(0, A + C + -8) * 5, min(max(0, A + C + -8) * 3 + max(0, -1 * A + -1 * C + 8) * 5, max(0, A + C + -8) * 5))), (4 * B + 4) * max(0, A + C + -8), (3 * C + max(min(max(0, B + -3) * 5 + min(max(0, B + -3) * 4, 12), 5 * B), min(max(0, B + -3) * 4 + min(max(0, B + -3) * 5, 15), 4 * B)) + 9) * max(0, A + C + -8), (3 * C + max(5 * B, min(max(0, B + -1 * C) * 5 + 5 * C, 5 * B)) + 5) * max(0, A + C + -8), (4 * B + 3 * C + 9) * max(0, A + C + -8), (5 * B + 3 * C + 9) * max(0, A + C + -8)) + 4, 5, max(max(0, A + -9) * 5 + max(max(0, A + -9) * 5, max(0, A + -9) * 3), (5 * B + 3 * C + 8) * max(0, A + -9), (4 * B + 3 * C + 8) * max(0, A + -9), (3 * C + max(5 * B, min(max(0, B + -1 * C) * 5 + 5 * C, 5 * B)) + 4) * max(0, A + -9), (4 * B + 5) * max(0, A + -9), max(0, A + -9) * 5, min(max(0, A + -9) * 5 + max(max(0, A + -9) * 5, min(max(0, A + -9) * 5 + max(0, A + -9) * 5, max(max(0, A + -9) * 5, max(0, A + -9) * 3)), max(0, A + -9) * 3), max(0, A + -9) * 5 + max(max(0, A + -9) * 5, min(max(0, A + -9) * 3, max(max(0, A + -9) * 5, max(0, A + -9) * 3)), max(0, A + -9) * 3), max(0, A + -9) * 5 + max(max(0, A + -9) * 5, min(max(0, A + -9) * 5 + max(0, A + -9) * 5, max(max(0, A + -9) * 5, max(0, A + -9) * 3)), min(max(0, A + -9) * 3, max(max(0, A + -9) * 5, max(0, A + -9) * 3)), max(0, A + -9) * 3)), min(max(0, A + -9) * 5 + max(0, A + -9) * 3, max(0, A + -9) * 3 + max(max(0, A + -9) * 5, min(max(0, A + -9) * 5, max(0, A + -9) * 3)), max(0, A + -9) * 3 + max(max(0, A + -9) * 5, min(max(0, A + -9) * 3 + max(0, -1 * A + 9) * 5, max(0, A + -9) * 5))), (4 * B + 4) * max(0, A + -9), (3 * C + max(min(max(0, B + -3) * 5 + min(max(0, B + -3) * 4, 12), 5 * B), min(max(0, B + -3) * 4 + min(max(0, B + -3) * 5, 15), 4 * B)) + 9) * max(0, A + -9), (3 * C + max(5 * B, min(max(0, B + -1 * C) * 5 + 5 * C, 5 * B)) + 5) * max(0, A + -9), (4 * B + 3 * C + 9) * max(0, A + -9), (5 * B + 3 * C + 9) * max(0, A + -9)) + 5)", 'degree': 2.0, 'variableCount': 1, 'time': 21587 },
  'c-examples/SPEED/PLDI09/Example3': { "stdout": True, 'originalBound': "max([4*B+min([nat(1*B+ -1+ (1*B+ -1)* (1*B))*4,nat((1*B+ -1)* (1*B)+1*A)*4,nat(1*B* (1*A)+1*A)*4,nat(1*B+ -1+1*B* (1*A))*4])+5,5,4*B+min([nat(1*B+ -1+ (1*B+ -1)* (1*B))*4,nat((1*B+ -1)* (1*B)+1*A)*4,nat(1*B* (1*A)+1*A)*4,nat(1*B+ -1+1*B* (1*A))*4])+4]) ", 'parsedBound': "max(4 * B + min(max(0, B + -1 + (B + -1) * B) * 4, max(0, (B + -1) * B + A) * 4, max(0, B * A + A) * 4, max(0, B + -1 + B * A) * 4) + 5, 5, 4 * B + min(max(0, B + -1 + (B + -1) * B) * 4, max(0, (B + -1) * B + A) * 4, max(0, B * A + A) * 4, max(0, B + -1 + B * A) * 4) + 4)", 'degree': 2.0, 'variableCount': 2, 'time': 637 },
  'c-examples/SPEED/PLDI09/Example5': { "stdout": True, 'originalBound': "max([-3*A+3*B+4,3*A+4,2]) ", 'parsedBound': "max(-3 * A + 3 * B + 4, 3 * A + 4, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 567 },
  'c-examples/SPEED/PLDI09/Example6': { "stdout": True, 'originalBound': "max([max([3*D,min([ (nat(1*G)+3)*nat(1*G)+max([nat(1*D+ -1*G)*3,min([ (nat(1*G)+3)*nat(1*G)+nat(1*D+ -2*G)*3, (nat(1*G)+3)*nat(1*D+ -1*G)])]), (nat(1*G)+3)* (1*D)])])+4,4]) ", 'parsedBound': "max(max(3 * D, min((max(0, G) + 3) * max(0, G) + max(max(0, D + -1 * G) * 3, min((max(0, G) + 3) * max(0, G) + max(0, D + -2 * G) * 3, (max(0, G) + 3) * max(0, D + -1 * G))), (max(0, G) + 3) * D)) + 4, 4)", 'degree': 2.0, 'variableCount': 2, 'time': 1431 },
  'c-examples/SPEED/PLDI09/cyclic': { "stdout": True, 'originalBound': "max([-3*A+3*B+5,5,3*B+8]) ", 'parsedBound': "max(-3 * A + 3 * B + 5, 5, 3 * B + 8)", 'degree': 1.0, 'variableCount': 2, 'time': 1207 },
  'c-examples/SPEED/PLDI09/Example2': { "stdout": True, 'originalBound': "max([7*A+5,5]) ", 'parsedBound': "max(7 * A + 5, 5)", 'degree': 1.0, 'variableCount': 1, 'time': 467 },
  'c-examples/SPEED/PLDI09/Example4': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 357 },
  'c-examples/SPEED/POPL09/SimpleSingle': { "stdout": True, 'originalBound': "max([2*B+4,4]) ", 'parsedBound': "max(2 * B + 4, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 316 },
  'c-examples/SPEED/POPL09/Dis1': { "stdout": True, 'originalBound': "max([-3*A+3*B+ -3*C+3*D+4,4,-3*A+3*B+4]) ", 'parsedBound': "max(-3 * A + 3 * B + -3 * C + 3 * D + 4, 4, -3 * A + 3 * B + 4)", 'degree': 1.0, 'variableCount': 4, 'time': 459 },
  'c-examples/SPEED/POPL09/Dis2': { "stdout": True, 'originalBound': "max([-3*A+3*B+nat(1*B+ -1*C)*3+4,4]) ", 'parsedBound': "max(-3 * A + 3 * B + max(0, B + -1 * C) * 3 + 4, 4)", 'degree': 1.0, 'variableCount': 2, 'time': 378 },
  'c-examples/SPEED/POPL09/NestedSingle': { "stdout": True, 'originalBound': "max([4*B+7,3*B+7,4]) ", 'parsedBound': "max(4 * B + 7, 3 * B + 7, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 811 },
  'c-examples/SPEED/POPL09/SimpleSingle2': { "stdout": True, 'originalBound': "max([-1*C+4*D+6,3*C+6,6,4*D+6]) ", 'parsedBound': "max(-1 * C + 4 * D + 6, 3 * C + 6, 6, 4 * D + 6)", 'degree': 1.0, 'variableCount': 2, 'time': 1506 },
  'c-examples/SPEED/POPL09/NestedMultipleDep': { "stdout": True, 'originalBound': "max([ (2*E+3)* (1*B)+4,4,3*B+4]) ", 'parsedBound': "max((2 * E + 3) * B + 4, 4, 3 * B + 4)", 'degree': 2.0, 'variableCount': 2, 'time': 650 },
  'c-examples/SPEED/POPL09/NestedMultiple': { "stdout": True, 'originalBound': "max([-3*A+3*B+ -3*C+3*D+7,-3*C+3*D+7,max([-4*A+4*B+ -3*C+3*D,min([-3*C+3*D+nat(-1*A+1*B+1*C+ -1*D)*4+ (-4*C+4*D),-4*A+4*B+max([-3*C+3*D,min([-3*A+3*B+nat(1*A+ -1*B+ -1*C+1*D)*3,-3*C+3*D])])]),-3*C+3*D+max([-4*A+4*B,min([-4*C+4*D+nat(-1*A+1*B+1*C+ -1*D)*4,-4*A+4*B])])])+7,4,max([-4*A+4*B+ -3*C+3*D,min([-4*C+4*D+max([-3*C+3*D+nat(-1*A+1*B+1*C+ -1*D)*4,-3*C+3*D+max([nat(-1*A+1*B+1*C+ -1*D)*4,nat(-1*A+1*B+1*C+ -1*D)*3]),-3*C+3*D+nat(-1*A+1*B+1*C+ -1*D)*3]),-4*A+4*B+max([-3*C+3*D,min([-3*A+3*B+nat(1*A+ -1*B+ -1*C+1*D)*3,-3*C+3*D])])]),-3*C+3*D+max([-4*A+4*B,min([-4*C+4*D+max([nat(-1*A+1*B+1*C+ -1*D)*4,nat(-1*A+1*B+1*C+ -1*D)*3]),-4*A+4*B])])])+7,-3*A+3*B+4,-3*C+3*D+max([-4*A+4*B,min([-4*C+4*D+nat(-1*A+1*B+1*C+ -1*D)*4,-4*A+4*B])])+4]) ", 'parsedBound': "max(-3 * A + 3 * B + -3 * C + 3 * D + 7, -3 * C + 3 * D + 7, max(-4 * A + 4 * B + -3 * C + 3 * D, min(-3 * C + 3 * D + max(0, -1 * A + B + C + -1 * D) * 4 + -4 * C + 4 * D, -4 * A + 4 * B + max(-3 * C + 3 * D, min(-3 * A + 3 * B + max(0, A + -1 * B + -1 * C + D) * 3, -3 * C + 3 * D))), -3 * C + 3 * D + max(-4 * A + 4 * B, min(-4 * C + 4 * D + max(0, -1 * A + B + C + -1 * D) * 4, -4 * A + 4 * B))) + 7, 4, max(-4 * A + 4 * B + -3 * C + 3 * D, min(-4 * C + 4 * D + max(-3 * C + 3 * D + max(0, -1 * A + B + C + -1 * D) * 4, -3 * C + 3 * D + max(max(0, -1 * A + B + C + -1 * D) * 4, max(0, -1 * A + B + C + -1 * D) * 3), -3 * C + 3 * D + max(0, -1 * A + B + C + -1 * D) * 3), -4 * A + 4 * B + max(-3 * C + 3 * D, min(-3 * A + 3 * B + max(0, A + -1 * B + -1 * C + D) * 3, -3 * C + 3 * D))), -3 * C + 3 * D + max(-4 * A + 4 * B, min(-4 * C + 4 * D + max(max(0, -1 * A + B + C + -1 * D) * 4, max(0, -1 * A + B + C + -1 * D) * 3), -4 * A + 4 * B))) + 7, -3 * A + 3 * B + 4, -3 * C + 3 * D + max(-4 * A + 4 * B, min(-4 * C + 4 * D + max(0, -1 * A + B + C + -1 * D) * 4, -4 * A + 4 * B)) + 4)", 'degree': 1.0, 'variableCount': 4, 'time': 1333 },
  'c-examples/SPEED/POPL09/SimpleMultipleDep': { "stdout": True, 'originalBound': "max([nat(1*D* (1*C)+1*D)*3+3*C+4,4]) ", 'parsedBound': "max(max(0, D * C + D) * 3 + 3 * C + 4, 4)", 'degree': 2.0, 'variableCount': 2, 'time': 435 },
  'c-examples/SPEED/POPL09/SequentialSingle': { "stdout": True, 'originalBound': "max([3*B+6,2*B+6,5]) ", 'parsedBound': "max(3 * B + 6, 2 * B + 6, 5)", 'degree': 1.0, 'variableCount': 1, 'time': 398 },
  'c-examples/SPEED/POPL09/SimpleMultiple': { "stdout": True, 'originalBound': "max([3*C+3*D+4,4,3*C+4]) ", 'parsedBound': "max(3 * C + 3 * D + 4, 4, 3 * C + 4)", 'degree': 1.0, 'variableCount': 2, 'time': 521 },
  'c-examples/SPEED/CAV09/ex1': { "stdout": True, 'originalBound': "max([3*C+304,304]) ", 'parsedBound': "max(3 * C + 304, 304)", 'degree': 1.0, 'variableCount': 1, 'time': 432 },
  'c-examples/SPEED/CAV09/ex2': { "stdout": True, 'originalBound': "max([nat(1*D* (1*C)+1*D)*3+3*C+4,4]) ", 'parsedBound': "max(max(0, D * C + D) * 3 + 3 * C + 4, 4)", 'degree': 2.0, 'variableCount': 2, 'time': 433 },
  'c-examples/SPEED/CAV09/ex3': { "stdout": True, 'originalBound': "max([5*B+8,5,3*B+8]) ", 'parsedBound': "max(5 * B + 8, 5, 3 * B + 8)", 'degree': 1.0, 'variableCount': 1, 'time': 852 },
  'c-examples/SPEED/PLDI10/Ex1': { "stdout": True, 'originalBound': "max([ (2*A+2)* (1*A)+8,8]) ", 'parsedBound': "max((2 * A + 2) * A + 8, 8)", 'degree': 2.0, 'variableCount': 1, 'time': 805 },
  'c-examples/SPEED/PLDI10/Ex4': { "stdout": True, 'originalBound': "max([6*A+8,3*A+8,7]) ", 'parsedBound': "max(6 * A + 8, 3 * A + 8, 7)", 'degree': 1.0, 'variableCount': 1, 'time': 632 },
  'c-examples/SPEED/PLDI10/Ex6': { "stdout": True, 'originalBound': "max([-3*A+3*C+nat(-1*B+1*C)*3+4,4]) ", 'parsedBound': "max(-3 * A + 3 * C + max(0, -1 * B + C) * 3 + 4, 4)", 'degree': 1.0, 'variableCount': 2, 'time': 376 },
  'c-examples/SPEED/PLDI10/Ex3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 666 },
  'c-examples/SPEED/PLDI10/Ex5': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 821 },
  'c-examples/SPEED/PLDI10/Ex2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 816 },
  'c-examples/SPEED/PLDI10/Ex7': { "stdout": True, 'originalBound': "max([-2*A+2*B+2,2,2*B+6]) ", 'parsedBound': "max(-2 * A + 2 * B + 2, 2, 2 * B + 6)", 'degree': 1.0, 'variableCount': 2, 'time': 843 },
  'c-examples/Loopus/Example3': { "stdout": True, 'originalBound': "max([3*A+4,-3*A+769,4]) ", 'parsedBound': "max(3 * A + 4, -3 * A + 769, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 504 },
  'c-examples/Loopus/Example1': { "stdout": True, 'originalBound': "max([8*B+12,3*B+12,8]) ", 'parsedBound': "max(8 * B + 12, 3 * B + 12, 8)", 'degree': 1.0, 'variableCount': 1, 'time': 1541 },
  'c-examples/Loopus/Example2': { "stdout": True, 'originalBound': "max([6*A+ -2,-5*A+1262,9]) ", 'parsedBound': "max(6 * A + -2, -5 * A + 1262, 9)", 'degree': 1.0, 'variableCount': 1, 'time': 13409 },
  'KoAT-2014/nesting-ex1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 610 },
  'KoAT-2014/adding-exp-growth3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 399 },
  'KoAT-2014/adding-exp-growth1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 353 },
  'KoAT-2014/scaling-doubly-exp-growth': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 450 },
  'KoAT-2014/adding-exp-growth2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 388 },
  'KoAT-2014/exp-calls': { 'time': 22 },
  'KoAT-2014/scaling-exp-growth': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 333 },
  'FGPSF09/TACAS01/terminate': { "stdout": True, 'originalBound': "max([-1*A+1*B+ -1*C+102,1]) ", 'parsedBound': "max(-1 * A + B + -1 * C + 102, 1)", 'degree': 1.0, 'variableCount': 3, 'time': 332 },
  'FGPSF09/SAS05/c.02': { "stdout": True, 'originalBound': "max([ (1*A+3)* (1*A+1)+1,1*A+3,2,max([min([ (1*A+3)* (1*A)+1, (1*A+3)* (1*A+1)]),min([1*A+min([1*A+3, (1*A+3)* (1*A)]),1*A+1])])+2, (1*A+3)* (1*A)+2]) ", 'parsedBound': "max((A + 3) * (A + 1) + 1, A + 3, 2, max(min((A + 3) * A + 1, (A + 3) * (A + 1)), min(A + min(A + 3, (A + 3) * A), A + 1)) + 2, (A + 3) * A + 2)", 'degree': 2.0, 'variableCount': 1, 'time': 442 },
  'FGPSF09/PLDI06/c.03': { "stdout": True, 'originalBound': "max([1*A+ -1*B+nat(1*A+ -1*C)+1,1]) ", 'parsedBound': "max(A + -1 * B + max(0, A + -1 * C) + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 378 },
  'FGPSF09/PLDI06/c.04': { "stdout": True, 'originalBound': "max([1*A+ -1*B+2,2]) ", 'parsedBound': "max(A + -1 * B + 2, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 391 },
  'FGPSF09/VMCAI04/complete1': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 295 },
  'FGPSF09/VMCAI04/complete2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 287 },
  'FGPSF09/VMCAI04/complete4': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 303 },
  'FGPSF09/VMCAI04/complete3': { "stdout": True, 'originalBound': "max([ (1*A+2)* (1*A)+3,3]) ", 'parsedBound': "max((A + 2) * A + 3, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 388 },
  'FGPSF09/ESOP08/abstractions': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 314 },
  'FGPSF09/CAV02/practical1': { "stdout": True, 'originalBound': "max([ (1*A+2)* (1*A)+3,3]) ", 'parsedBound': "max((A + 2) * A + 3, 3)", 'degree': 2.0, 'variableCount': 1, 'time': 388 },
  'FGPSF09/CAV02/practical2': { "stdout": True, 'originalBound': "max([-1*B+104,6,-21*B+2324]) ", 'parsedBound': "max(-1 * B + 104, 6, -21 * B + 2324)", 'degree': 1.0, 'variableCount': 1, 'time': 1076 },
  'FGPSF09/VMCAI05/poly1': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 336 },
  'FGPSF09/VMCAI05/poly3': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 345 },
  'FGPSF09/VMCAI05/poly4': { "stdout": True, 'originalBound': "max([2*A+ -2*B+1*C+ -1*D+1,1*A+ -1*B+1*C+ -1*D+1,1*A+ -1*B+1,1,1*C+ -1*D+1,1*A+ -1*B+2*C+ -2*D+1]) ", 'parsedBound': "max(2 * A + -2 * B + C + -1 * D + 1, A + -1 * B + C + -1 * D + 1, A + -1 * B + 1, 1, C + -1 * D + 1, A + -1 * B + 2 * C + -2 * D + 1)", 'degree': 1.0, 'variableCount': 4, 'time': 1469 },
  'FGPSF09/VMCAI05/poly2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 338 },
  'FGPSF09/RTA08/round': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 271 },
  'FGPSF09/CAV05/c.05': { "stdout": True, 'originalBound': "max([1*A+1*B+1,1]) ", 'parsedBound': "max(A + B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 386 },
  'FGPSF09/LICS04/choice': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 315 },
  'FGPSF09/LICS04/c.01': { "stdout": True, 'originalBound': "max([ (1*A+1)* (1*A)+4+1, (1*A+1)* (1*A)+2,1*A+2,4,max([ (1*A+1)* (1*A),1*A])+2,2*A+3, (1*A+1)* (1*A)+2+2]) ", 'parsedBound': "max((A + 1) * A + 4 + 1, (A + 1) * A + 2, A + 2, 4, max((A + 1) * A, A) + 2, 2 * A + 3, (A + 1) * A + 2 + 2)", 'degree': 2.0, 'variableCount': 1, 'time': 542 },
  'FGPSF09/new/unsatCond2': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 275 },
  'FGPSF09/new/randomFullUpDown': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 328 },
  'FGPSF09/patrs/increase3': { "stdout": True, 'originalBound': "max([2*A+ -1*B+ -1*C+1,1]) ", 'parsedBound': "max(2 * A + -1 * B + -1 * C + 1, 1)", 'degree': 1.0, 'variableCount': 3, 'time': 462 },
  'FGPSF09/patrs/sqrt': { "stdout": True, 'originalBound': "max([1*D+2,2]) ", 'parsedBound': "max(D + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 372 },
  'FGPSF09/patrs/increase4': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 311 },
  'FGPSF09/patrs/increase2': { "stdout": True, 'originalBound': "max([1*A+ -1*B+ -1*C+1,1]) ", 'parsedBound': "max(A + -1 * B + -1 * C + 1, 1)", 'degree': 1.0, 'variableCount': 3, 'time': 366 },
  'FGPSF09/patrs/pasta/a.01': { "stdout": True, 'originalBound': "max([ (1*A+2)* (1*A)+2,1*A+2,2,max([ (1*A+2)* (1*A),1*A])+2, (1*A+2)* (1*A)+1]) ", 'parsedBound': "max((A + 2) * A + 2, A + 2, 2, max((A + 2) * A, A) + 2, (A + 2) * A + 1)", 'degree': 2.0, 'variableCount': 1, 'time': 424 },
  'FGPSF09/patrs/pasta/a.03': { "stdout": True, 'originalBound': "max([1*B+max([3*A+ -9,min([ (1/2*B+ -2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (1*A+ -3)* (min([4/3*B+ -20/3,1*B+ -4])+3)]),min([ (1/2*B+ -2)* (1*B+ -2), (1*B+ -2)* (1*A+ -3)])])+6,-2*A+1*B+5,max([3*B+ -6,min([ (2*A+ -5)* (2*A)+3, (2*A+ -2)* (2*A),2*A* (1*B), (1*B+ -3)* (2*A)+3]),min([ (2*A+ -5)* (1*B)+3, (1*B+ -3)* (1*B)+3, (2*A+ -2)* (1*B),1*B* (1*B), (1*B+ -4)* (1*B)+max([min([2*A+ -5+max([min([ (2*A+ -1*B+ -1)* (2*A),2*A*nat(-2*A+9),2*A,2*A*nat(-1*B+7)]),min([nat(-1*B+7)*3,3,nat(-2*A+9)*3]),min([ (2*A+ -1*B+ -1)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-2*A+9),1*B,1*B*nat(-1*B+7), (2*A+ -6)* (1*B)])]),4,1*B+ -3+max([min([ (2*A+ -1*B+ -1)* (2*A),2*A*nat(-1*B+7),2*A,2*A*nat(2*A+ -2*B+5)]),min([nat(2*A+ -2*B+5)*3,3,nat(-1*B+7)*3]),min([ (2*A+ -1*B+ -1)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-1*B+7),1*B,1*B*nat(2*A+ -2*B+5), (2*A+ -6)* (1*B)])])]),min([ (2*A+ -1*B+ -1)* (1*B)+3, (1*B+ -4)* (1*B)+max([min([1*B+ -3,nat(-1*B+8),nat(2*A+ -2*B+6)]),min([nat(2*A+ -2*B+6)*3,3,nat(-1*B+8)*3]),min([2*A*nat(2*A+ -2*B+6),3,2*A*nat(-1*B+8)])]), (2*A+ -1*B+2)* (1*B),1*B+3, (2*A+ -6)* (1*B)+max([min([1*B+ -3,nat(-2*A+10),nat(-1*B+8)]),min([nat(-1*B+8)*3,3,nat(-2*A+10)*3]),min([2*A*nat(-1*B+8),3,2*A*nat(-2*A+10)])])]),6,min([ (2*A+ -1*B+ -1)* (2*A)+3, (2*A+ -1*B+2)* (2*A),2*A+3])]), (2*A+ -6)* (1*B)+max([min([2*A+ -5+max([min([ (-2*A+1*B+3)* (2*A),2*A*nat(-2*A+9),2*A,2*A*nat(-4*A+1*B+11)]),min([nat(-4*A+1*B+11)*3,3,nat(-2*A+9)*3]),min([ (-2*A+1*B+3)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-2*A+9),1*B,1*B*nat(-4*A+1*B+11), (2*A+ -6)* (1*B)])]),4,1*B+ -3+max([min([ (-2*A+1*B+3)* (2*A),2*A*nat(-2*A+9),2*A,2*A*nat(-1*B+7)]),min([nat(-1*B+7)*3,3,nat(-2*A+9)*3]),min([ (-2*A+1*B+3)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-2*A+9),1*B,1*B*nat(-1*B+7), (2*A+ -6)* (1*B)])])]),min([ (-2*A+1*B+3)* (1*B)+3, (1*B+ -4)* (1*B)+max([min([1*B+ -3,nat(-2*A+10),nat(-1*B+8)]),min([nat(-1*B+8)*3,3,nat(-2*A+10)*3]),min([2*A*nat(-1*B+8),3,2*A*nat(-2*A+10)])]), (-2*A+1*B+6)* (1*B),1*B+3, (2*A+ -6)* (1*B)+max([min([1*B+ -3,nat(-2*A+10),nat(-4*A+1*B+12)]),min([nat(-4*A+1*B+12)*3,3,nat(-2*A+10)*3]),min([2*A*nat(-4*A+1*B+12),3,2*A*nat(-2*A+10)])])]),6,min([ (-2*A+1*B+3)* (2*A)+3, (-2*A+1*B+6)* (2*A),2*A+3])])]),min([2*A+ -5+max([min([ (2*A+ -6)* (1*B)+max([min([ (-2*A+1*B+3)* (2*A),2*A*nat(-2*A+9),2*A,2*A*nat(-4*A+1*B+11)]),min([nat(-4*A+1*B+11)*3,3,nat(-2*A+9)*3]),min([ (-2*A+1*B+3)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-2*A+9),1*B,1*B*nat(-4*A+1*B+11), (2*A+ -6)* (1*B)])]), (-2*A+1*B+5)* (1*B), (1*B+ -3)* (1*B),3*B, (2*A+ -5)* (1*B), (1*B+ -4)* (1*B)+max([min([ (2*A+ -1*B+ -1)* (2*A),2*A*nat(-2*A+9),2*A,2*A*nat(-1*B+7)]),min([nat(-1*B+7)*3,3,nat(-2*A+9)*3]),min([ (2*A+ -1*B+ -1)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-2*A+9),1*B,1*B*nat(-1*B+7), (2*A+ -6)* (1*B)])])]),9,min([ (-2*A+1*B+5)* (2*A), (1*B+ -3)* (2*A),6*A, (2*A+ -5)* (2*A)])]),1*B,1*B+ -3+max([min([ (2*A+ -6)* (1*B)+max([min([ (-2*A+1*B+3)* (2*A),2*A*nat(-2*A+9),2*A,2*A*nat(-1*B+7)]),min([nat(-1*B+7)*3,3,nat(-2*A+9)*3]),min([ (-2*A+1*B+3)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-2*A+9),1*B,1*B*nat(-1*B+7), (2*A+ -6)* (1*B)])]), (2*A+ -1*B+1)* (1*B), (1*B+ -3)* (1*B),3*B, (2*A+ -5)* (1*B), (1*B+ -4)* (1*B)+max([min([ (2*A+ -1*B+ -1)* (2*A),2*A*nat(-1*B+7),2*A,2*A*nat(2*A+ -2*B+5)]),min([nat(2*A+ -2*B+5)*3,3,nat(-1*B+7)*3]),min([ (2*A+ -1*B+ -1)* (1*B), (1*B+ -4)* (1*B),1*B*nat(-1*B+7),1*B,1*B*nat(2*A+ -2*B+5), (2*A+ -6)* (1*B)])])]),9,min([ (2*A+ -1*B+1)* (2*A), (1*B+ -3)* (2*A),6*A, (2*A+ -5)* (2*A)])])])])+max([3*A+ -9,min([ (1/2*B+ -2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (1*A+ -3)* (min([4/3*B+ -20/3,1*B+ -4])+3)]),min([ (1/2*B+ -2)* (1*B+ -2), (1*B+ -2)* (1*A+ -3)])])+5,max([3*A+ -9,min([ (1/2*B+ -2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (1*A+ -3)* (min([4/3*B+ -20/3,1*B+ -4])+3)]),min([ (1/2*B+ -2)* (1*B+ -2), (1*B+ -2)* (1*A+ -3)])])+max([min([6*A+ -18+min([1*B+ -3,4]),3*B,3*B+ -12+min([1*B+ -3,4])]),min([ (2*A+ -6)* (2*A)+min([1*B+ -3,4]), (2*A+ -2)* (2*A),2*A* (1*B), (1*B+ -4)* (2*A)+min([1*B+ -3,4])]),min([ (2*A+ -6)* (1*B)+min([1*B+ -3,4]), (2*A+ -2)* (1*B),1*B* (1*B), (1*B+ -4)* (1*B)+min([1*B+ -3,4])]),min([2*A+ -5+max([min([3*B+ -12,9]),min([ (-2*A+1*B+5)* (1*B), (1*B+ -4)* (1*B),3*B, (2*A+ -6)* (1*B)]),min([ (-2*A+1*B+5)* (2*A), (1*B+ -4)* (2*A),6*A, (2*A+ -6)* (2*A)])]),1*B,1*B+ -3+max([min([3*B+ -12,9]),min([ (2*A+ -1*B+1)* (1*B), (1*B+ -4)* (1*B),3*B, (2*A+ -6)* (1*B)]),min([ (2*A+ -1*B+1)* (2*A), (1*B+ -4)* (2*A),6*A, (2*A+ -6)* (2*A)])])])])+6,max([3*A,min([ (1/2*B+1/2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (min([4/3*B+ -20/3,1*B+ -4])+3)* (1*A)]),min([ (1/2*B+1/2)* (1*B+ -2), (1*B+ -2)* (1*A)])])+max([min([3*B+ -9+min([1*B+ -3,3]),3*B]),min([ (1*B+2)* (1*B+ -3)+min([1*B+ -3,3]), (1*B+2)* (1*B)]),min([ (1*B+ -3)* (1*B)+min([1*B+ -3,3]),1*B* (1*B), (1*B+ -4)* (1*B)+max([min([1*B+2+min([1*B+ -3,3]),4*B+8]),min([ (1*B+ -4)* (1*B)+max([min([1*B+ -3,nat(-1*B+8)]),min([nat(-1*B+8)*3,min([1*B+ -3,3])]),min([ (1*B+2)*nat(-1*B+8),min([1*B+ -3,3])])]),4*B,1*B+min([1*B+ -3,3])]),min([min([1*B+ -3,3])+3,12]),min([1*B+ -3+max([min([1*B+2, (1*B+2)*nat(-1*B+7)]),min([nat(-1*B+7)*3,3]),min([ (1*B+ -4)* (1*B),1*B,1*B*nat(-1*B+7)])]),4])])]),min([1*B+ -3+max([min([ (1*B+ -4)* (1*B)+max([min([1*B+2, (1*B+2)*nat(-1*B+7)]),min([nat(-1*B+7)*3,3]),min([ (1*B+ -4)* (1*B),1*B,1*B*nat(-1*B+7)])]),3*B, (1*B+ -3)* (1*B)]),min([3*B+ -9,9]),min([3*B+6, (1*B+2)* (1*B+ -3)])]),1*B])])+2,max([3*B+ -9,min([ (1*B+ -1)*nat(1*B+ -5)+max([min([ (1*B+1)* (1*B+ -4)+max([nat(-1*B+6)*3,min([ (1*B+ -1)*nat(1*B+ -5)+nat(-2*B+11)*3, (1*B+ -1)*nat(-1*B+6)])]),2*B+2]),6,min([ (1*B+ -1)*nat(1*B+ -5)+max([nat(-1*B+7)*3,min([ (1*B+1)* (1*B+ -4)+nat(-2*B+11)*3, (1*B+1)*nat(-1*B+7)])]),2*B+ -2])]), (1*B+ -1)* (1*B+ -3)]),min([ (1*B+1)* (1*B+ -4)+max([min([ (1*B+ -1)*nat(1*B+ -5)+max([nat(-1*B+6)*3,min([ (1*B+ -1)*nat(1*B+ -5)+nat(-2*B+11)*3, (1*B+ -1)*nat(-1*B+6)])]),1*B+ -1]),3]), (1*B+1)* (1*B+ -3)])])+4,max([3*B+ -13,min([ (1*B+1)* (1*B+ -5)+2, (1*B+1)* (1*B+ -3)]),min([ (1*B+ -1)* (1*B+ -5)+2, (1*B+ -1)* (1*B+ -3)]),min([1*B+ -4+max([min([1*B+1, (1*B+1)* (1*B+ -5)]),3,min([1*B+ -1, (1*B+ -1)* (1*B+ -5)])]),1*B+ -3])])+3,max([3*B,min([1*B*nat(1*B+ -4)+max([min([ (1*B+2)* (1*B+ -3)+max([nat(-1*B+7)*3,min([1*B*nat(1*B+ -4)+nat(-2*B+11)*3,1*B*nat(-1*B+7)])]),4*B+8]),12,min([1*B*nat(1*B+ -4)+max([nat(-1*B+8)*3,min([ (1*B+2)* (1*B+ -3)+nat(-2*B+11)*3, (1*B+2)*nat(-1*B+8)])]),4*B])]),1*B* (1*B)]),min([ (1*B+2)* (1*B+ -3)+max([min([1*B*nat(1*B+ -4)+max([nat(-1*B+7)*3,min([1*B*nat(1*B+ -4)+nat(-2*B+11)*3,1*B*nat(-1*B+7)])]),3*B]),9]), (1*B+2)* (1*B)])])+4,max([3*A,min([ (1/2*B+1/2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (min([4/3*B+ -20/3,1*B+ -4])+3)* (1*A)]),min([ (1/2*B+1/2)* (1*B+ -2), (1*B+ -2)* (1*A)])])+1,max([min([3*B+ -12+min([1*B+ -3,4]),3*B]),min([ (1*B+2)* (1*B+ -4)+min([1*B+ -3,4]), (1*B+2)* (1*B)]),min([ (1*B+ -4)* (1*B)+min([1*B+ -3,4]),1*B* (1*B)]),min([1*B+ -3+max([min([3*B+6, (1*B+2)* (1*B+ -4)]),min([ (1*B+ -4)* (1*B),3*B]),min([3*B+ -12,9])]),1*B])])+3,16,max([min([3*B+ -9+min([1*B+ -3,3]),3*B]),min([ (1*B+2)* (1*B+ -3)+min([1*B+ -3,3]), (1*B+2)* (1*B)]),min([ (1*B+ -3)* (1*B)+min([1*B+ -3,3]),1*B* (1*B), (1*B+ -4)* (1*B)+max([min([1*B+2+min([1*B+ -3,3]),4*B+8]),min([ (1*B+ -4)* (1*B)+max([min([1*B+ -3+max([min([ (1*B+2)*nat(-1*B+5), (1*B+2)*nat(-2*B+11)]),min([nat(-1*B+5)*3,nat(-2*B+11)*3])]),nat(-1*B+8)]),min([nat(-1*B+5)*3+min([1*B+ -3,3]),nat(-1*B+8)*3]),min([ (1*B+2)*nat(-1*B+5)+min([1*B+ -3,3]), (1*B+2)*nat(-1*B+8)])]),4*B,1*B+min([1*B+ -3,3])]),min([min([1*B+ -3,3])+3,12]),min([1*B+ -3+max([min([ (1*B+ -4)* (1*B)+max([min([ (1*B+2)*nat(-1*B+5), (1*B+2)*nat(-2*B+11)]),min([nat(-1*B+5)*3,nat(-2*B+11)*3])]),1*B,1*B*nat(-1*B+7)]),min([nat(-1*B+7)*3,3]),min([1*B+2, (1*B+2)*nat(-1*B+7)])]),4])])]),min([1*B+ -3+max([min([ (1*B+ -4)* (1*B)+max([min([ (1*B+ -4)* (1*B)+max([min([ (1*B+2)*nat(-1*B+5), (1*B+2)*nat(-2*B+11)]),min([nat(-1*B+5)*3,nat(-2*B+11)*3])]),1*B,1*B*nat(-1*B+7)]),min([nat(-1*B+7)*3,3]),min([1*B+2, (1*B+2)*nat(-1*B+7)])]),3*B, (1*B+ -3)* (1*B)]),min([3*B+ -9,9]),min([3*B+6, (1*B+2)* (1*B+ -3)])]),1*B])])+2,max([3*A,min([ (1/2*B+1/2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (min([4/3*B+ -20/3,1*B+ -4])+3)* (1*A)]),min([ (1/2*B+1/2)* (1*B+ -2), (1*B+ -2)* (1*A)])])+2,max([3*A+ -9,min([ (1/2*B+ -2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (1*A+ -3)* (min([4/3*B+ -20/3,1*B+ -4])+3)]),min([ (1/2*B+ -2)* (1*B+ -2), (1*B+ -2)* (1*A+ -3)])])+5,max([3*B+ -11,min([ (1*B+1)* (1*B+ -4)+1, (1*B+1)* (1*B+ -3)]),min([ (1*B+ -1)* (1*B+ -4)+1, (1*B+ -1)* (1*B+ -3), (1*B+ -1)* (1*B+ -5)+max([1*B+2,min([ (1*B+ -1)* (1*B+ -5)+max([min([1*B+ -4+max([min([ (1*B+1)*nat(-1*B+6), (1*B+1)*nat(-2*B+11)]),min([nat(-1*B+6)*3,nat(-2*B+11)*3])]),nat(-1*B+7)]),min([nat(-1*B+6)*3+1,nat(-1*B+7)*3]),min([ (1*B+1)*nat(-1*B+6)+1, (1*B+1)*nat(-1*B+7)])]),1*B]),min([1*B+ -4+max([min([ (1*B+ -1)* (1*B+ -5)+max([min([ (1*B+1)*nat(-1*B+6), (1*B+1)*nat(-2*B+11)]),min([nat(-1*B+6)*3,nat(-2*B+11)*3])]), (1*B+ -1)*nat(-1*B+6),1*B+ -1]),min([nat(-1*B+6)*3,3]),min([1*B+1, (1*B+1)*nat(-1*B+6)])]),2])])]),min([1*B+ -4+max([min([ (1*B+ -1)* (1*B+ -5)+max([min([ (1*B+ -1)* (1*B+ -5)+max([min([ (1*B+1)*nat(-1*B+6), (1*B+1)*nat(-2*B+11)]),min([nat(-1*B+6)*3,nat(-2*B+11)*3])]), (1*B+ -1)*nat(-1*B+6),1*B+ -1]),min([nat(-1*B+6)*3,3]),min([1*B+1, (1*B+1)*nat(-1*B+6)])]), (1*B+ -1)* (1*B+ -4),1*B+ -1]),3,min([1*B+1, (1*B+1)* (1*B+ -4)])]),1*B+ -3])])+2,max([3*A,min([ (1/2*B+1/2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (min([4/3*B+ -20/3,1*B+ -4])+3)* (1*A)]),min([ (1/2*B+1/2)* (1*B+ -2), (1*B+ -2)* (1*A)])])+max([min([3*B+ -12+min([1*B+ -3,4]),3*B]),min([ (1*B+2)* (1*B+ -4)+min([1*B+ -3,4]), (1*B+2)* (1*B)]),min([ (1*B+ -4)* (1*B)+min([1*B+ -3,4]),1*B* (1*B)]),min([1*B+ -3+max([min([3*B+6, (1*B+2)* (1*B+ -4)]),min([ (1*B+ -4)* (1*B),3*B]),min([3*B+ -12,9])]),1*B])])+3,max([3*B,min([ (1*B+ -4)* (1*B)+max([min([ (1*B+2)* (1*B+ -3)+max([nat(-1*B+7)*3,min([ (1*B+ -4)* (1*B)+nat(-2*B+11)*3,1*B*nat(-1*B+7)])]),4*B+8]),12,min([ (1*B+ -4)* (1*B)+max([nat(-1*B+8)*3,min([ (1*B+2)* (1*B+ -3)+nat(-2*B+11)*3, (1*B+2)*nat(-1*B+8)])]),4*B])]),1*B* (1*B)]),min([ (1*B+2)* (1*B+ -3)+max([min([ (1*B+ -4)* (1*B)+max([nat(-1*B+7)*3,min([ (1*B+ -4)* (1*B)+nat(-2*B+11)*3,1*B*nat(-1*B+7)])]),3*B]),9]), (1*B+2)* (1*B)])])+max([3*A,min([ (1/2*B+1/2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (min([4/3*B+ -20/3,1*B+ -4])+3)* (1*A)]),min([ (1/2*B+1/2)* (1*B+ -2), (1*B+ -2)* (1*A)])])+4,max([3*A+ -9,min([ (1/2*B+ -2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (1*A+ -3)* (min([4/3*B+ -20/3,1*B+ -4])+3)]),min([ (1/2*B+ -2)* (1*B+ -2), (1*B+ -2)* (1*A+ -3)])])+max([3*B,min([ (2*A+ -6)* (1*B)+max([min([ (2*A+ -5)* (2*A)+max([min([ (2*A+ -6)* (1*B),1*B*nat(-4*A+1*B+11),1*B*nat(-2*A+9), (1*B+ -4)* (1*B)]),min([nat(-4*A+1*B+11)*3,nat(-2*A+9)*3])]), (-2*A+1*B+6)* (2*A),8*A, (1*B+ -3)* (2*A)+max([min([ (2*A+ -6)* (1*B),1*B*nat(-1*B+7),1*B*nat(-2*A+9), (1*B+ -4)* (1*B)]),min([nat(-1*B+7)*3,nat(-2*A+9)*3])])]),12,min([ (2*A+ -6)* (1*B)+max([min([ (2*A+ -5)* (2*A),2*A*nat(-4*A+1*B+12),2*A*nat(-2*A+10), (1*B+ -3)* (2*A)]),min([nat(-4*A+1*B+12)*3,nat(-2*A+10)*3])]), (-2*A+1*B+6)* (1*B),4*B, (1*B+ -4)* (1*B)+max([min([ (2*A+ -5)* (2*A),2*A*nat(-1*B+8),2*A*nat(-2*A+10), (1*B+ -3)* (2*A)]),min([nat(-1*B+8)*3,nat(-2*A+10)*3])])])]), (2*A+ -2)* (1*B),1*B* (1*B), (1*B+ -4)* (1*B)+max([min([ (2*A+ -5)* (2*A)+max([min([ (2*A+ -6)* (1*B),1*B*nat(-1*B+7),1*B*nat(-2*A+9), (1*B+ -4)* (1*B)]),min([nat(-1*B+7)*3,nat(-2*A+9)*3])]), (2*A+ -1*B+2)* (2*A),8*A, (1*B+ -3)* (2*A)+max([min([ (2*A+ -6)* (1*B),1*B*nat(2*A+ -2*B+5),1*B*nat(-1*B+7), (1*B+ -4)* (1*B)]),min([nat(2*A+ -2*B+5)*3,nat(-1*B+7)*3])])]),12,min([ (2*A+ -6)* (1*B)+max([min([ (2*A+ -5)* (2*A),2*A*nat(-1*B+8),2*A*nat(-2*A+10), (1*B+ -3)* (2*A)]),min([nat(-1*B+8)*3,nat(-2*A+10)*3])]), (2*A+ -1*B+2)* (1*B),4*B, (1*B+ -4)* (1*B)+max([min([ (2*A+ -5)* (2*A),2*A*nat(2*A+ -2*B+6),2*A*nat(-1*B+8), (1*B+ -3)* (2*A)]),min([nat(2*A+ -2*B+6)*3,nat(-1*B+8)*3])])])])]),min([ (2*A+ -5)* (2*A)+max([min([ (2*A+ -6)* (1*B)+max([min([ (2*A+ -6)* (1*B),1*B*nat(-4*A+1*B+11),1*B*nat(-2*A+9), (1*B+ -4)* (1*B)]),min([nat(-4*A+1*B+11)*3,nat(-2*A+9)*3])]), (-2*A+1*B+5)* (1*B),3*B, (1*B+ -4)* (1*B)+max([min([ (2*A+ -6)* (1*B),1*B*nat(-1*B+7),1*B*nat(-2*A+9), (1*B+ -4)* (1*B)]),min([nat(-1*B+7)*3,nat(-2*A+9)*3])])]),9]), (2*A+ -2)* (2*A),2*A* (1*B), (1*B+ -3)* (2*A)+max([min([ (2*A+ -6)* (1*B)+max([min([ (2*A+ -6)* (1*B),1*B*nat(-1*B+7),1*B*nat(-2*A+9), (1*B+ -4)* (1*B)]),min([nat(-1*B+7)*3,nat(-2*A+9)*3])]), (2*A+ -1*B+1)* (1*B),3*B, (1*B+ -4)* (1*B)+max([min([ (2*A+ -6)* (1*B),1*B*nat(2*A+ -2*B+5),1*B*nat(-1*B+7), (1*B+ -4)* (1*B)]),min([nat(2*A+ -2*B+5)*3,nat(-1*B+7)*3])])]),9])])])+7,1*B+max([3*A,min([ (1/2*B+1/2)* (min([4/3*B+ -20/3,1*B+ -4])+3), (min([4/3*B+ -20/3,1*B+ -4])+3)* (1*A)]),min([ (1/2*B+1/2)* (1*B+ -2), (1*B+ -2)* (1*A)])])+3]) ", 'parsedBound': "max(B + max(3 * A + -9, min((1 / 2 * B + -2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (A + -3) * (min(4 / 3 * B + -20 / 3, B + -4) + 3)), min((1 / 2 * B + -2) * (B + -2), (B + -2) * (A + -3))) + 6, -2 * A + B + 5, max(3 * B + -6, min((2 * A + -5) * 2 * A + 3, (2 * A + -2) * 2 * A, 2 * A * B, (B + -3) * 2 * A + 3), min((2 * A + -5) * B + 3, (B + -3) * B + 3, (2 * A + -2) * B, B * B, (B + -4) * B + max(min(2 * A + -5 + max(min((2 * A + -1 * B + -1) * 2 * A, 2 * A * max(0, -2 * A + 9), 2 * A, 2 * A * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3, max(0, -2 * A + 9) * 3), min((2 * A + -1 * B + -1) * B, (B + -4) * B, B * max(0, -2 * A + 9), B, B * max(0, -1 * B + 7), (2 * A + -6) * B)), 4, B + -3 + max(min((2 * A + -1 * B + -1) * 2 * A, 2 * A * max(0, -1 * B + 7), 2 * A, 2 * A * max(0, 2 * A + -2 * B + 5)), min(max(0, 2 * A + -2 * B + 5) * 3, 3, max(0, -1 * B + 7) * 3), min((2 * A + -1 * B + -1) * B, (B + -4) * B, B * max(0, -1 * B + 7), B, B * max(0, 2 * A + -2 * B + 5), (2 * A + -6) * B))), min((2 * A + -1 * B + -1) * B + 3, (B + -4) * B + max(min(B + -3, max(0, -1 * B + 8), max(0, 2 * A + -2 * B + 6)), min(max(0, 2 * A + -2 * B + 6) * 3, 3, max(0, -1 * B + 8) * 3), min(2 * A * max(0, 2 * A + -2 * B + 6), 3, 2 * A * max(0, -1 * B + 8))), (2 * A + -1 * B + 2) * B, B + 3, (2 * A + -6) * B + max(min(B + -3, max(0, -2 * A + 10), max(0, -1 * B + 8)), min(max(0, -1 * B + 8) * 3, 3, max(0, -2 * A + 10) * 3), min(2 * A * max(0, -1 * B + 8), 3, 2 * A * max(0, -2 * A + 10)))), 6, min((2 * A + -1 * B + -1) * 2 * A + 3, (2 * A + -1 * B + 2) * 2 * A, 2 * A + 3)), (2 * A + -6) * B + max(min(2 * A + -5 + max(min((-2 * A + B + 3) * 2 * A, 2 * A * max(0, -2 * A + 9), 2 * A, 2 * A * max(0, -4 * A + B + 11)), min(max(0, -4 * A + B + 11) * 3, 3, max(0, -2 * A + 9) * 3), min((-2 * A + B + 3) * B, (B + -4) * B, B * max(0, -2 * A + 9), B, B * max(0, -4 * A + B + 11), (2 * A + -6) * B)), 4, B + -3 + max(min((-2 * A + B + 3) * 2 * A, 2 * A * max(0, -2 * A + 9), 2 * A, 2 * A * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3, max(0, -2 * A + 9) * 3), min((-2 * A + B + 3) * B, (B + -4) * B, B * max(0, -2 * A + 9), B, B * max(0, -1 * B + 7), (2 * A + -6) * B))), min((-2 * A + B + 3) * B + 3, (B + -4) * B + max(min(B + -3, max(0, -2 * A + 10), max(0, -1 * B + 8)), min(max(0, -1 * B + 8) * 3, 3, max(0, -2 * A + 10) * 3), min(2 * A * max(0, -1 * B + 8), 3, 2 * A * max(0, -2 * A + 10))), (-2 * A + B + 6) * B, B + 3, (2 * A + -6) * B + max(min(B + -3, max(0, -2 * A + 10), max(0, -4 * A + B + 12)), min(max(0, -4 * A + B + 12) * 3, 3, max(0, -2 * A + 10) * 3), min(2 * A * max(0, -4 * A + B + 12), 3, 2 * A * max(0, -2 * A + 10)))), 6, min((-2 * A + B + 3) * 2 * A + 3, (-2 * A + B + 6) * 2 * A, 2 * A + 3))), min(2 * A + -5 + max(min((2 * A + -6) * B + max(min((-2 * A + B + 3) * 2 * A, 2 * A * max(0, -2 * A + 9), 2 * A, 2 * A * max(0, -4 * A + B + 11)), min(max(0, -4 * A + B + 11) * 3, 3, max(0, -2 * A + 9) * 3), min((-2 * A + B + 3) * B, (B + -4) * B, B * max(0, -2 * A + 9), B, B * max(0, -4 * A + B + 11), (2 * A + -6) * B)), (-2 * A + B + 5) * B, (B + -3) * B, 3 * B, (2 * A + -5) * B, (B + -4) * B + max(min((2 * A + -1 * B + -1) * 2 * A, 2 * A * max(0, -2 * A + 9), 2 * A, 2 * A * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3, max(0, -2 * A + 9) * 3), min((2 * A + -1 * B + -1) * B, (B + -4) * B, B * max(0, -2 * A + 9), B, B * max(0, -1 * B + 7), (2 * A + -6) * B))), 9, min((-2 * A + B + 5) * 2 * A, (B + -3) * 2 * A, 6 * A, (2 * A + -5) * 2 * A)), B, B + -3 + max(min((2 * A + -6) * B + max(min((-2 * A + B + 3) * 2 * A, 2 * A * max(0, -2 * A + 9), 2 * A, 2 * A * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3, max(0, -2 * A + 9) * 3), min((-2 * A + B + 3) * B, (B + -4) * B, B * max(0, -2 * A + 9), B, B * max(0, -1 * B + 7), (2 * A + -6) * B)), (2 * A + -1 * B + 1) * B, (B + -3) * B, 3 * B, (2 * A + -5) * B, (B + -4) * B + max(min((2 * A + -1 * B + -1) * 2 * A, 2 * A * max(0, -1 * B + 7), 2 * A, 2 * A * max(0, 2 * A + -2 * B + 5)), min(max(0, 2 * A + -2 * B + 5) * 3, 3, max(0, -1 * B + 7) * 3), min((2 * A + -1 * B + -1) * B, (B + -4) * B, B * max(0, -1 * B + 7), B, B * max(0, 2 * A + -2 * B + 5), (2 * A + -6) * B))), 9, min((2 * A + -1 * B + 1) * 2 * A, (B + -3) * 2 * A, 6 * A, (2 * A + -5) * 2 * A)))) + max(3 * A + -9, min((1 / 2 * B + -2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (A + -3) * (min(4 / 3 * B + -20 / 3, B + -4) + 3)), min((1 / 2 * B + -2) * (B + -2), (B + -2) * (A + -3))) + 5, max(3 * A + -9, min((1 / 2 * B + -2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (A + -3) * (min(4 / 3 * B + -20 / 3, B + -4) + 3)), min((1 / 2 * B + -2) * (B + -2), (B + -2) * (A + -3))) + max(min(6 * A + -18 + min(B + -3, 4), 3 * B, 3 * B + -12 + min(B + -3, 4)), min((2 * A + -6) * 2 * A + min(B + -3, 4), (2 * A + -2) * 2 * A, 2 * A * B, (B + -4) * 2 * A + min(B + -3, 4)), min((2 * A + -6) * B + min(B + -3, 4), (2 * A + -2) * B, B * B, (B + -4) * B + min(B + -3, 4)), min(2 * A + -5 + max(min(3 * B + -12, 9), min((-2 * A + B + 5) * B, (B + -4) * B, 3 * B, (2 * A + -6) * B), min((-2 * A + B + 5) * 2 * A, (B + -4) * 2 * A, 6 * A, (2 * A + -6) * 2 * A)), B, B + -3 + max(min(3 * B + -12, 9), min((2 * A + -1 * B + 1) * B, (B + -4) * B, 3 * B, (2 * A + -6) * B), min((2 * A + -1 * B + 1) * 2 * A, (B + -4) * 2 * A, 6 * A, (2 * A + -6) * 2 * A)))) + 6, max(3 * A, min((1 / 2 * B + 1 / 2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (min(4 / 3 * B + -20 / 3, B + -4) + 3) * A), min((1 / 2 * B + 1 / 2) * (B + -2), (B + -2) * A)) + max(min(3 * B + -9 + min(B + -3, 3), 3 * B), min((B + 2) * (B + -3) + min(B + -3, 3), (B + 2) * B), min((B + -3) * B + min(B + -3, 3), B * B, (B + -4) * B + max(min(B + 2 + min(B + -3, 3), 4 * B + 8), min((B + -4) * B + max(min(B + -3, max(0, -1 * B + 8)), min(max(0, -1 * B + 8) * 3, min(B + -3, 3)), min((B + 2) * max(0, -1 * B + 8), min(B + -3, 3))), 4 * B, B + min(B + -3, 3)), min(min(B + -3, 3) + 3, 12), min(B + -3 + max(min(B + 2, (B + 2) * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3), min((B + -4) * B, B, B * max(0, -1 * B + 7))), 4))), min(B + -3 + max(min((B + -4) * B + max(min(B + 2, (B + 2) * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3), min((B + -4) * B, B, B * max(0, -1 * B + 7))), 3 * B, (B + -3) * B), min(3 * B + -9, 9), min(3 * B + 6, (B + 2) * (B + -3))), B)) + 2, max(3 * B + -9, min((B + -1) * max(0, B + -5) + max(min((B + 1) * (B + -4) + max(max(0, -1 * B + 6) * 3, min((B + -1) * max(0, B + -5) + max(0, -2 * B + 11) * 3, (B + -1) * max(0, -1 * B + 6))), 2 * B + 2), 6, min((B + -1) * max(0, B + -5) + max(max(0, -1 * B + 7) * 3, min((B + 1) * (B + -4) + max(0, -2 * B + 11) * 3, (B + 1) * max(0, -1 * B + 7))), 2 * B + -2)), (B + -1) * (B + -3)), min((B + 1) * (B + -4) + max(min((B + -1) * max(0, B + -5) + max(max(0, -1 * B + 6) * 3, min((B + -1) * max(0, B + -5) + max(0, -2 * B + 11) * 3, (B + -1) * max(0, -1 * B + 6))), B + -1), 3), (B + 1) * (B + -3))) + 4, max(3 * B + -13, min((B + 1) * (B + -5) + 2, (B + 1) * (B + -3)), min((B + -1) * (B + -5) + 2, (B + -1) * (B + -3)), min(B + -4 + max(min(B + 1, (B + 1) * (B + -5)), 3, min(B + -1, (B + -1) * (B + -5))), B + -3)) + 3, max(3 * B, min(B * max(0, B + -4) + max(min((B + 2) * (B + -3) + max(max(0, -1 * B + 7) * 3, min(B * max(0, B + -4) + max(0, -2 * B + 11) * 3, B * max(0, -1 * B + 7))), 4 * B + 8), 12, min(B * max(0, B + -4) + max(max(0, -1 * B + 8) * 3, min((B + 2) * (B + -3) + max(0, -2 * B + 11) * 3, (B + 2) * max(0, -1 * B + 8))), 4 * B)), B * B), min((B + 2) * (B + -3) + max(min(B * max(0, B + -4) + max(max(0, -1 * B + 7) * 3, min(B * max(0, B + -4) + max(0, -2 * B + 11) * 3, B * max(0, -1 * B + 7))), 3 * B), 9), (B + 2) * B)) + 4, max(3 * A, min((1 / 2 * B + 1 / 2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (min(4 / 3 * B + -20 / 3, B + -4) + 3) * A), min((1 / 2 * B + 1 / 2) * (B + -2), (B + -2) * A)) + 1, max(min(3 * B + -12 + min(B + -3, 4), 3 * B), min((B + 2) * (B + -4) + min(B + -3, 4), (B + 2) * B), min((B + -4) * B + min(B + -3, 4), B * B), min(B + -3 + max(min(3 * B + 6, (B + 2) * (B + -4)), min((B + -4) * B, 3 * B), min(3 * B + -12, 9)), B)) + 3, 16, max(min(3 * B + -9 + min(B + -3, 3), 3 * B), min((B + 2) * (B + -3) + min(B + -3, 3), (B + 2) * B), min((B + -3) * B + min(B + -3, 3), B * B, (B + -4) * B + max(min(B + 2 + min(B + -3, 3), 4 * B + 8), min((B + -4) * B + max(min(B + -3 + max(min((B + 2) * max(0, -1 * B + 5), (B + 2) * max(0, -2 * B + 11)), min(max(0, -1 * B + 5) * 3, max(0, -2 * B + 11) * 3)), max(0, -1 * B + 8)), min(max(0, -1 * B + 5) * 3 + min(B + -3, 3), max(0, -1 * B + 8) * 3), min((B + 2) * max(0, -1 * B + 5) + min(B + -3, 3), (B + 2) * max(0, -1 * B + 8))), 4 * B, B + min(B + -3, 3)), min(min(B + -3, 3) + 3, 12), min(B + -3 + max(min((B + -4) * B + max(min((B + 2) * max(0, -1 * B + 5), (B + 2) * max(0, -2 * B + 11)), min(max(0, -1 * B + 5) * 3, max(0, -2 * B + 11) * 3)), B, B * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3), min(B + 2, (B + 2) * max(0, -1 * B + 7))), 4))), min(B + -3 + max(min((B + -4) * B + max(min((B + -4) * B + max(min((B + 2) * max(0, -1 * B + 5), (B + 2) * max(0, -2 * B + 11)), min(max(0, -1 * B + 5) * 3, max(0, -2 * B + 11) * 3)), B, B * max(0, -1 * B + 7)), min(max(0, -1 * B + 7) * 3, 3), min(B + 2, (B + 2) * max(0, -1 * B + 7))), 3 * B, (B + -3) * B), min(3 * B + -9, 9), min(3 * B + 6, (B + 2) * (B + -3))), B)) + 2, max(3 * A, min((1 / 2 * B + 1 / 2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (min(4 / 3 * B + -20 / 3, B + -4) + 3) * A), min((1 / 2 * B + 1 / 2) * (B + -2), (B + -2) * A)) + 2, max(3 * A + -9, min((1 / 2 * B + -2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (A + -3) * (min(4 / 3 * B + -20 / 3, B + -4) + 3)), min((1 / 2 * B + -2) * (B + -2), (B + -2) * (A + -3))) + 5, max(3 * B + -11, min((B + 1) * (B + -4) + 1, (B + 1) * (B + -3)), min((B + -1) * (B + -4) + 1, (B + -1) * (B + -3), (B + -1) * (B + -5) + max(B + 2, min((B + -1) * (B + -5) + max(min(B + -4 + max(min((B + 1) * max(0, -1 * B + 6), (B + 1) * max(0, -2 * B + 11)), min(max(0, -1 * B + 6) * 3, max(0, -2 * B + 11) * 3)), max(0, -1 * B + 7)), min(max(0, -1 * B + 6) * 3 + 1, max(0, -1 * B + 7) * 3), min((B + 1) * max(0, -1 * B + 6) + 1, (B + 1) * max(0, -1 * B + 7))), B), min(B + -4 + max(min((B + -1) * (B + -5) + max(min((B + 1) * max(0, -1 * B + 6), (B + 1) * max(0, -2 * B + 11)), min(max(0, -1 * B + 6) * 3, max(0, -2 * B + 11) * 3)), (B + -1) * max(0, -1 * B + 6), B + -1), min(max(0, -1 * B + 6) * 3, 3), min(B + 1, (B + 1) * max(0, -1 * B + 6))), 2))), min(B + -4 + max(min((B + -1) * (B + -5) + max(min((B + -1) * (B + -5) + max(min((B + 1) * max(0, -1 * B + 6), (B + 1) * max(0, -2 * B + 11)), min(max(0, -1 * B + 6) * 3, max(0, -2 * B + 11) * 3)), (B + -1) * max(0, -1 * B + 6), B + -1), min(max(0, -1 * B + 6) * 3, 3), min(B + 1, (B + 1) * max(0, -1 * B + 6))), (B + -1) * (B + -4), B + -1), 3, min(B + 1, (B + 1) * (B + -4))), B + -3)) + 2, max(3 * A, min((1 / 2 * B + 1 / 2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (min(4 / 3 * B + -20 / 3, B + -4) + 3) * A), min((1 / 2 * B + 1 / 2) * (B + -2), (B + -2) * A)) + max(min(3 * B + -12 + min(B + -3, 4), 3 * B), min((B + 2) * (B + -4) + min(B + -3, 4), (B + 2) * B), min((B + -4) * B + min(B + -3, 4), B * B), min(B + -3 + max(min(3 * B + 6, (B + 2) * (B + -4)), min((B + -4) * B, 3 * B), min(3 * B + -12, 9)), B)) + 3, max(3 * B, min((B + -4) * B + max(min((B + 2) * (B + -3) + max(max(0, -1 * B + 7) * 3, min((B + -4) * B + max(0, -2 * B + 11) * 3, B * max(0, -1 * B + 7))), 4 * B + 8), 12, min((B + -4) * B + max(max(0, -1 * B + 8) * 3, min((B + 2) * (B + -3) + max(0, -2 * B + 11) * 3, (B + 2) * max(0, -1 * B + 8))), 4 * B)), B * B), min((B + 2) * (B + -3) + max(min((B + -4) * B + max(max(0, -1 * B + 7) * 3, min((B + -4) * B + max(0, -2 * B + 11) * 3, B * max(0, -1 * B + 7))), 3 * B), 9), (B + 2) * B)) + max(3 * A, min((1 / 2 * B + 1 / 2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (min(4 / 3 * B + -20 / 3, B + -4) + 3) * A), min((1 / 2 * B + 1 / 2) * (B + -2), (B + -2) * A)) + 4, max(3 * A + -9, min((1 / 2 * B + -2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (A + -3) * (min(4 / 3 * B + -20 / 3, B + -4) + 3)), min((1 / 2 * B + -2) * (B + -2), (B + -2) * (A + -3))) + max(3 * B, min((2 * A + -6) * B + max(min((2 * A + -5) * 2 * A + max(min((2 * A + -6) * B, B * max(0, -4 * A + B + 11), B * max(0, -2 * A + 9), (B + -4) * B), min(max(0, -4 * A + B + 11) * 3, max(0, -2 * A + 9) * 3)), (-2 * A + B + 6) * 2 * A, 8 * A, (B + -3) * 2 * A + max(min((2 * A + -6) * B, B * max(0, -1 * B + 7), B * max(0, -2 * A + 9), (B + -4) * B), min(max(0, -1 * B + 7) * 3, max(0, -2 * A + 9) * 3))), 12, min((2 * A + -6) * B + max(min((2 * A + -5) * 2 * A, 2 * A * max(0, -4 * A + B + 12), 2 * A * max(0, -2 * A + 10), (B + -3) * 2 * A), min(max(0, -4 * A + B + 12) * 3, max(0, -2 * A + 10) * 3)), (-2 * A + B + 6) * B, 4 * B, (B + -4) * B + max(min((2 * A + -5) * 2 * A, 2 * A * max(0, -1 * B + 8), 2 * A * max(0, -2 * A + 10), (B + -3) * 2 * A), min(max(0, -1 * B + 8) * 3, max(0, -2 * A + 10) * 3)))), (2 * A + -2) * B, B * B, (B + -4) * B + max(min((2 * A + -5) * 2 * A + max(min((2 * A + -6) * B, B * max(0, -1 * B + 7), B * max(0, -2 * A + 9), (B + -4) * B), min(max(0, -1 * B + 7) * 3, max(0, -2 * A + 9) * 3)), (2 * A + -1 * B + 2) * 2 * A, 8 * A, (B + -3) * 2 * A + max(min((2 * A + -6) * B, B * max(0, 2 * A + -2 * B + 5), B * max(0, -1 * B + 7), (B + -4) * B), min(max(0, 2 * A + -2 * B + 5) * 3, max(0, -1 * B + 7) * 3))), 12, min((2 * A + -6) * B + max(min((2 * A + -5) * 2 * A, 2 * A * max(0, -1 * B + 8), 2 * A * max(0, -2 * A + 10), (B + -3) * 2 * A), min(max(0, -1 * B + 8) * 3, max(0, -2 * A + 10) * 3)), (2 * A + -1 * B + 2) * B, 4 * B, (B + -4) * B + max(min((2 * A + -5) * 2 * A, 2 * A * max(0, 2 * A + -2 * B + 6), 2 * A * max(0, -1 * B + 8), (B + -3) * 2 * A), min(max(0, 2 * A + -2 * B + 6) * 3, max(0, -1 * B + 8) * 3))))), min((2 * A + -5) * 2 * A + max(min((2 * A + -6) * B + max(min((2 * A + -6) * B, B * max(0, -4 * A + B + 11), B * max(0, -2 * A + 9), (B + -4) * B), min(max(0, -4 * A + B + 11) * 3, max(0, -2 * A + 9) * 3)), (-2 * A + B + 5) * B, 3 * B, (B + -4) * B + max(min((2 * A + -6) * B, B * max(0, -1 * B + 7), B * max(0, -2 * A + 9), (B + -4) * B), min(max(0, -1 * B + 7) * 3, max(0, -2 * A + 9) * 3))), 9), (2 * A + -2) * 2 * A, 2 * A * B, (B + -3) * 2 * A + max(min((2 * A + -6) * B + max(min((2 * A + -6) * B, B * max(0, -1 * B + 7), B * max(0, -2 * A + 9), (B + -4) * B), min(max(0, -1 * B + 7) * 3, max(0, -2 * A + 9) * 3)), (2 * A + -1 * B + 1) * B, 3 * B, (B + -4) * B + max(min((2 * A + -6) * B, B * max(0, 2 * A + -2 * B + 5), B * max(0, -1 * B + 7), (B + -4) * B), min(max(0, 2 * A + -2 * B + 5) * 3, max(0, -1 * B + 7) * 3))), 9))) + 7, B + max(3 * A, min((1 / 2 * B + 1 / 2) * (min(4 / 3 * B + -20 / 3, B + -4) + 3), (min(4 / 3 * B + -20 / 3, B + -4) + 3) * A), min((1 / 2 * B + 1 / 2) * (B + -2), (B + -2) * A)) + 3)", 'degree': 2.0, 'variableCount': 2, 'time': 27050 },
  'FGPSF09/patrs/pasta/a.06': { "stdout": True, 'originalBound': "max([1*A+ -1*B+ -1*C+1,1]) ", 'parsedBound': "max(A + -1 * B + -1 * C + 1, 1)", 'degree': 1.0, 'variableCount': 3, 'time': 324 },
  'FGPSF09/patrs/pasta/a.04': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 307 },
  'FGPSF09/patrs/pasta/a.05': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 303 },
  'FGPSF09/patrs/pasta/a.11': { "stdout": True, 'originalBound': "max([6*A+ -4*B+ -2*C+1,2*A+ -2*B+1,1,4*A+ -2*B+ -2*C+1]) ", 'parsedBound': "max(6 * A + -4 * B + -2 * C + 1, 2 * A + -2 * B + 1, 1, 4 * A + -2 * B + -2 * C + 1)", 'degree': 1.0, 'variableCount': 3, 'time': 748 },
  'FGPSF09/patrs/pasta/a.09': { "stdout": True, 'originalBound': "max([1*A+ -1*B+2,1]) ", 'parsedBound': "max(A + -1 * B + 2, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 315 },
  'FGPSF09/patrs/pasta/a.08': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 310 },
  'FGPSF09/patrs/pasta/a.02': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 509 },
  'FGPSF09/patrs/pasta/a.07': { "stdout": True, 'originalBound': "max([min([1*A+ -1*C,1*A+ -1*B])+1,1]) ", 'parsedBound': "max(min(A + -1 * C, A + -1 * B) + 1, 1)", 'degree': 1.0, 'variableCount': 3, 'time': 367 },
  'FGPSF09/patrs/pasta/a.10': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1,-1*A+1*B+1]) ", 'parsedBound': "max(A + -1 * B + 1, 1, -1 * A + B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 347 },
  'FGPSF09/patrs/random_no_wrap': { "stdout": True, 'originalBound': "max([2*A+2,2]) ", 'parsedBound': "max(2 * A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 304 },
  'FGPSF09/patrs/random_full_no_wrap': { "stdout": True, 'originalBound': "max([4*B+2,2,-4*B+2]) ", 'parsedBound': "max(4 * B + 2, 2, -4 * B + 2)", 'degree': 1.0, 'variableCount': 1, 'time': 344 },
  'FGPSF09/patrs/div': { "stdout": True, 'originalBound': "2 ", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 260 },
  'FGPSF09/patrs/increase1': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 303 },
  'FGPSF09/patrs/sumto_no_if': { "stdout": True, 'originalBound': "max([-1*A+1*B+3,2]) ", 'parsedBound': "max(-1 * A + B + 3, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 303 },
  'FGPSF09/Beerendonk/10': { "stdout": True, 'originalBound': "max([1*A+2,2]) ", 'parsedBound': "max(A + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 325 },
  'FGPSF09/Beerendonk/02': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 308 },
  'FGPSF09/Beerendonk/08': { "stdout": True, 'originalBound': "max([min([1*B,1*A])+1,1]) ", 'parsedBound': "max(min(B, A) + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 325 },
  'FGPSF09/Beerendonk/11': { "stdout": True, 'originalBound': "max([1*B+2,1*A+3,3]) ", 'parsedBound': "max(B + 2, A + 3, 3)", 'degree': 1.0, 'variableCount': 2, 'time': 444 },
  'FGPSF09/Beerendonk/21': { "stdout": True, 'originalBound': "max([-1*B+1*C+3,1]) ", 'parsedBound': "max(-1 * B + C + 3, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 382 },
  'FGPSF09/Beerendonk/17': { "stdout": True, 'originalBound': "max([1*A+ -1*B+max([min([1*B+1+min([1*A+ -1,nat(1*B+ -1),nat(2*A+ -1*B+ -3)]),2*B,1*A+min([1*B,nat(-1*A+2*B),nat(1*A+ -2)])]),min([1*A+ -1+min([1*B+1,nat(-1*A+2*B+1),1*A+ -1]),2*B])])+1,max([min([1*B+1+min([nat(1*B+ -1),nat(1*A+ -1)]),nat(1*A+1)+min([nat(-1*A+2*B+ -1),nat(1*B+ -1)]),1*A+1*B]),min([1*B+min([1*B,nat(1*A)]),1*A+1*B])])+1,1,min([1*A+1*B,1*A+ -1*B])+1]) ", 'parsedBound': "max(A + -1 * B + max(min(B + 1 + min(A + -1, max(0, B + -1), max(0, 2 * A + -1 * B + -3)), 2 * B, A + min(B, max(0, -1 * A + 2 * B), max(0, A + -2))), min(A + -1 + min(B + 1, max(0, -1 * A + 2 * B + 1), A + -1), 2 * B)) + 1, max(min(B + 1 + min(max(0, B + -1), max(0, A + -1)), max(0, A + 1) + min(max(0, -1 * A + 2 * B + -1), max(0, B + -1)), A + B), min(B + min(B, max(0, A)), A + B)) + 1, 1, min(A + B, A + -1 * B) + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 677 },
  'FGPSF09/Beerendonk/22': { "stdout": True, 'originalBound': "max([2*A+1*B+4,2*A+2,1*B+4,2]) ", 'parsedBound': "max(2 * A + B + 4, 2 * A + 2, B + 4, 2)", 'degree': 1.0, 'variableCount': 2, 'time': 447 },
  'FGPSF09/Beerendonk/23': { "stdout": True, 'originalBound': "max([2*A+ -3*B+1*C+4,2*A+ -2*B+2,-1*B+1*C+4,2]) ", 'parsedBound': "max(2 * A + -3 * B + C + 4, 2 * A + -2 * B + 2, -1 * B + C + 4, 2)", 'degree': 1.0, 'variableCount': 3, 'time': 590 },
  'FGPSF09/Beerendonk/05': { "stdout": True, 'originalBound': "max([1*A+1,1]) ", 'parsedBound': "max(A + 1, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 294 },
  'FGPSF09/Beerendonk/19': { "stdout": True, 'originalBound': "max([1*A+ -2*B+1*C+1,-1*B+1*C+1,1,1*A+ -1*B+1]) ", 'parsedBound': "max(A + -2 * B + C + 1, -1 * B + C + 1, 1, A + -1 * B + 1)", 'degree': 1.0, 'variableCount': 3, 'time': 531 },
  'FGPSF09/Beerendonk/07': { "stdout": True, 'originalBound': "max([1*A+1,1]) ", 'parsedBound': "max(A + 1, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 285 },
  'FGPSF09/Beerendonk/09': { "stdout": True, 'originalBound': "max([min([1*A+ -1*B,-1*B+1*C])+1,1]) ", 'parsedBound': "max(min(A + -1 * B, -1 * B + C) + 1, 1)", 'degree': 1.0, 'variableCount': 3, 'time': 348 },
  'FGPSF09/Beerendonk/01': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 304 },
  'FGPSF09/Beerendonk/13': { "stdout": True, 'originalBound': "max([1*B+2,2,1*A+1]) ", 'parsedBound': "max(B + 2, 2, A + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 497 },
  'FGPSF09/Beerendonk/03': { "stdout": True, 'originalBound': "max([1*A+ -1*B+1,1]) ", 'parsedBound': "max(A + -1 * B + 1, 1)", 'degree': 1.0, 'variableCount': 2, 'time': 308 },
  'FGPSF09/Beerendonk/24': { "stdout": True, 'originalBound': "max([1*B+3,1,1*A+3]) ", 'parsedBound': "max(B + 3, 1, A + 3)", 'degree': 1.0, 'variableCount': 2, 'time': 385 },
  'FGPSF09/Beerendonk/20': { "stdout": True, 'originalBound': "max([1*A+3,1]) ", 'parsedBound': "max(A + 3, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 328 },
  'FGPSF09/Beerendonk/04': { "stdout": True, 'originalBound': "2 ", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 275 },
  'FGPSF09/Beerendonk/16': { "stdout": True, 'originalBound': "max([1*A+1*B+ -1*C+1,1,min([1*A+1*B+ -1*C,1*A])+1]) ", 'parsedBound': "max(A + B + -1 * C + 1, 1, min(A + B + -1 * C, A) + 1)", 'degree': 1.0, 'variableCount': 3, 'time': 507 },
  'FGPSF09/Beerendonk/18': { "stdout": True, 'originalBound': "max([1*A+1*B+1,1*A+1,1,1*B+1]) ", 'parsedBound': "max(A + B + 1, A + 1, 1, B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 398 },
  'FGPSF09/Beerendonk/15': { "stdout": True, 'originalBound': "max([1*A+1*B+1,1,min([1*A+1*B,1*A])+1]) ", 'parsedBound': "max(A + B + 1, 1, min(A + B, A) + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 424 },
  'FGPSF09/Beerendonk/06': { "stdout": True, 'originalBound': "max([1*A+1,1]) ", 'parsedBound': "max(A + 1, 1)", 'degree': 1.0, 'variableCount': 1, 'time': 283 },
  'KoAT-2013/sect2': { "stdout": True, 'originalBound': "max([ (1*B+2)* (1*B)+1*B+3,1*B+max([ (1*B+2)* (1*B),1*B])+3,1*B+3,2,2*B+3, (1*B+2)* (1*B)+1*B+2]) ", 'parsedBound': "max((B + 2) * B + B + 3, B + max((B + 2) * B, B) + 3, B + 3, 2, 2 * B + 3, (B + 2) * B + B + 2)", 'degree': 2.0, 'variableCount': 1, 'time': 622 },
  'KoAT-2013/sect5-len': { "stdout": True, 'originalBound': "max([1*B+2,2]) ", 'parsedBound': "max(B + 2, 2)", 'degree': 1.0, 'variableCount': 1, 'time': 303 },
  'KoAT-2013/sect4-facSum': { "stdout": True, 'originalBound': "max([ (1*B+6)* (1*B)+7,7]) ", 'parsedBound': "max((B + 6) * B + 7, 7)", 'degree': 2.0, 'variableCount': 1, 'time': 324 },
  'KoAT-2013/sect1-lin': { "stdout": True, 'originalBound': "max([2*A+1*B+2,1*A+2,2,1*B+2]) ", 'parsedBound': "max(2 * A + B + 2, A + 2, 2, B + 2)", 'degree': 1.0, 'variableCount': 2, 'time': 348 },
  'KoAT-2013/sect5-sumSum': { "stdout": True, 'originalBound': "max([ (1*B+2)* (1*B)+1,1]) ", 'parsedBound': "max((B + 2) * B + 1, 1)", 'degree': 2.0, 'variableCount': 1, 'time': 415 },
  'KoAT-2013/sect1-quad': { "stdout": True, 'originalBound': "inf ", 'parseError': 'Could not parse bound', 'time': 346 },
  }

  data['KoAT'] = {
  'T2/s3-work': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60048 },
  'T2/broydn': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 8736 },
  'T2/ex23': { "stdout": True, 'originalBound': "39", 'parsedBound': "39", 'degree': 0.0, 'variableCount': 0, 'time': 57 },
  'T2/p-10': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 293 },
  'T2/ex30': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 750 },
  'T2/1394-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2702 },
  'T2/neg-e-1394complete-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2203 },
  'T2/n-8a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 208 },
  'T2/ex4': { "stdout": True, 'originalBound': "57", 'parsedBound': "57", 'degree': 0.0, 'variableCount': 0, 'time': 110 },
  'T2/e-pgarch-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 101 },
  'T2/efegp': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 30609 },
  'T2/consts3': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 41 },
  'T2/2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1997 },
  'T2/bf12': { "stdout": True, 'originalBound': "1770", 'parsedBound': "1770", 'degree': 0.0, 'variableCount': 0, 'time': 1852 },
  'T2/n-16a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 688 },
  'T2/p-60': { "stdout": True, 'originalBound': "103", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 55 },
  'T2/p-37': { "stdout": True, 'originalBound': "8", 'parsedBound': "8", 'degree': 0.0, 'variableCount': 0, 'time': 55 },
  'T2/jacobi': { "stdout": True, 'originalBound': "122*A + 8*B + 112*C + 2*A1 + 131", 'parsedBound': "122 * A + 8 * B + 112 * C + 2 * A1 + 131", 'degree': 1.0, 'variableCount': 4, 'time': 2150 },
  'T2/vmcai_struct': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/simple_pre3': { "stdout": True, 'originalBound': "4", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'T2/simpleWhile': { "stdout": True, 'originalBound': "2*C + 7", 'parsedBound': "2 * C + 7", 'degree': 1.0, 'variableCount': 1, 'time': 67 },
  'T2/array3': { "stdout": True, 'originalBound': "103", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/p-63': { "stdout": True, 'originalBound': "A + 4", 'parsedBound': "A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 92 },
  'T2/sudoku': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/curious4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/slayer-4-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/polyrank2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2346 },
  'T2/byron-1': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 89 },
  'T2/afagp-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/eric': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 916 },
  'T2/sort': { "stdout": True, 'originalBound': "1785", 'parsedBound': "1785", 'degree': 0.0, 'variableCount': 0, 'time': 424 },
  'T2/neg-e-acqrel-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 93 },
  'T2/p-14': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 47 },
  'T2/tqli': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 10311 },
  'T2/dsa_test10': { "stdout": True, 'originalBound': "23", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 76 },
  'T2/p-43-terminate': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2447 },
  'T2/ex40': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 551 },
  'T2/bubblesort_inner_loop': { "stdout": True, 'originalBound': "11", 'parsedBound': "11", 'degree': 0.0, 'variableCount': 0, 'time': 74 },
  'T2/p-1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 246 },
  'T2/traverse2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60034 },
  'T2/bf18': { "stdout": True, 'originalBound': "2993", 'parsedBound': "2993", 'degree': 0.0, 'variableCount': 0, 'time': 1853 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "329*A + 134*D + 194*B + H + 266", 'parsedBound': "329 * A + 134 * D + 194 * B + H + 266", 'degree': 1.0, 'variableCount': 4, 'time': 925 },
  'T2/polyrank1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 927 },
  'T2/refine_disj_problem': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 519 },
  'T2/p-3': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 48 },
  'T2/polyrank6': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2737 },
  'T2/two_arrays': { "stdout": True, 'originalBound': "527", 'parsedBound': "527", 'degree': 0.0, 'variableCount': 0, 'time': 223 },
  'T2/curious': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 49 },
  'T2/ex20': { "stdout": True, 'originalBound': "1030", 'parsedBound': "1030", 'degree': 0.0, 'variableCount': 0, 'time': 61 },
  'T2/ctl': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/p-45': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 72 },
  'T2/stored': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 728 },
  'T2/byron-4': { "stdout": True, 'originalBound': "2*A + 3", 'parsedBound': "2 * A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 84 },
  'T2/heidy5': { "stdout": True, 'originalBound': "B + 3", 'parsedBound': "B + 3", 'degree': 1.0, 'variableCount': 1, 'time': 50 },
  'T2/n-6a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 90 },
  'T2/smagillc-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 313 },
  'T2/edn': { "stdout": True, 'originalBound': "46781", 'parsedBound': "46781", 'degree': 0.0, 'variableCount': 0, 'time': 1498 },
  'T2/ndes': { "stdout": True, 'originalBound': "259496032", 'parsedBound': "259496032", 'degree': 0.0, 'variableCount': 0, 'time': 9917 },
  'T2/ex36': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60043 },
  'T2/heidy2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 399 },
  'T2/n-18': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 230 },
  'T2/array_init': { "stdout": True, 'originalBound': "13", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 48 },
  'T2/p-13': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 43 },
  'T2/consts1nt': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 175 },
  'T2/cfg': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 475 },
  'T2/queue_1': { "stdout": True, 'originalBound': "17", 'parsedBound': "17", 'degree': 0.0, 'variableCount': 0, 'time': 143 },
  'T2/insertsort': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1234 },
  'T2/queue_100': { "stdout": True, 'originalBound': "1403", 'parsedBound': "1403", 'degree': 0.0, 'variableCount': 0, 'time': 139 },
  'T2/bf17': { "stdout": True, 'originalBound': "2895", 'parsedBound': "2895", 'degree': 0.0, 'variableCount': 0, 'time': 1843 },
  'T2/fourn.c.i.fourn.pl.t2.fixed': { "stdout": True, 'originalBound': "A + B + 4", 'parsedBound': "A + B + 4", 'degree': 1.0, 'variableCount': 2, 'time': 134 },
  'T2/fun4': { "stdout": True, 'originalBound': "23", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 102 },
  'T2/create_seg': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 377 },
  'T2/complex_guard': { "stdout": True, 'originalBound': "16", 'parsedBound': "16", 'degree': 0.0, 'variableCount': 0, 'time': 57 },
  'T2/p-56': { "stdout": True, 'originalBound': "2*D + 3", 'parsedBound': "2 * D + 3", 'degree': 1.0, 'variableCount': 1, 'time': 80 },
  'T2/dsa_test11': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/p-34': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 88 },
  'T2/p-44': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 61 },
  'T2/p-46': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 166 },
  'T2/w2_nt': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 405 },
  'T2/p-12': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 45 },
  'T2/bf11': { "stdout": True, 'originalBound': "1503", 'parsedBound': "1503", 'degree': 0.0, 'variableCount': 0, 'time': 1830 },
  'T2/ex19': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 496 },
  'T2/ex16': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4315 },
  'T2/two_arrays6': { "stdout": True, 'originalBound': "14*E + 51", 'parsedBound': "14 * E + 51", 'degree': 1.0, 'variableCount': 1, 'time': 440 },
  'T2/ex29': { "stdout": True, 'originalBound': "15", 'parsedBound': "15", 'degree': 0.0, 'variableCount': 0, 'time': 47 },
  'T2/n-33': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 121 },
  'T2/fun6': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 17396 },
  'T2/ex22': { "stdout": True, 'originalBound': "11928", 'parsedBound': "11928", 'degree': 0.0, 'variableCount': 0, 'time': 2784 },
  'T2/simple_fail': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/ex6': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'T2/p-19a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 264 },
  'T2/n-6': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/fast_poll': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 7427 },
  'T2/neg-1394complete-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2613 },
  'T2/nakata_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/reverse_div4': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 239 },
  'T2/create': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 373 },
  'T2/e-acqrel-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 264 },
  'T2/bsort100': { "stdout": True, 'originalBound': "20796", 'parsedBound': "20796", 'degree': 0.0, 'variableCount': 0, 'time': 159 },
  'T2/p-15': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 45 },
  'T2/n-14': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 94 },
  'T2/rev_nt4': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/e-1394complete-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2219 },
  'T2/fourn.c.i.fourn.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 15363 },
  'T2/array2': { "stdout": True, 'originalBound': "52", 'parsedBound': "52", 'degree': 0.0, 'variableCount': 0, 'time': 46 },
  'T2/n-21': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 461 },
  'T2/traverse_twice': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 23089 },
  'T2/neg-pgarch-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 102 },
  'T2/print': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 10334 },
  'T2/p-4': { "stdout": True, 'originalBound': "A + 2*B + C + 2*A^2 + 4*A*B + 2*B^2 + A*C + B*C + 1", 'parsedBound': "A + 2 * B + C + 2 * A^2 + 4 * A * B + 2 * B^2 + A * C + B * C + 1", 'degree': 2.0, 'variableCount': 3, 'time': 60 },
  'T2/fun1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1620 },
  'T2/zeroconf': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/p-58': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 43 },
  'T2/neg-smagilla-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 289 },
  'T2/p-41': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/p-18': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 92 },
  'T2/elmhes.c.i.elmhes.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "312460831275774*A + 44637261614347*B + 267823569665387*E + 5040*A^2 + 9150*A*E + 5550*A*B + 4830*B*E + 690*B^2 + 4140*E^2 + 267823569661249", 'parsedBound': "312460831275774 * A + 44637261614347 * B + 267823569665387 * E + 5040 * A^2 + 9150 * A * E + 5550 * A * B + 4830 * B * E + 690 * B^2 + 4140 * E^2 + 267823569661249", 'degree': 2.0, 'variableCount': 3, 'time': 531 },
  'T2/p-7': { "stdout": True, 'originalBound': "B + C + 3", 'parsedBound': "B + C + 3", 'degree': 1.0, 'variableCount': 2, 'time': 54 },
  'T2/minmax': { "stdout": True, 'originalBound': "5", 'parsedBound': "5", 'degree': 0.0, 'variableCount': 0, 'time': 36 },
  'T2/ex26': { "stdout": True, 'originalBound': "203", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 81 },
  'T2/seq2': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 46 },
  'T2/hqr': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/heidy7-simple': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 276 },
  'T2/polyrank3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2279 },
  'T2/apchild-live': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 27061 },
  'T2/p-33': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 82 },
  'T2/p-21': { "stdout": True, 'originalBound': "2*A + 2*B + 2", 'parsedBound': "2 * A + 2 * B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 62 },
  'T2/p-20': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 59 },
  'T2/5': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 32865 },
  'T2/ex10': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 222 },
  'T2/bf19': { "stdout": True, 'originalBound': "3317", 'parsedBound': "3317", 'degree': 0.0, 'variableCount': 0, 'time': 1835 },
  'T2/st88.bug': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 983 },
  'T2/agafp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60034 },
  'T2/oct_vs_subpoly': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 201 },
  'T2/simple_pre': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/slayer-3-filtered': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 46848 },
  'T2/graycode': { "stdout": True, 'originalBound': "109533", 'parsedBound': "109533", 'degree': 0.0, 'variableCount': 0, 'time': 6138 },
  'T2/p-1c': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 291 },
  'T2/apchild-accepted-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 24493 },
  'T2/matmul': { "stdout": True, 'originalBound': "1441", 'parsedBound': "1441", 'degree': 0.0, 'variableCount': 0, 'time': 140 },
  'T2/spctrm': { "stdout": True, 'originalBound': "375*D + 278*J + 23*N + 23*O + 76*Q + 632", 'parsedBound': "375 * D + 278 * J + 23 * N + 23 * O + 76 * Q + 632", 'degree': 1.0, 'variableCount': 5, 'time': 2049 },
  'T2/fun10b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/n-32': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 458 },
  'T2/cover': { "stdout": True, 'originalBound': "699398", 'parsedBound': "699398", 'degree': 0.0, 'variableCount': 0, 'time': 42192 },
  'T2/n-1c': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/ex33': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 45 },
  'T2/neg-popl07-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 186 },
  'T2/rev_nt3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 405 },
  'T2/neg-e-1394complete-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2228 },
  'T2/intSqRoot': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 678 },
  'T2/bf8': { "stdout": True, 'originalBound': "1109", 'parsedBound': "1109", 'degree': 0.0, 'variableCount': 0, 'time': 1919 },
  'T2/n-17': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 240 },
  'T2/dead.neg-st88b-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 614 },
  'T2/db2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60076 },
  'T2/p-52': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 280 },
  'T2/eric3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 567 },
  'T2/mc91': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 684 },
  'T2/n-9': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 89 },
  'T2/slayer-n2-filtered': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 220 },
  'T2/n-7': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 541 },
  'T2/n-3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 418 },
  'T2/p-6': { "stdout": True, 'originalBound': "3*A + 3*B + 2", 'parsedBound': "3 * A + 3 * B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 65 },
  'T2/loop3': { "stdout": True, 'originalBound': "4500405", 'parsedBound': "4500405", 'degree': 0.0, 'variableCount': 0, 'time': 11341 },
  'T2/non_term': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 659 },
  'T2/slayer-n1-filtered': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 740 },
  'T2/traverse_seg2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 10657 },
  'T2/send-more-money': { "stdout": True, 'originalBound': "129", 'parsedBound': "129", 'degree': 0.0, 'variableCount': 0, 'time': 841 },
  'T2/dsa_test9': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/dropbuf-live': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 31 },
  'T2/dsa_test': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/n-46': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 866 },
  'T2/polling': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 11132 },
  'T2/heidy10': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 861 },
  'T2/popl07-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 138 },
  'T2/polyrank7': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1494 },
  'T2/p-40': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 422 },
  'T2/brp_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/p-42': { "stdout": True, 'originalBound': "A + B + 8", 'parsedBound': "A + B + 8", 'degree': 1.0, 'variableCount': 2, 'time': 74 },
  'T2/ex32': { "stdout": True, 'originalBound': "2003", 'parsedBound': "2003", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/cnt': { "stdout": True, 'originalBound': "643", 'parsedBound': "643", 'degree': 0.0, 'variableCount': 0, 'time': 156 },
  'T2/rewrite': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 115 },
  'T2/heidy9': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 46 },
  'T2/spctrm.c.i.spctrm.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "375*D + 278*J + 23*N + 23*O + 76*Q + 632", 'parsedBound': "375 * D + 278 * J + 23 * N + 23 * O + 76 * Q + 632", 'degree': 1.0, 'variableCount': 5, 'time': 2045 },
  'T2/ex9': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 976 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "37*A + 3*K + 32*D + 2*B + 39", 'parsedBound': "37 * A + 3 * K + 32 * D + 2 * B + 39", 'degree': 1.0, 'variableCount': 4, 'time': 238 },
  'T2/zeroconf_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/st88': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1037 },
  'T2/bf14': { "stdout": True, 'originalBound': "2167", 'parsedBound': "2167", 'degree': 0.0, 'variableCount': 0, 'time': 1811 },
  'T2/w1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 489 },
  'T2/bf16': { "stdout": True, 'originalBound': "2453", 'parsedBound': "2453", 'degree': 0.0, 'variableCount': 0, 'time': 1855 },
  'T2/d': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 460 },
  'T2/e-popl07-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 240 },
  'T2/ex34': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/new_ex': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 762 },
  'T2/s1-saved': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 7112 },
  'T2/array': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/huh': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2943 },
  'T2/smagillc-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 318 },
  'T2/a.10.c': { "stdout": True, 'originalBound': "42136*A + 42076*B + 21368*F + 21308*D + 320*A^2 + 608*A*B + 480*A*F + 448*A*D + 464*B*F + 160*F^2 + 304*D*F + 288*B^2 + 432*B*D + 144*D^2 + 77869", 'parsedBound': "42136 * A + 42076 * B + 21368 * F + 21308 * D + 320 * A^2 + 608 * A * B + 480 * A * F + 448 * A * D + 464 * B * F + 160 * F^2 + 304 * D * F + 288 * B^2 + 432 * B * D + 144 * D^2 + 77869", 'degree': 2.0, 'variableCount': 4, 'time': 113 },
  'T2/byron-3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 947 },
  'T2/p-36': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 334 },
  'T2/n-13': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 221 },
  'T2/Loop': { "stdout": True, 'originalBound': "67*C + 67*N + 82", 'parsedBound': "67 * C + 67 * N + 82", 'degree': 1.0, 'variableCount': 2, 'time': 566 },
  'T2/slayer-2-filtered': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 57 },
  'T2/dsa_test13': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 27 },
  'T2/ex12': { "stdout": True, 'originalBound': "20", 'parsedBound': "20", 'degree': 0.0, 'variableCount': 0, 'time': 62 },
  'T2/fun2': { "stdout": True, 'originalBound': "67*E + 67*M + 82", 'parsedBound': "67 * E + 67 * M + 82", 'degree': 1.0, 'variableCount': 2, 'time': 578 },
  'T2/dsa_test4': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/bs': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 881 },
  'T2/constants': { "stdout": True, 'originalBound': "404", 'parsedBound': "404", 'degree': 0.0, 'variableCount': 0, 'time': 54 },
  'T2/heidy3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 103 },
  'T2/loop_on_input': { "stdout": True, 'originalBound': "10", 'parsedBound': "10", 'degree': 0.0, 'variableCount': 0, 'time': 94 },
  'T2/bf10': { "stdout": True, 'originalBound': "1367", 'parsedBound': "1367", 'degree': 0.0, 'variableCount': 0, 'time': 1822 },
  'T2/subpoly_crash': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 313 },
  'T2/array_free': { "stdout": True, 'originalBound': "86", 'parsedBound': "86", 'degree': 0.0, 'variableCount': 0, 'time': 65 },
  'T2/p-61': { "stdout": True, 'originalBound': "1003", 'parsedBound': "1003", 'degree': 0.0, 'variableCount': 0, 'time': 52 },
  'T2/fun8': { "stdout": True, 'originalBound': "573", 'parsedBound': "573", 'degree': 0.0, 'variableCount': 0, 'time': 893 },
  'T2/1394complete-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2262 },
  'T2/wrong_loop': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 168 },
  'T2/queens': { "stdout": True, 'originalBound': "76740", 'parsedBound': "76740", 'degree': 0.0, 'variableCount': 0, 'time': 406 },
  'T2/bio': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/ex14': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 94 },
  'T2/bf15': { "stdout": True, 'originalBound': "2212", 'parsedBound': "2212", 'degree': 0.0, 'variableCount': 0, 'time': 1816 },
  'T2/afagx1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 125 },
  'T2/simple_array_inversion': { "stdout": True, 'originalBound': "5", 'parsedBound': "5", 'degree': 0.0, 'variableCount': 0, 'time': 50 },
  'T2/acqrel-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 280 },
  'T2/n-12': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/selectSort': { "stdout": True, 'originalBound': "22*C + 12*C^2 + 6", 'parsedBound': "22 * C + 12 * C^2 + 6", 'degree': 2.0, 'variableCount': 1, 'time': 677 },
  'T2/invgen': { "stdout": True, 'originalBound': "B + 2", 'parsedBound': "B + 2", 'degree': 1.0, 'variableCount': 1, 'time': 58 },
  'T2/fibcall': { "stdout": True, 'originalBound': "31", 'parsedBound': "31", 'degree': 0.0, 'variableCount': 0, 'time': 69 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60034 },
  'T2/p-43': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 151 },
  'T2/sas1': { "stdout": True, 'originalBound': "17*B + 2", 'parsedBound': "17 * B + 2", 'degree': 1.0, 'variableCount': 1, 'time': 283 },
  'T2/slayer-1-filtered': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2261 },
  'T2/n-37': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 265 },
  'T2/spctrm.c.i.spctrm.pl.t2.fixed': { "stdout": True, 'originalBound': "375*A + 278*J + 23*N + 23*O + 76*Q + 403", 'parsedBound': "375 * A + 278 * J + 23 * N + 23 * O + 76 * Q + 403", 'degree': 1.0, 'variableCount': 5, 'time': 2055 },
  'T2/heidy1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 206 },
  'T2/svdcmp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60033 },
  'T2/bitcount16': { "stdout": True, 'originalBound': "34", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 63 },
  'T2/dropbuf': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 673 },
  'T2/sumit': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1381 },
  'T2/1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2316 },
  'T2/traverse': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 6452 },
  'T2/polling.bug': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 12211 },
  'T2/simple_double_free': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/janne_complex': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 728 },
  'T2/fdct': { "stdout": True, 'originalBound': "19", 'parsedBound': "19", 'degree': 0.0, 'variableCount': 0, 'time': 65 },
  'T2/p-5': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 897 },
  'T2/flipflop': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 207 },
  'T2/neg-1394complete-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2211 },
  'T2/apchildlive-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 9854 },
  'T2/simple_pre1': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/neg-smagilla-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 315 },
  'T2/walk': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1426 },
  'T2/hqr.c.i.hqr.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/slayer-n3-filtered': { "stdout": True, 'originalBound': "7", 'parsedBound': "7", 'degree': 0.0, 'variableCount': 0, 'time': 99 },
  'T2/sequential_swap': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 35 },
  'T2/n-15a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 88 },
  'T2/fun4-alt': { "stdout": True, 'originalBound': "23", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 69 },
  'T2/pentagon': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 293 },
  'T2/fun11': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 889 },
  'T2/polyrank5': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1763 },
  'T2/toeplz.c.i.toeplz.pl.t2.fixed': { "stdout": True, 'originalBound': "1163*A + 252*A^2 + 5", 'parsedBound': "1163 * A + 252 * A^2 + 5", 'degree': 2.0, 'variableCount': 1, 'time': 726 },
  'T2/consts3nt': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 205 },
  'T2/3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 53 },
  'T2/dsa_test15': { "stdout": True, 'originalBound': "23", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 68 },
  'T2/n-10': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/byron-2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 116 },
  'T2/pearl-necklace': { "stdout": True, 'originalBound': "82*A + 76*B + 10", 'parsedBound': "82 * A + 76 * B + 10", 'degree': 1.0, 'variableCount': 2, 'time': 123 },
  'T2/consts2nt': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 332 },
  'T2/bf5': { "stdout": True, 'originalBound': "767", 'parsedBound': "767", 'degree': 0.0, 'variableCount': 0, 'time': 1770 },
  'T2/ex37': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/dsa_test6': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 46 },
  'T2/p-19': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 234 },
  'T2/smagillb-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 142 },
  'T2/simple_control_on_input': { "stdout": True, 'originalBound': "22", 'parsedBound': "22", 'degree': 0.0, 'variableCount': 0, 'time': 45 },
  'T2/reverse': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 3979 },
  'T2/pldi': { "stdout": True, 'originalBound': "9*B + 6*B^2 + 5", 'parsedBound': "9 * B + 6 * B^2 + 5", 'degree': 2.0, 'variableCount': 1, 'time': 248 },
  'T2/tqli.c.i.tqli.pl.t2.fixed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 14547 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "37*A + 3*K + 32*D + 2*B + 41", 'parsedBound': "37 * A + 3 * K + 32 * D + 2 * B + 41", 'degree': 1.0, 'variableCount': 4, 'time': 264 },
  'T2/crc': { "stdout": True, 'originalBound': "68343", 'parsedBound': "68343", 'degree': 0.0, 'variableCount': 0, 'time': 1454 },
  'T2/p-53': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 35 },
  'T2/firewire': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2921 },
  'T2/ase_example': { "stdout": True, 'originalBound': "76", 'parsedBound': "76", 'degree': 0.0, 'variableCount': 0, 'time': 73 },
  'T2/neg-e-acqrel-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 230 },
  'T2/polyrank4': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4896 },
  'T2/broydn.c.i.broydn.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 8693 },
  'T2/broydn.c.i.broydn.pl.t2.fixed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 10952 },
  'T2/bf9': { "stdout": True, 'originalBound': "1447", 'parsedBound': "1447", 'degree': 0.0, 'variableCount': 0, 'time': 1817 },
  'T2/bf7': { "stdout": True, 'originalBound': "1145", 'parsedBound': "1145", 'degree': 0.0, 'variableCount': 0, 'time': 1820 },
  'T2/statemate': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/n-36': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 122 },
  'T2/bf6': { "stdout": True, 'originalBound': "858", 'parsedBound': "858", 'degree': 0.0, 'variableCount': 0, 'time': 1855 },
  'T2/matrixsqrt': { "stdout": True, 'originalBound': "660", 'parsedBound': "660", 'degree': 0.0, 'variableCount': 0, 'time': 1200 },
  'T2/jacobi.c.i.jacobi.pl.t2.fixed': { "stdout": True, 'originalBound': "122*A + 8*B + 112*C + 2*A1 + 131", 'parsedBound': "122 * A + 8 * B + 112 * C + 2 * A1 + 131", 'degree': 1.0, 'variableCount': 4, 'time': 2786 },
  'T2/iecs': { "stdout": True, 'originalBound': "B + 1", 'parsedBound': "B + 1", 'degree': 1.0, 'variableCount': 1, 'time': 90 },
  'T2/n-15': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 246 },
  'T2/neg-e-pgarch-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 99 },
  'T2/randomwalk_withassume': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4037 },
  'T2/rlft3': { "stdout": True, 'originalBound': "8*H + 8*I + 13*J + 25*K + 3*P + 3*Q + 55", 'parsedBound': "8 * H + 8 * I + 13 * J + 25 * K + 3 * P + 3 * Q + 55", 'degree': 1.0, 'variableCount': 6, 'time': 1101 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60034 },
  'T2/heidy7': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 950 },
  'T2/p-16': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 46 },
  'T2/randomwalk': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 3921 },
  'T2/eric2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60021 },
  'T2/ex27': { "stdout": True, 'originalBound': "22853", 'parsedBound': "22853", 'degree': 0.0, 'variableCount': 0, 'time': 8367 },
  'T2/ud': { "stdout": True, 'originalBound': "367698", 'parsedBound': "367698", 'degree': 0.0, 'variableCount': 0, 'time': 5639 },
  'T2/qrdcmp': { "stdout": True, 'originalBound': "37*A + 3*K + 32*D + 2*B + 38", 'parsedBound': "37 * A + 3 * K + 32 * D + 2 * B + 38", 'degree': 1.0, 'variableCount': 4, 'time': 233 },
  'T2/7': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 231 },
  'T2/simple': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 383 },
  'T2/vmcai_bytes': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/241': { "stdout": True, 'originalBound': "A^2 + 2*A + 1", 'parsedBound': "A^2 + 2 * A + 1", 'degree': 2.0, 'variableCount': 1, 'time': 69 },
  'T2/n-8': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/fermat': { "stdout": True, 'originalBound': "15", 'parsedBound': "15", 'degree': 0.0, 'variableCount': 0, 'time': 104 },
  'T2/ex3': { "stdout": True, 'originalBound': "13", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 49 },
  'T2/ex1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 222 },
  'T2/db3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60076 },
  'T2/ex31': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 495 },
  'T2/rev_nt2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 403 },
  'T2/slayer-1-rf': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 7852 },
  'T2/queue_1000': { "stdout": True, 'originalBound': "14003", 'parsedBound': "14003", 'degree': 0.0, 'variableCount': 0, 'time': 137 },
  'T2/fourn': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 15390 },
  'T2/p-32': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 421 },
  'T2/e-acqrel-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 214 },
  'T2/seq': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 42 },
  'T2/ex21': { "stdout": True, 'originalBound': "203", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 76 },
  'T2/1394complete-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2623 },
  'T2/buggyNonTermLoop': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1649 },
  'T2/sas2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4605 },
  'T2/destroy_seg': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 545 },
  'T2/matmult': { "stdout": True, 'originalBound': "28926", 'parsedBound': "28926", 'degree': 0.0, 'variableCount': 0, 'time': 324 },
  'T2/n-1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 452 },
  'T2/two_arrays1': { "stdout": True, 'originalBound': "751", 'parsedBound': "751", 'degree': 0.0, 'variableCount': 0, 'time': 408 },
  'T2/hongyi1': { "stdout": True, 'originalBound': "420*C + 1011*D + 24", 'parsedBound': "420 * C + 1011 * D + 24", 'degree': 1.0, 'variableCount': 2, 'time': 24468 },
  'T2/n-48': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 808 },
  'T2/hqr.c.i.hqr.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/bf13': { "stdout": True, 'originalBound': "2180", 'parsedBound': "2180", 'degree': 0.0, 'variableCount': 0, 'time': 1851 },
  'T2/destroy': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 476 },
  'T2/p-9': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 227 },
  'T2/p-55': { "stdout": True, 'originalBound': "101*B + A + A*B + 2", 'parsedBound': "101 * B + A + A * B + 2", 'degree': 2.0, 'variableCount': 2, 'time': 96 },
  'T2/slayer-3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60210 },
  'T2/neg-popl07-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 141 },
  'T2/e-pgarch-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 109 },
  'T2/p-8': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 224 },
  'T2/jacobi.c.i.jacobi.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "122*A + 8*B + 112*C + 2*A1 + 131", 'parsedBound': "122 * A + 8 * B + 112 * C + 2 * A1 + 131", 'degree': 1.0, 'variableCount': 4, 'time': 2138 },
  'T2/dsa_test5': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/consts4nt': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 330 },
  'T2/232': { "stdout": True, 'originalBound': "A^2 + 2*A + 1", 'parsedBound': "A^2 + 2 * A + 1", 'degree': 2.0, 'variableCount': 1, 'time': 72 },
  'T2/n-4': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2201 },
  'T2/dsa_test8': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/bubbleSort': { "stdout": True, 'originalBound': "6*C + 12*C^2 + 6", 'parsedBound': "6 * C + 12 * C^2 + 6", 'degree': 2.0, 'variableCount': 1, 'time': 154 },
  'T2/jfdctint': { "stdout": True, 'originalBound': "94", 'parsedBound': "94", 'degree': 0.0, 'variableCount': 0, 'time': 91 },
  'T2/smagilla-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 290 },
  'T2/n-40': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 635 },
  'T2/heidy6': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 145 },
  'T2/slayer-3-new': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60157 },
  'T2/fuhs-inflasso': { "stdout": True, 'originalBound': "C^2 + C + 1", 'parsedBound': "C^2 + C + 1", 'degree': 2.0, 'variableCount': 1, 'time': 55 },
  'T2/heidy8': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2094 },
  'T2/1394-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2530 },
  'T2/toeplz.c.i.toeplz.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4032 },
  'T2/magic': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/fun10': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/select': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 19742 },
  'T2/elmhes.c.i.elmhes.pl.t2.fixed': { "stdout": True, 'originalBound': "312460831277084*A + 44637261614517*B + 267823569666587*E + 5180*A^2 + 9480*A*E + 5570*A*B + 4860*B*E + 690*B^2 + 4320*E^2 + 267823569662269", 'parsedBound': "312460831277084 * A + 44637261614517 * B + 267823569666587 * E + 5180 * A^2 + 9480 * A * E + 5570 * A * B + 4860 * B * E + 690 * B^2 + 4320 * E^2 + 267823569662269", 'degree': 2.0, 'variableCount': 3, 'time': 637 },
  'T2/ex17': { "stdout": True, 'originalBound': "104", 'parsedBound': "104", 'degree': 0.0, 'variableCount': 0, 'time': 64 },
  'T2/nested': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 571 },
  'T2/p-1a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 297 },
  'T2/streamserver-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 10462 },
  'T2/traverse_seg': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 9987 },
  'T2/pgarch': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 28276 },
  'T2/consts5nt': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 418 },
  'T2/toeplz': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4038 },
  'T2/slayer-n5-filtered': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 9916 },
  'T2/simple_swap_call': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 31 },
  'T2/ex7': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 45 },
  'T2/fun2b': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1654 },
  'T2/n-3a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 118 },
  'T2/ns': { "stdout": True, 'originalBound': "1563", 'parsedBound': "1563", 'degree': 0.0, 'variableCount': 0, 'time': 182 },
  'T2/queue_10': { "stdout": True, 'originalBound': "143", 'parsedBound': "143", 'degree': 0.0, 'variableCount': 0, 'time': 140 },
  'T2/n-16': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 244 },
  'T2/create_via_tmps': { "stdout": True, 'originalBound': "4*U + A + 13", 'parsedBound': "4 * U + A + 13", 'degree': 1.0, 'variableCount': 2, 'time': 274 },
  'T2/6': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 51 },
  'T2/mc91test': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1330 },
  'T2/dummy': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 750 },
  'T2/ex15': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/n_firewire_instrumented-PP': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 17031 },
  'T2/n-1d': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/ex13': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/bf20': { "stdout": True, 'originalBound': "3122", 'parsedBound': "3122", 'degree': 0.0, 'variableCount': 0, 'time': 1830 },
  'T2/n-20': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 74 },
  'T2/p-22': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 55 },
  'T2/p-7b': { "stdout": True, 'originalBound': "B + C + 3", 'parsedBound': "B + C + 3", 'degree': 1.0, 'variableCount': 2, 'time': 57 },
  'T2/neg-e-popl07-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 237 },
  'T2/p-49': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 51 },
  'T2/fun5': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 14557 },
  'T2/fun7': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 314 },
  'T2/brp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/slayer-n1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 646 },
  'T2/nakata': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 26125 },
  'T2/eric1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4680 },
  'T2/disj_nightmare_abi': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 33 },
  'T2/ex18': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1416 },
  'T2/tqli.c.i.tqli.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 10381 },
  'T2/array_init_assign': { "stdout": True, 'originalBound': "8", 'parsedBound': "8", 'degree': 0.0, 'variableCount': 0, 'time': 73 },
  'T2/slayer-n2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 217 },
  'T2/elmhes': { "stdout": True, 'originalBound': "312460831279704*A + 44637261614857*B + 267823569668987*E + 5460*A^2 + 10140*A*E + 5610*A*B + 4920*B*E + 690*B^2 + 4680*E^2 + 267823569664309", 'parsedBound': "312460831279704 * A + 44637261614857 * B + 267823569668987 * E + 5460 * A^2 + 10140 * A * E + 5610 * A * B + 4920 * B * E + 690 * B^2 + 4680 * E^2 + 267823569664309", 'degree': 2.0, 'variableCount': 3, 'time': 528 },
  'T2/fun3': { "stdout": True, 'originalBound': "67*C + 67*N + 82", 'parsedBound': "67 * C + 67 * N + 82", 'degree': 1.0, 'variableCount': 2, 'time': 572 },
  'T2/fir': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 6048 },
  'T2/ludcmp': { "stdout": True, 'originalBound': "294*A + 120*D + 173*B + H + 238", 'parsedBound': "294 * A + 120 * D + 173 * B + H + 238", 'degree': 1.0, 'variableCount': 4, 'time': 877 },
  'T2/nested2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 431 },
  'T2/popl07-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 140 },
  'T2/n-5': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 894 },
  'T2/fake-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60036 },
  'T2/destroy_seg_leak': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60048 },
  'T2/dsa_test12': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/ex11': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1004 },
  'T2/reverse_seg_cyclic': { "stdout": True, 'originalBound': "16*E1 + 16*W1 + N + 18", 'parsedBound': "16 * E1 + 16 * W1 + N + 18", 'degree': 1.0, 'variableCount': 3, 'time': 3754 },
  'T2/collatz': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 702 },
  'T2/n-18a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 673 },
  'T2/p-1b': { "stdout": True, 'originalBound': "A + B + 2", 'parsedBound': "A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 46 },
  'T2/example': { "stdout": True, 'originalBound': "2*A + 2*B + 1", 'parsedBound': "2 * A + 2 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 67 },
  'T2/consts2': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 46 },
  'T2/fun1b': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1762 },
  'T2/wtf': { "stdout": True, 'originalBound': "67*C + 67*N + 82", 'parsedBound': "67 * C + 67 * N + 82", 'degree': 1.0, 'variableCount': 2, 'time': 571 },
  'T2/n-12a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 51 },
  'T2/neg-e-pgarch-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/rlft3.c.i.rlft3.pl.t2.fixed': { "stdout": True, 'originalBound': "8*H + 8*I + 7*J + 17*K + 3*P + 3*Q + 46", 'parsedBound': "8 * H + 8 * I + 7 * J + 17 * K + 3 * P + 3 * Q + 46", 'degree': 1.0, 'variableCount': 6, 'time': 1127 },
  'T2/two_arrays2': { "stdout": True, 'originalBound': "14*E + 51", 'parsedBound': "14 * E + 51", 'degree': 1.0, 'variableCount': 1, 'time': 416 },
  'T2/ex2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 499 },
  'T2/spiral': { "stdout": True, 'originalBound': "5*A*B + 4*B^2 + 6*B + 8*A + A^2 + 4", 'parsedBound': "5 * A * B + 4 * B^2 + 6 * B + 8 * A + A^2 + 4", 'degree': 2.0, 'variableCount': 2, 'time': 430 },
  'T2/dsa_test1': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/fun9': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 6079 },
  'T2/ex8': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 832 },
  'T2/consts5': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 32 },
  'T2/p-1d': { "stdout": True, 'originalBound': "3*A + 3*B + 2", 'parsedBound': "3 * A + 3 * B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 66 },
  'T2/bitcount32': { "stdout": True, 'originalBound': "66", 'parsedBound': "66", 'degree': 0.0, 'variableCount': 0, 'time': 62 },
  'T2/apchild-accepted': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 24421 },
  'T2/consts4': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 43 },
  'T2/array1': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/streamserver.bug': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 14693 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "329*A + 134*D + 194*B + H + 266", 'parsedBound': "329 * A + 134 * D + 194 * B + H + 266", 'degree': 1.0, 'variableCount': 4, 'time': 1050 },
  'T2/consts1': { "stdout": True, 'originalBound': "301", 'parsedBound': "301", 'degree': 0.0, 'variableCount': 0, 'time': 47 },
  'T2/simple_pre2': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'SAS10/ackermann': { "stdout": True, 'originalBound': "16*A + 8", 'parsedBound': "16 * A + 8", 'degree': 1.0, 'variableCount': 1, 'time': 87 },
  'SAS10/random2d': { "stdout": True, 'originalBound': "22*A + 8", 'parsedBound': "22 * A + 8", 'degree': 1.0, 'variableCount': 1, 'time': 528 },
  'SAS10/terminate': { "stdout": True, 'originalBound': "A + C + E + 107", 'parsedBound': "A + C + E + 107", 'degree': 1.0, 'variableCount': 3, 'time': 133 },
  'SAS10/ndecr': { "stdout": True, 'originalBound': "A + 4", 'parsedBound': "A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 72 },
  'SAS10/easy2': { "stdout": True, 'originalBound': "A + 4", 'parsedBound': "A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 115 },
  'SAS10/insertsort': { "stdout": True, 'originalBound': "3*A^2 + 18*A + 4", 'parsedBound': "3 * A^2 + 18 * A + 4", 'degree': 2.0, 'variableCount': 1, 'time': 208 },
  'SAS10/relation1': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 31 },
  'SAS10/realshellsort': { "stdout": True, 'originalBound': "24*L + 48*L^2 + 9*L^3 + 5", 'parsedBound': "24 * L + 48 * L^2 + 9 * L^3 + 5", 'degree': 3.0, 'variableCount': 1, 'time': 615 },
  'SAS10/counterex1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 24087 },
  'SAS10/easy1': { "stdout": True, 'originalBound': "123", 'parsedBound': "123", 'degree': 0.0, 'variableCount': 0, 'time': 172 },
  'SAS10/complex': { "stdout": True, 'originalBound': "462*A + 2*C + 12581", 'parsedBound': "462 * A + 2 * C + 12581", 'degree': 1.0, 'variableCount': 2, 'time': 450 },
  'SAS10/cousot9': { "stdout": True, 'originalBound': "2*A^2 + 6*A + C + 6", 'parsedBound': "2 * A^2 + 6 * A + C + 6", 'degree': 2.0, 'variableCount': 2, 'time': 167 },
  'SAS10/realheapsort': { "stdout": True, 'originalBound': "376*A + 154*A^2 + 164", 'parsedBound': "376 * A + 154 * A^2 + 164", 'degree': 2.0, 'variableCount': 1, 'time': 3873 },
  'SAS10/speedpldi3': { "stdout": True, 'originalBound': "2*A*C + 8*C + A + 9", 'parsedBound': "2 * A * C + 8 * C + A + 9", 'degree': 2.0, 'variableCount': 2, 'time': 183 },
  'SAS10/gcd': { "stdout": True, 'originalBound': "4*A + 4*C + 10", 'parsedBound': "4 * A + 4 * C + 10", 'degree': 1.0, 'variableCount': 2, 'time': 158 },
  'SAS10/sipmabubble': { "stdout": True, 'originalBound': "36*A + 24*A^2 + 16", 'parsedBound': "36 * A + 24 * A^2 + 16", 'degree': 2.0, 'variableCount': 1, 'time': 228 },
  'SAS10/loops': { "stdout": True, 'originalBound': "12*A + 4*A^2 + 7", 'parsedBound': "12 * A + 4 * A^2 + 7", 'degree': 2.0, 'variableCount': 1, 'time': 180 },
  'SAS10/speedpldi2': { "stdout": True, 'originalBound': "6*G + 12", 'parsedBound': "6 * G + 12", 'degree': 1.0, 'variableCount': 1, 'time': 160 },
  'SAS10/speedFails4': { "stdout": True, 'originalBound': "2*B + 2*C + 7", 'parsedBound': "2 * B + 2 * C + 7", 'degree': 1.0, 'variableCount': 2, 'time': 217 },
  'SAS10/ax': { "stdout": True, 'originalBound': "2*A^2 + 7*A + 5", 'parsedBound': "2 * A^2 + 7 * A + 5", 'degree': 2.0, 'variableCount': 1, 'time': 127 },
  'SAS10/nd_loop': { "stdout": True, 'originalBound': "43", 'parsedBound': "43", 'degree': 0.0, 'variableCount': 0, 'time': 75 },
  'SAS10/wise': { "stdout": True, 'originalBound': "2*A + 2*C + 8", 'parsedBound': "2 * A + 2 * C + 8", 'degree': 1.0, 'variableCount': 2, 'time': 132 },
  'SAS10/nestedLoop': { "stdout": True, 'originalBound': "12*A + 12*C + 2*E + 2*A*E + 2*C*E + 14", 'parsedBound': "12 * A + 12 * C + 2 * E + 2 * A * E + 2 * C * E + 14", 'degree': 2.0, 'variableCount': 3, 'time': 489 },
  'SAS10/speedpldi4': { "stdout": True, 'originalBound': "2*A + 2*C + 9", 'parsedBound': "2 * A + 2 * C + 9", 'degree': 1.0, 'variableCount': 2, 'time': 153 },
  'SAS10/realbubble': { "stdout": True, 'originalBound': "24*A^2 + 24*A + 9", 'parsedBound': "24 * A^2 + 24 * A + 9", 'degree': 2.0, 'variableCount': 1, 'time': 365 },
  'SAS10/wcet1': { "stdout": True, 'originalBound': "3*A + 10", 'parsedBound': "3 * A + 10", 'degree': 1.0, 'variableCount': 1, 'time': 215 },
  'SAS10/aaron2': { "stdout": True, 'originalBound': "4*A + 4*C + 4*E + 7", 'parsedBound': "4 * A + 4 * C + 4 * E + 7", 'degree': 1.0, 'variableCount': 3, 'time': 348 },
  'SAS10/determinant': { "stdout": True, 'originalBound': "20*A + 40*A^2 + 16*A^3 + 4", 'parsedBound': "20 * A + 40 * A^2 + 16 * A^3 + 4", 'degree': 3.0, 'variableCount': 1, 'time': 232 },
  'SAS10/perfect': { "stdout": True, 'originalBound': "2*A^2 + 8*A + 7", 'parsedBound': "2 * A^2 + 8 * A + 7", 'degree': 2.0, 'variableCount': 1, 'time': 249 },
  'SAS10/realselect': { "stdout": True, 'originalBound': "12*A + 7", 'parsedBound': "12 * A + 7", 'degree': 1.0, 'variableCount': 1, 'time': 286 },
  'SAS10/random1d': { "stdout": True, 'originalBound': "2*A + 5", 'parsedBound': "2 * A + 5", 'degree': 1.0, 'variableCount': 1, 'time': 122 },
  'SAS10/rsd': { "stdout": True, 'originalBound': "6*A^2 + 43*A + 9", 'parsedBound': "6 * A^2 + 43 * A + 9", 'degree': 2.0, 'variableCount': 1, 'time': 421 },
  'SAS10/wcet2': { "stdout": True, 'originalBound': "44*A + 221", 'parsedBound': "44 * A + 221", 'degree': 1.0, 'variableCount': 1, 'time': 208 },
  'SAS10/maccarthy91': { "stdout": True, 'originalBound': "836*A + 82333", 'parsedBound': "836 * A + 82333", 'degree': 1.0, 'variableCount': 1, 'time': 335 },
  'SAS10/exmini': { "stdout": True, 'originalBound': "A + E + G + 105", 'parsedBound': "A + E + G + 105", 'degree': 1.0, 'variableCount': 3, 'time': 133 },
  'SAS10/while2': { "stdout": True, 'originalBound': "7*A + 2*A^2 + 5", 'parsedBound': "7 * A + 2 * A^2 + 5", 'degree': 2.0, 'variableCount': 1, 'time': 146 },
  'costa/misc/linear': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 42 },
  'costa/misc/mspe': { "stdout": True, 'originalBound': "4*B + 4*F + 5", 'parsedBound': "4 * B + 4 * F + 5", 'degree': 1.0, 'variableCount': 2, 'time': 108 },
  'costa/misc/ack': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 798 },
  'costa/misc/ms': { "stdout": True, 'originalBound': "6*A + 6", 'parsedBound': "6 * A + 6", 'degree': 1.0, 'variableCount': 1, 'time': 48 },
  'costa/misc/quadratic': { "stdout": True, 'originalBound': "6*A + 6*A^2", 'parsedBound': "6 * A + 6 * A^2", 'degree': 2.0, 'variableCount': 1, 'time': 58 },
  'costa/misc/n_log_n': { "stdout": True, 'originalBound': "0", 'parsedBound': "0", 'degree': 0.0, 'variableCount': 0, 'time': 43 },
  'costa/misc/merge': { "stdout": True, 'originalBound': "2*A + 2*B + 1", 'parsedBound': "2 * A + 2 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 63 },
  'costa/misc/direct_n_log_n': { "stdout": True, 'originalBound': "4*A + 3", 'parsedBound': "4 * A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 51 },
  'costa/misc/divide_and_conquer': { "stdout": True, 'originalBound': "6*A", 'parsedBound': "6 * A", 'degree': 1.0, 'variableCount': 1, 'time': 47 },
  'costa/misc/no_cover_point': { "stdout": True, 'originalBound': "POW(2, A + 1)", 'parsedBound': "pow(2, A + 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 182 },
  'costa/misc/exponential': { "stdout": True, 'originalBound': "POW(2, A + 1)", 'parsedBound': "pow(2, A + 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 116 },
  'costa/misc/logarithmic': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 35 },
  'costa/RAML/dyade': { "stdout": True, 'originalBound': "6*A + 2*A*C", 'parsedBound': "6 * A + 2 * A * C", 'degree': 2.0, 'variableCount': 2, 'time': 58 },
  'costa/RAML/duplicates': { "stdout": True, 'originalBound': "B", 'parsedBound': "B", 'degree': 1.0, 'variableCount': 1, 'time': 58 },
  'costa/RAML/rationalPotential': { "stdout": True, 'originalBound': "C + 1", 'parsedBound': "C + 1", 'degree': 1.0, 'variableCount': 1, 'time': 71 },
  'costa/RAML/bitvectors': { "stdout": True, 'originalBound': "18*A*B + 30*A", 'parsedBound': "18 * A * B + 30 * A", 'degree': 2.0, 'variableCount': 2, 'time': 149 },
  'costa/RAML/cleavermmult': { "stdout": True, 'originalBound': "4*A*B*C + 4*A*B*D + 6*B*C + 6*B*D + 6*B", 'parsedBound': "4 * A * B * C + 4 * A * B * D + 6 * B * C + 6 * B * D + 6 * B", 'degree': 3.0, 'variableCount': 4, 'time': 137 },
  'costa/RAML/quicksort': { "stdout": True, 'originalBound': "13 * POW(4, 2*A + 1) + 2 * POW(4, 2*A + 1) + 2 * POW(4, 2*A + 1)", 'parsedBound': "13 * pow(4, 2 * A + 1) + 2 * pow(4, 2 * A + 1) + 2 * pow(4, 2 * A + 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 3373 },
  'costa/RAML/matrix': { "stdout": True, 'originalBound': "4*A^2*D + 4*A*B*D + 4*A*C*D + 2*B*C*D + C^2*D + 16*A^2 + 16*A*B + 16*A*C + 8*B*C + 4*C^2 + 14*A + 14*B + 7*C + 5", 'parsedBound': "4 * A^2 * D + 4 * A * B * D + 4 * A * C * D + 2 * B * C * D + C^2 * D + 16 * A^2 + 16 * A * B + 16 * A * C + 8 * B * C + 4 * C^2 + 14 * A + 14 * B + 7 * C + 5", 'degree': 3.0, 'variableCount': 4, 'time': 253 },
  'costa/RAML/minsort': { "stdout": True, 'originalBound': "65*A + 6*A^2 + 31", 'parsedBound': "65 * A + 6 * A^2 + 31", 'degree': 2.0, 'variableCount': 1, 'time': 63 },
  'costa/RAML/insertionsort': { "stdout": True, 'originalBound': "69*B + 6*B^2 + 33", 'parsedBound': "69 * B + 6 * B^2 + 33", 'degree': 2.0, 'variableCount': 1, 'time': 60 },
  'costa/RAML/lcs': { "stdout": True, 'originalBound': "100*A*B + 50*B + 8*A + 4", 'parsedBound': "100 * A * B + 50 * B + 8 * A + 4", 'degree': 2.0, 'variableCount': 2, 'time': 219 },
  'costa/RAML/eratosthenes': { "stdout": True, 'originalBound': "6*A^2 + 12*A", 'parsedBound': "6 * A^2 + 12 * A", 'degree': 2.0, 'variableCount': 1, 'time': 63 },
  'costa/RAML/mergesort': { "stdout": True, 'originalBound': "2 * POW(4, 38*A + 69) + 114*A + 171", 'parsedBound': "2 * pow(4, 38 * A + 69) + 114 * A + 171", 'degree': 10000.0, 'variableCount': 1, 'time': 1911 },
  'costa/RAML/listsort': { "stdout": True, 'originalBound': "1260*C + 72*C^2 + 24*A*C^2 + 419*A*C + 137*A + 412", 'parsedBound': "1260 * C + 72 * C^2 + 24 * A * C^2 + 419 * A * C + 137 * A + 412", 'degree': 3.0, 'variableCount': 2, 'time': 109 },
  'costa/jvm-cost/Matrixinverse': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60057 },
  'costa/jvm-cost/Hanoi': { "stdout": True, 'originalBound': "6 * POW(3, A + 1) + 7 * POW(3, A + 1) + 2 * POW(3, A + 1)", 'parsedBound': "6 * pow(3, A + 1) + 7 * pow(3, A + 1) + 2 * pow(3, A + 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 1099 },
  'costa/jvm-cost/Factorial': { "stdout": True, 'originalBound': "7*A + 12", 'parsedBound': "7 * A + 12", 'degree': 1.0, 'variableCount': 1, 'time': 48 },
  'costa/jvm-cost/FactSumNew': { "stdout": True, 'originalBound': "180*B^2 + 450*B + 276", 'parsedBound': "180 * B^2 + 450 * B + 276", 'degree': 2.0, 'variableCount': 1, 'time': 464 },
  'costa/jvm-cost/Power': { "stdout": True, 'originalBound': "7*A + 12", 'parsedBound': "7 * A + 12", 'degree': 1.0, 'variableCount': 1, 'time': 50 },
  'costa/jvm-cost/FibonacciNew': { "stdout": True, 'originalBound': "3 * 4 * POW(2, B + 1) + 3 * POW(2, B + 1)", 'parsedBound': "12 * pow(2, B + 1) + 3 * pow(2, B + 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 1503 },
  'costa/jvm-cost/FactSum': { "stdout": True, 'originalBound': "5 * POW(2, A + 1) + 125*A + 149", 'parsedBound': "5 * pow(2, A + 1) + 125 * A + 149", 'degree': 10000.0, 'variableCount': 1, 'time': 898 },
  'costa/jvm-cost/MatMult': { "stdout": True, 'originalBound': "14 * POW(2, 2*B + 4) + 12 * POW(2, 2*B + 4) + 9 * POW(2, 2*B + 4) + 6 * POW(2, 2*B + 4) + 3 * POW(2, 2*B + 4) + POW(2, 2*B + 4) * (4*A + 4*C) + POW(2, 2*B + 4) * (3*A + 15) + POW(2, 2*B + 4) + 3 * 2 * POW(2, 2*B + 4) + 2", 'parsedBound': "14 * pow(2, 2 * B + 4) + 12 * pow(2, 2 * B + 4) + 9 * pow(2, 2 * B + 4) + 6 * pow(2, 2 * B + 4) + 3 * pow(2, 2 * B + 4) + pow(2, 2 * B + 4) * (4 * A + 4 * C) + pow(2, 2 * B + 4) * (3 * A + 15) + pow(2, 2 * B + 4) + 6 * pow(2, 2 * B + 4) + 2", 'degree': 10001.0, 'variableCount': 3, 'time': 9140 },
  'costa/jvm-cost/BST': { "stdout": True, 'originalBound': "3 * 3 * POW(3, 7*A + 7) + 4 * POW(3, 7*A + 7) + 2 * POW(3, 7*A + 7) + 15 * POW(3, 7*A + 7)", 'parsedBound': "9 * pow(3, 7 * A + 7) + 4 * pow(3, 7 * A + 7) + 2 * pow(3, 7 * A + 7) + 15 * pow(3, 7 * A + 7)", 'degree': 10000.0, 'variableCount': 1, 'time': 12037 },
  'costa/jvm-cost/EvenDigits': { "stdout": True, 'originalBound': "159*A", 'parsedBound': "159 * A", 'degree': 1.0, 'variableCount': 1, 'time': 781 },
  'costa/jvm-cost/Delete': { "stdout": True, 'originalBound': "3 * POW(3, 3*E + 3*F + 1) + 2 * POW(3, 3*E + 3*F + 1) + 448*D + 418", 'parsedBound': "3 * pow(3, 3 * E + 3 * F + 1) + 2 * pow(3, 3 * E + 3 * F + 1) + 448 * D + 418", 'degree': 10000.0, 'variableCount': 3, 'time': 12290 },
  'costa/jvm-cost/ms': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 26271 },
  'costa/jvm-cost/Fibonacci': { "stdout": True, 'originalBound': "3 * 6 * POW(3, 2*A + 1) + POW(3, 2*A + 1)", 'parsedBound': "18 * pow(3, 2 * A + 1) + pow(3, 2 * A + 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 1122 },
  'costa/jvm-cost/SelectOrd': { "stdout": True, 'originalBound': "60*A^2 + 60*A*D + 47*A + 20*D + 15", 'parsedBound': "60 * A^2 + 60 * A * D + 47 * A + 20 * D + 15", 'degree': 2.0, 'variableCount': 2, 'time': 2382 },
  'costa/jvm-cost/ListInter': { "stdout": True, 'originalBound': "270*A*B + 300*A + 792*B + 885", 'parsedBound': "270 * A * B + 300 * A + 792 * B + 885", 'degree': 2.0, 'variableCount': 2, 'time': 501 },
  'costa/jvm-cost/ArrayReverse': { "stdout": True, 'originalBound': "3 * POW(2, A + 1) + 222", 'parsedBound': "3 * pow(2, A + 1) + 222", 'degree': 10000.0, 'variableCount': 1, 'time': 429 },
  'costa/jvm-cost/EvenDigitsNew': { "stdout": True, 'originalBound': "198*F^2 + 216*F + 24", 'parsedBound': "198 * F^2 + 216 * F + 24", 'degree': 2.0, 'variableCount': 1, 'time': 770 },
  'costa/jvm-cost/Concat': { "stdout": True, 'originalBound': "16*A + 16*B + 29", 'parsedBound': "16 * A + 16 * B + 29", 'degree': 1.0, 'variableCount': 2, 'time': 70 },
  'costa/jvm-cost/MergeList': { "stdout": True, 'originalBound': "260*A + 286*B + 104", 'parsedBound': "260 * A + 286 * B + 104", 'degree': 1.0, 'variableCount': 2, 'time': 337 },
  'costa/jvm-cost/LinEqSolve': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60047 },
  'costa/jvm-cost/Cons': { "stdout": True, 'originalBound': "299*A + 92", 'parsedBound': "299 * A + 92", 'degree': 1.0, 'variableCount': 1, 'time': 132 },
  'costa/jvm-cost/DivByTwo': { "stdout": True, 'originalBound': "12*A + 5", 'parsedBound': "12 * A + 5", 'degree': 1.0, 'variableCount': 1, 'time': 45 },
  'costa/jvm-cost/Incr': { "stdout": True, 'originalBound': "200*A + 605", 'parsedBound': "200 * A + 605", 'degree': 1.0, 'variableCount': 1, 'time': 181 },
  'costa/jvm-cost/DetEval': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60046 },
  'costa/jvm-cost/ListReverse': { "stdout": True, 'originalBound': "3*B + 5", 'parsedBound': "3 * B + 5", 'degree': 1.0, 'variableCount': 1, 'time': 55 },
  'costa/jvm-cost/Polynomial': { "stdout": True, 'originalBound': "105", 'parsedBound': "105", 'degree': 0.0, 'variableCount': 0, 'time': 126 },
  'c-examples/ABC/ex01': { "stdout": True, 'originalBound': "2*A + 2*B + 6", 'parsedBound': "2 * A + 2 * B + 6", 'degree': 1.0, 'variableCount': 2, 'time': 49 },
  'c-examples/ABC/ex09': { "stdout": True, 'originalBound': "9*B + 2*B*D + 4", 'parsedBound': "9 * B + 2 * B * D + 4", 'degree': 2.0, 'variableCount': 2, 'time': 86 },
  'c-examples/ABC/ex04': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 4985 },
  'c-examples/ABC/ex08': { "stdout": True, 'originalBound': "7*A + 2*A*B + 2*B + 11", 'parsedBound': "7 * A + 2 * A * B + 2 * B + 11", 'degree': 2.0, 'variableCount': 2, 'time': 77 },
  'c-examples/ABC/ex10': { "stdout": True, 'originalBound': "9*A + 2*A*B + 2*B + 13", 'parsedBound': "9 * A + 2 * A * B + 2 * B + 13", 'degree': 2.0, 'variableCount': 2, 'time': 79 },
  'c-examples/ABC/ex12': { "stdout": True, 'originalBound': "7*A + 4*A*B + 4*B + 11", 'parsedBound': "7 * A + 4 * A * B + 4 * B + 11", 'degree': 2.0, 'variableCount': 2, 'time': 80 },
  'c-examples/ABC/ex14': { "stdout": True, 'originalBound': "227895*A + 239753*A*B + 106031*B + 166582*A^2*B + 150116*A^2 + 54594*A^2*B^2 + 70968*A*B^2 + 29482*B^2 + 35100*A^3*B + 28200*A^3 + 14212*A^3*B^2 + 1104*A^4*B^2 + 2240*A^4*B + 224*A^4*B^3 + 1984*A^3*B^3 + 4608*A^2*B^3 + 4160*A*B^3 + 1600*A^4 + 16*A^4*B^4 + 64*A^3*B^4 + 96*A^2*B^4 + 64*A*B^4 + 16*B^4 + 1312*B^3 + 104383", 'parsedBound': "227895 * A + 239753 * A * B + 106031 * B + 166582 * A^2 * B + 150116 * A^2 + 54594 * A^2 * B^2 + 70968 * A * B^2 + 29482 * B^2 + 35100 * A^3 * B + 28200 * A^3 + 14212 * A^3 * B^2 + 1104 * A^4 * B^2 + 2240 * A^4 * B + 224 * A^4 * B^3 + 1984 * A^3 * B^3 + 4608 * A^2 * B^3 + 4160 * A * B^3 + 1600 * A^4 + 16 * A^4 * B^4 + 64 * A^3 * B^4 + 96 * A^2 * B^4 + 64 * A * B^4 + 16 * B^4 + 1312 * B^3 + 104383", 'degree': 8.0, 'variableCount': 2, 'time': 207 },
  'c-examples/ABC/ex02': { "stdout": True, 'originalBound': "27*B + 4*B^2 + 27", 'parsedBound': "27 * B + 4 * B^2 + 27", 'degree': 2.0, 'variableCount': 1, 'time': 80 },
  'c-examples/ABC/ex06': { "stdout": True, 'originalBound': "27*B + 6*B^2 + 4", 'parsedBound': "27 * B + 6 * B^2 + 4", 'degree': 2.0, 'variableCount': 1, 'time': 81 },
  'c-examples/ABC/ex07': { "stdout": True, 'originalBound': "9*B + 2*B*D + 4", 'parsedBound': "9 * B + 2 * B * D + 4", 'degree': 2.0, 'variableCount': 2, 'time': 86 },
  'c-examples/ABC/ex03': { "stdout": True, 'originalBound': "134*B + 464*B^2 + 692*B^3 + 472*B^4 + 16*B^6 + 144*B^5 + 4", 'parsedBound': "134 * B + 464 * B^2 + 692 * B^3 + 472 * B^4 + 16 * B^6 + 144 * B^5 + 4", 'degree': 6.0, 'variableCount': 1, 'time': 199 },
  'c-examples/ABC/ex05': { "stdout": True, 'originalBound': "17*B + 4*B^2 + 4", 'parsedBound': "17 * B + 4 * B^2 + 4", 'degree': 2.0, 'variableCount': 1, 'time': 79 },
  'c-examples/ABC/ex15': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2656 },
  'c-examples/ABC/ex13': { "stdout": True, 'originalBound': "113*A + 113*B + 124*A*D + 124*B*D + 128*A*C + 128*B*C + 96*D + 100*C + 28*A^2*D + 56*A*B*D + 28*A^2*C + 56*A*B*C + 20*A^2 + 40*A*B + 28*B^2*D + 28*B^2*C + 20*B^2 + 36*A*C*D + 36*B*C*D + 20*A*C^2 + 20*B*C^2 + 20*C*D + 12*C^2 + 8*A^2*D^2 + 16*A*B*D^2 + 16*A^2*C*D + 32*A*B*C*D + 16*A*D^2 + 8*B^2*D^2 + 16*B^2*C*D + 16*B*D^2 + 8*A^2*C^2 + 16*A*B*C^2 + 8*B^2*C^2 + 8*D^2 + 97", 'parsedBound': "113 * A + 113 * B + 124 * A * D + 124 * B * D + 128 * A * C + 128 * B * C + 96 * D + 100 * C + 28 * A^2 * D + 56 * A * B * D + 28 * A^2 * C + 56 * A * B * C + 20 * A^2 + 40 * A * B + 28 * B^2 * D + 28 * B^2 * C + 20 * B^2 + 36 * A * C * D + 36 * B * C * D + 20 * A * C^2 + 20 * B * C^2 + 20 * C * D + 12 * C^2 + 8 * A^2 * D^2 + 16 * A * B * D^2 + 16 * A^2 * C * D + 32 * A * B * C * D + 16 * A * D^2 + 8 * B^2 * D^2 + 16 * B^2 * C * D + 16 * B * D^2 + 8 * A^2 * C^2 + 16 * A * B * C^2 + 8 * B^2 * C^2 + 8 * D^2 + 97", 'degree': 4.0, 'variableCount': 4, 'time': 185 },
  'c-examples/ABC/ex11': { "stdout": True, 'originalBound': "7*A + 2*A*B + 2*B + 11", 'parsedBound': "7 * A + 2 * A * B + 2 * B + 11", 'degree': 2.0, 'variableCount': 2, 'time': 78 },
  'c-examples/WTC/random2d': { "stdout": True, 'originalBound': "27*B + 4", 'parsedBound': "27 * B + 4", 'degree': 1.0, 'variableCount': 1, 'time': 219 },
  'c-examples/WTC/terminate': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 207", 'parsedBound': "2 * A + 2 * B + 2 * C + 207", 'degree': 1.0, 'variableCount': 3, 'time': 54 },
  'c-examples/WTC/ndecr': { "stdout": True, 'originalBound': "2*A + 4", 'parsedBound': "2 * A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 49 },
  'c-examples/WTC/easy2': { "stdout": True, 'originalBound': "2*A + 4", 'parsedBound': "2 * A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 47 },
  'c-examples/WTC/insertsort': { "stdout": True, 'originalBound': "41*B + 6*B^2 + 4", 'parsedBound': "41 * B + 6 * B^2 + 4", 'degree': 2.0, 'variableCount': 1, 'time': 103 },
  'c-examples/WTC/realshellsort': { "stdout": True, 'originalBound': "22*A + 34*A^2 + 18*A^3 + 8", 'parsedBound': "22 * A + 34 * A^2 + 18 * A^3 + 8", 'degree': 3.0, 'variableCount': 1, 'time': 385 },
  'c-examples/WTC/easy1': { "stdout": True, 'originalBound': "284", 'parsedBound': "284", 'degree': 0.0, 'variableCount': 0, 'time': 65 },
  'c-examples/WTC/complex': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'c-examples/WTC/cousot9': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1078 },
  'c-examples/WTC/realheapsort': { "stdout": True, 'originalBound': "967*A + 156*A^2 + 1547", 'parsedBound': "967 * A + 156 * A^2 + 1547", 'degree': 2.0, 'variableCount': 1, 'time': 876 },
  'c-examples/WTC/speedpldi3': { "stdout": True, 'originalBound': "6*B + 12*A + 12*A*B + 10", 'parsedBound': "6 * B + 12 * A + 12 * A * B + 10", 'degree': 2.0, 'variableCount': 2, 'time': 234 },
  'c-examples/WTC/gcd': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1213 },
  'c-examples/WTC/sipmabubble': { "stdout": True, 'originalBound': "75*A + 30*A^2 + 49", 'parsedBound': "75 * A + 30 * A^2 + 49", 'degree': 2.0, 'variableCount': 1, 'time': 132 },
  'c-examples/WTC/loops': { "stdout": True, 'originalBound': "102*A + 24*A^2 + 83", 'parsedBound': "102 * A + 24 * A^2 + 83", 'degree': 2.0, 'variableCount': 1, 'time': 189 },
  'c-examples/WTC/speedpldi2': { "stdout": True, 'originalBound': "20*A + 10", 'parsedBound': "20 * A + 10", 'degree': 1.0, 'variableCount': 1, 'time': 136 },
  'c-examples/WTC/sipma91': { "stdout": True, 'originalBound': "3678*A + 18*A^2 + 187887", 'parsedBound': "3678 * A + 18 * A^2 + 187887", 'degree': 2.0, 'variableCount': 1, 'time': 380 },
  'c-examples/WTC/speedFails4': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1362 },
  'c-examples/WTC/ax': { "stdout": True, 'originalBound': "5*C + 2*C^2 + 7", 'parsedBound': "5 * C + 2 * C^2 + 7", 'degree': 2.0, 'variableCount': 1, 'time': 84 },
  'c-examples/WTC/nd_loop': { "stdout": True, 'originalBound': "15", 'parsedBound': "15", 'degree': 0.0, 'variableCount': 0, 'time': 49 },
  'c-examples/WTC/wise': { "stdout": True, 'originalBound': "18*B + 18*A + 15", 'parsedBound': "18 * B + 18 * A + 15", 'degree': 1.0, 'variableCount': 2, 'time': 155 },
  'c-examples/WTC/nestedLoop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60039 },
  'c-examples/WTC/speedpldi4': { "stdout": True, 'originalBound': "15*B + 6", 'parsedBound': "15 * B + 6", 'degree': 1.0, 'variableCount': 1, 'time': 138 },
  'c-examples/WTC/counterex1b': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2872 },
  'c-examples/WTC/realbubble': { "stdout": True, 'originalBound': "115*A + 24*A^2 + 5", 'parsedBound': "115 * A + 24 * A^2 + 5", 'degree': 2.0, 'variableCount': 1, 'time': 126 },
  'c-examples/WTC/realheapsort_step1': { "stdout": True, 'originalBound': "36*A^2 + 193*A + 5", 'parsedBound': "36 * A^2 + 193 * A + 5", 'degree': 2.0, 'variableCount': 1, 'time': 198 },
  'c-examples/WTC/wcet1': { "stdout": True, 'originalBound': "11*A + 15", 'parsedBound': "11 * A + 15", 'degree': 1.0, 'variableCount': 1, 'time': 113 },
  'c-examples/WTC/aaron2': { "stdout": True, 'originalBound': "7*B + 7*C + 13", 'parsedBound': "7 * B + 7 * C + 13", 'degree': 1.0, 'variableCount': 2, 'time': 98 },
  'c-examples/WTC/perfect': { "stdout": True, 'originalBound': "13*A + 8*A^2 + 9", 'parsedBound': "13 * A + 8 * A^2 + 9", 'degree': 2.0, 'variableCount': 1, 'time': 317 },
  'c-examples/WTC/realselect': { "stdout": True, 'originalBound': "36*B + 36*B^2 + 12", 'parsedBound': "36 * B + 36 * B^2 + 12", 'degree': 2.0, 'variableCount': 1, 'time': 207 },
  'c-examples/WTC/random1d': { "stdout": True, 'originalBound': "4*A + 5", 'parsedBound': "4 * A + 5", 'degree': 1.0, 'variableCount': 1, 'time': 62 },
  'c-examples/WTC/rsd': { "stdout": True, 'originalBound': "46*A + 48*A^2 + 19", 'parsedBound': "46 * A + 48 * A^2 + 19", 'degree': 2.0, 'variableCount': 1, 'time': 292 },
  'c-examples/WTC/wcet2': { "stdout": True, 'originalBound': "56*A + 256", 'parsedBound': "56 * A + 256", 'degree': 1.0, 'variableCount': 1, 'time': 77 },
  'c-examples/WTC/realheapsort_step2': { "stdout": True, 'originalBound': "86*A + 120*A^2 + 6", 'parsedBound': "86 * A + 120 * A^2 + 6", 'degree': 2.0, 'variableCount': 1, 'time': 458 },
  'c-examples/WTC/exmini': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 207", 'parsedBound': "2 * A + 2 * B + 2 * C + 207", 'degree': 1.0, 'variableCount': 3, 'time': 55 },
  'c-examples/WTC/while2': { "stdout": True, 'originalBound': "9*B + 2*B^2 + 11", 'parsedBound': "9 * B + 2 * B^2 + 11", 'degree': 2.0, 'variableCount': 1, 'time': 74 },
  'c-examples/Rank/ex3': { "stdout": True, 'originalBound': "128*B + 12", 'parsedBound': "128 * B + 12", 'degree': 1.0, 'variableCount': 1, 'time': 500 },
  'c-examples/Rank/ex1': { "stdout": True, 'originalBound': "756*B + 432*B^2 + 330", 'parsedBound': "756 * B + 432 * B^2 + 330", 'degree': 2.0, 'variableCount': 1, 'time': 2517 },
  'c-examples/Rank/ex2': { "stdout": True, 'originalBound': "32*B + 12", 'parsedBound': "32 * B + 12", 'degree': 1.0, 'variableCount': 1, 'time': 316 },
  'c-examples/SPEED/PLDI09/NestedLoop': { "stdout": True, 'originalBound': "15*A + 8*C + 22*A*B + 22*B + 20", 'parsedBound': "15 * A + 8 * C + 22 * A * B + 22 * B + 20", 'degree': 2.0, 'variableCount': 3, 'time': 1072 },
  'c-examples/SPEED/PLDI09/Example6': { "stdout": True, 'originalBound': "10*D + 2*G + 4", 'parsedBound': "10 * D + 2 * G + 4", 'degree': 1.0, 'variableCount': 2, 'time': 156 },
  'c-examples/SPEED/PLDI09/cyclic': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1531 },
  'c-examples/SPEED/PLDI09/Example2': { "stdout": True, 'originalBound': "42*A + 11", 'parsedBound': "42 * A + 11", 'degree': 1.0, 'variableCount': 1, 'time': 156 },
  'c-examples/SPEED/PLDI09/Example3': { "stdout": True, 'originalBound': "20*B + 10*A + 20*A*B + 13", 'parsedBound': "20 * B + 10 * A + 20 * A * B + 13", 'degree': 2.0, 'variableCount': 2, 'time': 294 },
  'c-examples/SPEED/PLDI09/Example5': { "stdout": True, 'originalBound': "36*A*B + 18*A^2 + 18*B^2 + 18*B + 18*A + 5", 'parsedBound': "36 * A * B + 18 * A^2 + 18 * B^2 + 18 * B + 18 * A + 5", 'degree': 2.0, 'variableCount': 2, 'time': 222 },
  'c-examples/SPEED/PLDI09/Example4': { "stdout": True, 'originalBound': "32*B^2 + 32*A*B + 10*B + 6", 'parsedBound': "32 * B^2 + 32 * A * B + 10 * B + 6", 'degree': 2.0, 'variableCount': 2, 'time': 532 },
  'c-examples/SPEED/POPL09/NestedMultiple': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1028 },
  'c-examples/SPEED/POPL09/SimpleSingle2': { "stdout": True, 'originalBound': "6*D + 6*C + 21", 'parsedBound': "6 * D + 6 * C + 21", 'degree': 1.0, 'variableCount': 2, 'time': 104 },
  'c-examples/SPEED/POPL09/SimpleMultiple': { "stdout": True, 'originalBound': "6*C + 3*D + 8", 'parsedBound': "6 * C + 3 * D + 8", 'degree': 1.0, 'variableCount': 2, 'time': 168 },
  'c-examples/SPEED/POPL09/SimpleMultipleDep': { "stdout": True, 'originalBound': "6*C + 6*D + 12*C*D + 5", 'parsedBound': "6 * C + 6 * D + 12 * C * D + 5", 'degree': 2.0, 'variableCount': 2, 'time': 195 },
  'c-examples/SPEED/POPL09/SimpleSingle': { "stdout": True, 'originalBound': "2*B + 6", 'parsedBound': "2 * B + 6", 'degree': 1.0, 'variableCount': 1, 'time': 46 },
  'c-examples/SPEED/POPL09/SequentialSingle': { "stdout": True, 'originalBound': "7*B + 13", 'parsedBound': "7 * B + 13", 'degree': 1.0, 'variableCount': 1, 'time': 68 },
  'c-examples/SPEED/POPL09/NestedMultipleDep': { "stdout": True, 'originalBound': "25*B + 10*B*E + 8*E + 24", 'parsedBound': "25 * B + 10 * B * E + 8 * E + 24", 'degree': 2.0, 'variableCount': 2, 'time': 281 },
  'c-examples/SPEED/POPL09/NestedSingle': { "stdout": True, 'originalBound': "24*B + 28", 'parsedBound': "24 * B + 28", 'degree': 1.0, 'variableCount': 1, 'time': 2219 },
  'c-examples/SPEED/POPL09/Dis1': { "stdout": True, 'originalBound': "6*A + 6*B + 3*C + 3*D + 8", 'parsedBound': "6 * A + 6 * B + 3 * C + 3 * D + 8", 'degree': 1.0, 'variableCount': 4, 'time': 131 },
  'c-examples/SPEED/POPL09/Dis2': { "stdout": True, 'originalBound': "12*B + 6*C + 6*A + 5", 'parsedBound': "12 * B + 6 * C + 6 * A + 5", 'degree': 1.0, 'variableCount': 3, 'time': 123 },
  'c-examples/SPEED/CAV09/ex3': { "stdout": True, 'originalBound': "36*B + 41", 'parsedBound': "36 * B + 41", 'degree': 1.0, 'variableCount': 1, 'time': 2253 },
  'c-examples/SPEED/CAV09/ex1': { "stdout": True, 'originalBound': "3*C + 605", 'parsedBound': "3 * C + 605", 'degree': 1.0, 'variableCount': 1, 'time': 164 },
  'c-examples/SPEED/CAV09/ex2': { "stdout": True, 'originalBound': "6*C + 6*D + 12*C*D + 5", 'parsedBound': "6 * C + 6 * D + 12 * C * D + 5", 'degree': 2.0, 'variableCount': 2, 'time': 196 },
  'c-examples/SPEED/PLDI10/Ex3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1258 },
  'c-examples/SPEED/PLDI10/Ex1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2637 },
  'c-examples/SPEED/PLDI10/Ex5': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2290 },
  'c-examples/SPEED/PLDI10/Ex6': { "stdout": True, 'originalBound': "6*B + 12*C + 6*A + 5", 'parsedBound': "6 * B + 12 * C + 6 * A + 5", 'degree': 1.0, 'variableCount': 3, 'time': 131 },
  'c-examples/SPEED/PLDI10/Ex2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1961 },
  'c-examples/SPEED/PLDI10/Ex4': { "stdout": True, 'originalBound': "75*A + 39", 'parsedBound': "75 * A + 39", 'degree': 1.0, 'variableCount': 1, 'time': 274 },
  'c-examples/SPEED/PLDI10/Ex7': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 756 },
  'c-examples/Loopus/Example1': { "stdout": True, 'originalBound': "80*B + 14", 'parsedBound': "80 * B + 14", 'degree': 1.0, 'variableCount': 1, 'time': 349 },
  'c-examples/Loopus/Example2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 15395 },
  'c-examples/Loopus/Example3': { "stdout": True, 'originalBound': "4593*A + 1171220", 'parsedBound': "4593 * A + 1171220", 'degree': 1.0, 'variableCount': 1, 'time': 229 },
  'KoAT-2014/scaling-doubly-exp-growth': { "stdout": True, 'originalBound': "2 * POW(2, A) + 2 * POW(2, 2 * POW(2, A) + 2) + A + 9", 'parsedBound': "2 * pow(2, A) + 2 * pow(2, 2 * pow(2, A) + 2) + A + 9", 'degree': 100000000.0, 'variableCount': 1, 'time': 133 },
  'KoAT-2014/adding-exp-growth1': { "stdout": True, 'originalBound': "POW(2, A) + A + 3", 'parsedBound': "pow(2, A) + A + 3", 'degree': 10000.0, 'variableCount': 1, 'time': 83 },
  'KoAT-2014/scaling-exp-growth': { "stdout": True, 'originalBound': "POW(2, B) * (A) + B + A + 2", 'parsedBound': "pow(2, B) * A + B + A + 2", 'degree': 10001.0, 'variableCount': 2, 'time': 83 },
  'KoAT-2014/adding-exp-growth3': { "stdout": True, 'originalBound': "POW(2, A) + 2*A + 3", 'parsedBound': "pow(2, A) + 2 * A + 3", 'degree': 10000.0, 'variableCount': 1, 'time': 88 },
  'KoAT-2014/exp-calls': { "stdout": True, 'originalBound': "POW(2, A + 1)", 'parsedBound': "pow(2, A + 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 94 },
  'KoAT-2014/adding-exp-growth2': { "stdout": True, 'originalBound': "POW(2, C) * POW(2, C) + C + 3", 'parsedBound': "pow(2, C) * pow(2, C) + C + 3", 'degree': 20000.0, 'variableCount': 1, 'time': 107 },
  'KoAT-2014/nesting-ex1': { "stdout": True, 'originalBound': "13*B + 12*B^2 + 5*B^3 + 4", 'parsedBound': "13 * B + 12 * B^2 + 5 * B^3 + 4", 'degree': 3.0, 'variableCount': 1, 'time': 355 },
  'FGPSF09/TACAS01/terminate': { "stdout": True, 'originalBound': "A + B + C + 102", 'parsedBound': "A + B + C + 102", 'degree': 1.0, 'variableCount': 3, 'time': 59 },
  'FGPSF09/SAS05/c.02': { "stdout": True, 'originalBound': "128*A + 6*A^2 + 233", 'parsedBound': "128 * A + 6 * A^2 + 233", 'degree': 2.0, 'variableCount': 1, 'time': 72 },
  'FGPSF09/PLDI06/c.03': { "stdout": True, 'originalBound': "2*A + B + C + 1", 'parsedBound': "2 * A + B + C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 60 },
  'FGPSF09/PLDI06/c.04': { "stdout": True, 'originalBound': "A + B + 2", 'parsedBound': "A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 62 },
  'FGPSF09/VMCAI04/complete1': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 61 },
  'FGPSF09/VMCAI04/complete2': { "stdout": True, 'originalBound': "5", 'parsedBound': "5", 'degree': 0.0, 'variableCount': 0, 'time': 100 },
  'FGPSF09/VMCAI04/complete4': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 724 },
  'FGPSF09/VMCAI04/complete3': { "stdout": True, 'originalBound': "16*A + 4*A^2 + 13", 'parsedBound': "16 * A + 4 * A^2 + 13", 'degree': 2.0, 'variableCount': 1, 'time': 122 },
  'FGPSF09/ESOP08/abstractions': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 797 },
  'FGPSF09/CAV02/practical2': { "stdout": True, 'originalBound': "22043*B + 2228815", 'parsedBound': "22043 * B + 2228815", 'degree': 1.0, 'variableCount': 1, 'time': 374 },
  'FGPSF09/CAV02/practical1': { "stdout": True, 'originalBound': "16*A + 4*A^2 + 13", 'parsedBound': "16 * A + 4 * A^2 + 13", 'degree': 2.0, 'variableCount': 1, 'time': 118 },
  'FGPSF09/VMCAI05/poly2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2251 },
  'FGPSF09/VMCAI05/poly1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1535 },
  'FGPSF09/VMCAI05/poly4': { "stdout": True, 'originalBound': "3*A + 3*B + 3*C + 3*D + 1", 'parsedBound': "3 * A + 3 * B + 3 * C + 3 * D + 1", 'degree': 1.0, 'variableCount': 4, 'time': 115 },
  'FGPSF09/VMCAI05/poly3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1539 },
  'FGPSF09/RTA08/round': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 114 },
  'FGPSF09/CAV05/c.05': { "stdout": True, 'originalBound': "2*A + 2*B + 1", 'parsedBound': "2 * A + 2 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 73 },
  'FGPSF09/LICS04/choice': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1150 },
  'FGPSF09/LICS04/c.01': { "stdout": True, 'originalBound': "10*A + 2*A^2 + 9", 'parsedBound': "10 * A + 2 * A^2 + 9", 'degree': 2.0, 'variableCount': 1, 'time': 77 },
  'FGPSF09/new/randomFullUpDown': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 542 },
  'FGPSF09/new/unsatCond2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 45 },
  'FGPSF09/patrs/pasta/a.06': { "stdout": True, 'originalBound': "A + B + C + 1", 'parsedBound': "A + B + C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 51 },
  'FGPSF09/patrs/pasta/a.03': { "stdout": True, 'originalBound': "58*A + 54*B + 12*A*B + 4*B^2 + 8*A^2 + 51", 'parsedBound': "58 * A + 54 * B + 12 * A * B + 4 * B^2 + 8 * A^2 + 51", 'degree': 2.0, 'variableCount': 2, 'time': 202 },
  'FGPSF09/patrs/pasta/a.07': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 51 },
  'FGPSF09/patrs/pasta/a.08': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 47 },
  'FGPSF09/patrs/pasta/a.04': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 40 },
  'FGPSF09/patrs/pasta/a.11': { "stdout": True, 'originalBound': "6*A + 4*B + 2*C + 2", 'parsedBound': "6 * A + 4 * B + 2 * C + 2", 'degree': 1.0, 'variableCount': 3, 'time': 113 },
  'FGPSF09/patrs/pasta/a.02': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 3820 },
  'FGPSF09/patrs/pasta/a.05': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 42 },
  'FGPSF09/patrs/pasta/a.10': { "stdout": True, 'originalBound': "2*A + 2*B + 2", 'parsedBound': "2 * A + 2 * B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 60 },
  'FGPSF09/patrs/pasta/a.09': { "stdout": True, 'originalBound': "A + B + 2", 'parsedBound': "A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 59 },
  'FGPSF09/patrs/pasta/a.01': { "stdout": True, 'originalBound': "4*A + 2*A^2 + 1", 'parsedBound': "4 * A + 2 * A^2 + 1", 'degree': 2.0, 'variableCount': 1, 'time': 71 },
  'FGPSF09/patrs/increase3': { "stdout": True, 'originalBound': "4*A + 2*B + 2*C + 1", 'parsedBound': "4 * A + 2 * B + 2 * C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 56 },
  'FGPSF09/patrs/sqrt': { "stdout": True, 'originalBound': "D + 2", 'parsedBound': "D + 2", 'degree': 1.0, 'variableCount': 1, 'time': 64 },
  'FGPSF09/patrs/div': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 51 },
  'FGPSF09/patrs/sumto_no_if': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 43 },
  'FGPSF09/patrs/increase4': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 45 },
  'FGPSF09/patrs/random_full_no_wrap': { "stdout": True, 'originalBound': "30*B + 1", 'parsedBound': "30 * B + 1", 'degree': 1.0, 'variableCount': 1, 'time': 187 },
  'FGPSF09/patrs/random_no_wrap': { "stdout": True, 'originalBound': "18*A + 6", 'parsedBound': "18 * A + 6", 'degree': 1.0, 'variableCount': 1, 'time': 56 },
  'FGPSF09/patrs/increase2': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 1", 'parsedBound': "2 * A + 2 * B + 2 * C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 53 },
  'FGPSF09/patrs/increase1': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 41 },
  'FGPSF09/Beerendonk/07': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 31 },
  'FGPSF09/Beerendonk/01': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 40 },
  'FGPSF09/Beerendonk/16': { "stdout": True, 'originalBound': "2*A + 2*B + 1", 'parsedBound': "2 * A + 2 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 71 },
  'FGPSF09/Beerendonk/18': { "stdout": True, 'originalBound': "2*A + B + 1", 'parsedBound': "2 * A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 84 },
  'FGPSF09/Beerendonk/05': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'FGPSF09/Beerendonk/03': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 59 },
  'FGPSF09/Beerendonk/23': { "stdout": True, 'originalBound': "4*A + 5*B + C + 1", 'parsedBound': "4 * A + 5 * B + C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 191 },
  'FGPSF09/Beerendonk/13': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 55 },
  'FGPSF09/Beerendonk/06': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'FGPSF09/Beerendonk/22': { "stdout": True, 'originalBound': "4*A + B + 1", 'parsedBound': "4 * A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 65 },
  'FGPSF09/Beerendonk/21': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 54 },
  'FGPSF09/Beerendonk/17': { "stdout": True, 'originalBound': "3*A + 3*B + 1", 'parsedBound': "3 * A + 3 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 85 },
  'FGPSF09/Beerendonk/04': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'FGPSF09/Beerendonk/09': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 49 },
  'FGPSF09/Beerendonk/19': { "stdout": True, 'originalBound': "2*A + 3*B + C + 1", 'parsedBound': "2 * A + 3 * B + C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 81 },
  'FGPSF09/Beerendonk/20': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 52 },
  'FGPSF09/Beerendonk/10': { "stdout": True, 'originalBound': "4*A + 8", 'parsedBound': "4 * A + 8", 'degree': 1.0, 'variableCount': 1, 'time': 60 },
  'FGPSF09/Beerendonk/11': { "stdout": True, 'originalBound': "B + 4", 'parsedBound': "B + 4", 'degree': 1.0, 'variableCount': 1, 'time': 56 },
  'FGPSF09/Beerendonk/02': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 44 },
  'FGPSF09/Beerendonk/24': { "stdout": True, 'originalBound': "2*A + 2*B + 5", 'parsedBound': "2 * A + 2 * B + 5", 'degree': 1.0, 'variableCount': 2, 'time': 66 },
  'FGPSF09/Beerendonk/08': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 57 },
  'FGPSF09/Beerendonk/15': { "stdout": True, 'originalBound': "2*A + 2*B + 1", 'parsedBound': "2 * A + 2 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 68 },
  'KoAT-2013/sect5-len': { "stdout": True, 'originalBound': "B + 2", 'parsedBound': "B + 2", 'degree': 1.0, 'variableCount': 1, 'time': 50 },
  'KoAT-2013/sect4-facSum': { "stdout": True, 'originalBound': "60*B + 6*B^2 + 55", 'parsedBound': "60 * B + 6 * B^2 + 55", 'degree': 2.0, 'variableCount': 1, 'time': 78 },
  'KoAT-2013/sect2': { "stdout": True, 'originalBound': "5*B + 2*B^2 + 2", 'parsedBound': "5 * B + 2 * B^2 + 2", 'degree': 2.0, 'variableCount': 1, 'time': 109 },
  'KoAT-2013/sect1-lin': { "stdout": True, 'originalBound': "2*A + B + 2", 'parsedBound': "2 * A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 67 },
  'KoAT-2013/sect1-quad': { "stdout": True, 'originalBound': "2*A + B + A^2 + 2", 'parsedBound': "2 * A + B + A^2 + 2", 'degree': 2.0, 'variableCount': 2, 'time': 81 },
  'KoAT-2013/sect5-sumSum': { "stdout": True, 'originalBound': "13*B + 5*B^2 + 7", 'parsedBound': "13 * B + 5 * B^2 + 7", 'degree': 2.0, 'variableCount': 1, 'time': 270 },
  }

  data['KoAT-TACAS'] = {
  'T2/p-43': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 517 },
  'T2/dead.neg-st88b-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1397 },
  'T2/slayer-n1-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/p-33': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 211 },
  'T2/neg-e-1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/spiral': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/fast_poll': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/reverse_div4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/ctl': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 463 },
  'T2/p-36': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/jacobi.c.i.jacobi.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/consts3nt': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/pgarch': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60051 },
  'T2/d': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60053 },
  'T2/traverse_seg': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/jfdctint': { "stdout": True, 'originalBound': "94", 'parsedBound': "94", 'degree': 0.0, 'variableCount': 0, 'time': 854 },
  'T2/byron-4': { "stdout": True, 'originalBound': "2*A + 3", 'parsedBound': "2 * A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 393 },
  'T2/n-9': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 330 },
  'T2/spctrm.c.i.spctrm.pl.t2.fixed': { "stdout": True, 'originalBound': "650*A + 622*J + 504*N + 504*O + 42*P + 84*Q + 354", 'parsedBound': "650 * A + 622 * J + 504 * N + 504 * O + 42 * P + 84 * Q + 354", 'degree': 1.0, 'variableCount': 6, 'time': 26610 },
  'T2/eric1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/bf7': { "stdout": True, 'originalBound': "603", 'parsedBound': "603", 'degree': 0.0, 'variableCount': 0, 'time': 1196 },
  'T2/intSqRoot': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60053 },
  'T2/db3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60036 },
  'T2/fun2b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60050 },
  'T2/bf17': { "stdout": True, 'originalBound': "1113", 'parsedBound': "1113", 'degree': 0.0, 'variableCount': 0, 'time': 1169 },
  'T2/fun4': { "stdout": True, 'originalBound': "9*A + 18*B + 2*A^2 + 8*A*B + 8*B^2 + 22", 'parsedBound': "9 * A + 18 * B + 2 * A^2 + 8 * A * B + 8 * B^2 + 22", 'degree': 2.0, 'variableCount': 2, 'time': 594 },
  'T2/broydn.c.i.broydn.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/consts2nt': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/buggyNonTermLoop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60041 },
  'T2/heidy9': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 140 },
  'T2/p-12': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 106 },
  'T2/1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60021 },
  'T2/consts2': { "stdout": True, 'originalBound': "A + 1000", 'parsedBound': "A + 1000", 'degree': 1.0, 'variableCount': 1, 'time': 95 },
  'T2/slayer-n1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/polling.bug': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/n-5': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60049 },
  'T2/slayer-3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60039 },
  'T2/array': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 24 },
  'T2/edn': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/randomwalk_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/reverse_seg_cyclic': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/ex15': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 19 },
  'T2/agafp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60035 },
  'T2/p-8': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60023 },
  'T2/bf15': { "stdout": True, 'originalBound': "1011", 'parsedBound': "1011", 'degree': 0.0, 'variableCount': 0, 'time': 1178 },
  'T2/pearl-necklace': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/hongyi1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/p-55': { "stdout": True, 'originalBound': "202*B + 2*A + 2*A*B + 103", 'parsedBound': "202 * B + 2 * A + 2 * A * B + 103", 'degree': 2.0, 'variableCount': 2, 'time': 371 },
  'T2/p-34': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 6509 },
  'T2/dsa_test13': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 24 },
  'T2/queue_100': { "stdout": True, 'originalBound': "2789", 'parsedBound': "2789", 'degree': 0.0, 'variableCount': 0, 'time': 654 },
  'T2/simple_pre1': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 117 },
  'T2/queue_1': { "stdout": True, 'originalBound': "17", 'parsedBound': "17", 'degree': 0.0, 'variableCount': 0, 'time': 651 },
  'T2/fun5': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60058 },
  'T2/selectSort': { "stdout": True, 'originalBound': "19*C + 40*C^2 + 8", 'parsedBound': "19 * C + 40 * C^2 + 8", 'degree': 2.0, 'variableCount': 1, 'time': 868 },
  'T2/n-48': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/bitcount32': { "stdout": True, 'originalBound': "66", 'parsedBound': "66", 'degree': 0.0, 'variableCount': 0, 'time': 400 },
  'T2/destroy_seg_leak': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60077 },
  'T2/ud': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/svdcmp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/traverse_seg2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60036 },
  'T2/ex32': { "stdout": True, 'originalBound': "2003", 'parsedBound': "2003", 'degree': 0.0, 'variableCount': 0, 'time': 332 },
  'T2/p-15': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 104 },
  'T2/n-1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/matrixsqrt': { "stdout": True, 'originalBound': "71", 'parsedBound': "71", 'degree': 0.0, 'variableCount': 0, 'time': 3425 },
  'T2/n-16a': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/simpleWhile': { "stdout": True, 'originalBound': "2*C + 7", 'parsedBound': "2 * C + 7", 'degree': 1.0, 'variableCount': 1, 'time': 341 },
  'T2/1394-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/two_arrays': { "stdout": True, 'originalBound': "3187", 'parsedBound': "3187", 'degree': 0.0, 'variableCount': 0, 'time': 1005 },
  'T2/ex21': { "stdout": True, 'originalBound': "203", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 287 },
  'T2/n-16': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60227 },
  'T2/slayer-1-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60037 },
  'T2/simple_fail': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/simple_array_inversion': { "stdout": True, 'originalBound': "5", 'parsedBound': "5", 'degree': 0.0, 'variableCount': 0, 'time': 153 },
  'T2/sas2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60036 },
  'T2/ex7': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 196 },
  'T2/n-17': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/hqr.c.i.hqr.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/p-14': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 103 },
  'T2/cfg': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60042 },
  'T2/hqr.c.i.hqr.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60020 },
  'T2/simple_swap_call': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/qrdcmp': { "stdout": True, 'originalBound': "167*A + 145*B + 10*D + 12*K + 40", 'parsedBound': "167 * A + 145 * B + 10 * D + 12 * K + 40", 'degree': 1.0, 'variableCount': 4, 'time': 1964 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60046 },
  'T2/dsa_test': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/toeplz.c.i.toeplz.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/spctrm': { "stdout": True, 'originalBound': "533*D + 514*J + 231*N + 231*O + 50*Q + 249", 'parsedBound': "533 * D + 514 * J + 231 * N + 231 * O + 50 * Q + 249", 'degree': 1.0, 'variableCount': 5, 'time': 20938 },
  'T2/huh': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/bf19': { "stdout": True, 'originalBound': "1215", 'parsedBound': "1215", 'degree': 0.0, 'variableCount': 0, 'time': 1214 },
  'T2/dsa_test11': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/popl07-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 9960 },
  'T2/e-pgarch-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2582 },
  'T2/ex22': { "stdout": True, 'originalBound': "11928", 'parsedBound': "11928", 'degree': 0.0, 'variableCount': 0, 'time': 8501 },
  'T2/heidy10': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/fourn.c.i.fourn.pl.t2.fixed': { "stdout": True, 'originalBound': "A + B + 4", 'parsedBound': "A + B + 4", 'degree': 1.0, 'variableCount': 2, 'time': 702 },
  'T2/sumit': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2972 },
  'T2/mc91test': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/select': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/fun3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60045 },
  'T2/p-1b': { "stdout": True, 'originalBound': "A + B + 2", 'parsedBound': "A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 118 },
  'T2/bf14': { "stdout": True, 'originalBound': "960", 'parsedBound': "960", 'degree': 0.0, 'variableCount': 0, 'time': 1175 },
  'T2/smagillc-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 484 },
  'T2/apchildlive-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/eric': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/slayer-4-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60053 },
  'T2/consts1': { "stdout": True, 'originalBound': "301", 'parsedBound': "301", 'degree': 0.0, 'variableCount': 0, 'time': 149 },
  'T2/elmhes.c.i.elmhes.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/n-14': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 292 },
  'T2/fibcall': { "stdout": True, 'originalBound': "31", 'parsedBound': "31", 'degree': 0.0, 'variableCount': 0, 'time': 353 },
  'T2/neg-e-pgarch-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 799 },
  'T2/n-4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/ex14': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 160 },
  'T2/heidy7': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/apchild-live': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/dsa_test5': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/polyrank2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/p-7b': { "stdout": True, 'originalBound': "B + C + 3", 'parsedBound': "B + C + 3", 'degree': 1.0, 'variableCount': 2, 'time': 235 },
  'T2/firewire': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60056 },
  'T2/wtf': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60038 },
  'T2/n-33': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 358 },
  'T2/randomwalk': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60037 },
  'T2/fdct': { "stdout": True, 'originalBound': "19", 'parsedBound': "19", 'degree': 0.0, 'variableCount': 0, 'time': 564 },
  'T2/st88': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/n-32': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/crc': { "stdout": True, 'originalBound': "17*M + 17*N + 17*O + 17*P + 17*Q + 17*R + 17*S + 17*T + 17*U + 17*V + 17*W + 17*X + 17*Y + 17*Z + 17*A1 + 17*B1 + 17*C1 + 17*D1 + 17*E1 + 64431", 'parsedBound': "17 * M + 17 * N + 17 * O + 17 * P + 17 * Q + 17 * R + 17 * S + 17 * T + 17 * U + 17 * V + 17 * W + 17 * X + 17 * Y + 17 * Z + 17 * A1 + 17 * B1 + 17 * C1 + 17 * D1 + 17 * E1 + 64431", 'degree': 1.0, 'variableCount': 19, 'time': 17438 },
  'T2/slayer-n5-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/fuhs-inflasso': { "stdout": True, 'originalBound': "C^2 + 5*C + 7", 'parsedBound': "C^2 + 5 * C + 7", 'degree': 2.0, 'variableCount': 1, 'time': 291 },
  'T2/e-acqrel-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 268 },
  'T2/nakata': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60063 },
  'T2/p-52': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/ex13': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 20 },
  'T2/destroy': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60053 },
  'T2/bs': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60020 },
  'T2/s1-saved': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/p-1d': { "stdout": True, 'originalBound': "3*A + 3*B + 2", 'parsedBound': "3 * A + 3 * B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 310 },
  'T2/n-15a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 243 },
  'T2/p-9': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60042 },
  'T2/ex33': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/sequential_swap': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/n-12a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 110 },
  'T2/fourn': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/bubblesort_inner_loop': { "stdout": True, 'originalBound': "11", 'parsedBound': "11", 'degree': 0.0, 'variableCount': 0, 'time': 261 },
  'T2/ex30': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/polyrank7': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/rev_nt4': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 31 },
  'T2/fermat': { "stdout": True, 'originalBound': "15", 'parsedBound': "15", 'degree': 0.0, 'variableCount': 0, 'time': 934 },
  'T2/neg-e-popl07-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 30412 },
  'T2/non_term': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/ns': { "stdout": True, 'originalBound': "8931", 'parsedBound': "8931", 'degree': 0.0, 'variableCount': 0, 'time': 754 },
  'T2/1394-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/apchild-accepted-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/p-58': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 48 },
  'T2/efegp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60052 },
  'T2/p-16': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 96 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "167*A + 145*B + 10*D + 12*K + 41", 'parsedBound': "167 * A + 145 * B + 10 * D + 12 * K + 41", 'degree': 1.0, 'variableCount': 4, 'time': 1981 },
  'T2/st88.bug': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/janne_complex': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 8241 },
  'T2/traverse2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60033 },
  'T2/ex36': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/acqrel-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/pldi': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 927 },
  'T2/rewrite': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60041 },
  'T2/p-22': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 147 },
  'T2/dsa_test1': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 28 },
  'T2/n-37': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/7': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/fun1b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60036 },
  'T2/reverse': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60034 },
  'T2/fun1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60064 },
  'T2/fun7': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/consts3': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 95 },
  'T2/slayer-1-rf': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/slayer-n3-filtered': { "stdout": True, 'originalBound': "7", 'parsedBound': "7", 'degree': 0.0, 'variableCount': 0, 'time': 339 },
  'T2/invgen': { "stdout": True, 'originalBound': "B + 2", 'parsedBound': "B + 2", 'degree': 1.0, 'variableCount': 1, 'time': 110 },
  'T2/ex6': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 25 },
  'T2/n-8': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 349 },
  'T2/e-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/polyrank6': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60039 },
  'T2/simple_control_on_input': { "stdout": True, 'originalBound': "22", 'parsedBound': "22", 'degree': 0.0, 'variableCount': 0, 'time': 92 },
  'T2/e-popl07-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 51294 },
  'T2/p-10': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/e-pgarch-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1645 },
  'T2/ex10': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60040 },
  'T2/afagx1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 247 },
  'T2/n-6a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 280 },
  'T2/brp_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/sudoku': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/p-3': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 143 },
  'T2/matmul': { "stdout": True, 'originalBound': "14*C + 1836", 'parsedBound': "14 * C + 1836", 'degree': 1.0, 'variableCount': 1, 'time': 723 },
  'T2/6': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 119 },
  'T2/create_via_tmps': { "stdout": True, 'originalBound': "A + 4*U + 13", 'parsedBound': "A + 4 * U + 13", 'degree': 1.0, 'variableCount': 2, 'time': 3142 },
  'T2/toeplz': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60073 },
  'T2/bf8': { "stdout": True, 'originalBound': "654", 'parsedBound': "654", 'degree': 0.0, 'variableCount': 0, 'time': 1180 },
  'T2/s3-work': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60033 },
  'T2/spctrm.c.i.spctrm.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "533*D + 514*J + 231*N + 231*O + 50*Q + 249", 'parsedBound': "533 * D + 514 * J + 231 * N + 231 * O + 50 * Q + 249", 'degree': 1.0, 'variableCount': 5, 'time': 20929 },
  'T2/w1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60021 },
  'T2/curious4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/bf5': { "stdout": True, 'originalBound': "501", 'parsedBound': "501", 'degree': 0.0, 'variableCount': 0, 'time': 1172 },
  'T2/simple_pre': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/jacobi': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/p-19a': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/elmhes': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60047 },
  'T2/wrong_loop': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 919 },
  'T2/neg-pgarch-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1624 },
  'T2/polyrank4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/p-45': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 206 },
  'T2/dsa_test6': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 132 },
  'T2/neg-popl07-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 49898 },
  'T2/neg-e-acqrel-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 590 },
  'T2/p-7': { "stdout": True, 'originalBound': "B + C + 4", 'parsedBound': "B + C + 4", 'degree': 1.0, 'variableCount': 2, 'time': 245 },
  'T2/bsort100': { "stdout": True, 'originalBound': "4959205", 'parsedBound': "4959205", 'degree': 0.0, 'variableCount': 0, 'time': 866 },
  'T2/2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60117 },
  'T2/n-18': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/popl07-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 9789 },
  'T2/n-46': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/nakata_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60049 },
  'T2/n-36': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 26055 },
  'T2/heidy2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/tqli': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60060 },
  'T2/p-43-terminate': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/polyrank1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/graycode': { "stdout": True, 'originalBound': "245854", 'parsedBound': "245854", 'degree': 0.0, 'variableCount': 0, 'time': 5412 },
  'T2/ex34': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/neg-e-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/slayer-n2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/bitcount16': { "stdout": True, 'originalBound': "34", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 392 },
  'T2/smagillc-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 473 },
  'T2/iecs': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/dropbuf': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60063 },
  'T2/polling': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60040 },
  'T2/streamserver.bug': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60023 },
  'T2/two_arrays2': { "stdout": True, 'originalBound': "20*E + 57", 'parsedBound': "20 * E + 57", 'degree': 1.0, 'variableCount': 1, 'time': 1807 },
  'T2/bf12': { "stdout": True, 'originalBound': "858", 'parsedBound': "858", 'degree': 0.0, 'variableCount': 0, 'time': 1192 },
  'T2/slayer-2-filtered': { "stdout": True, 'originalBound': "12", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 169 },
  'T2/ase_example': { "stdout": True, 'originalBound': "85", 'parsedBound': "85", 'degree': 0.0, 'variableCount': 0, 'time': 541 },
  'T2/ex26': { "stdout": True, 'originalBound': "203", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 272 },
  'T2/vmcai_struct': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 44 },
  'T2/db2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60051 },
  'T2/mc91': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/bubbleSort': { "stdout": True, 'originalBound': "127*C + 40*C^2 + 105", 'parsedBound': "127 * C + 40 * C^2 + 105", 'degree': 2.0, 'variableCount': 1, 'time': 828 },
  'T2/fun10': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/a.10.c': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/elmhes.c.i.elmhes.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60048 },
  'T2/n-7': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/e-acqrel-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 574 },
  'T2/array_free': { "stdout": True, 'originalBound': "86", 'parsedBound': "86", 'degree': 0.0, 'variableCount': 0, 'time': 188 },
  'T2/queue_1000': { "stdout": True, 'originalBound': "27989", 'parsedBound': "27989", 'degree': 0.0, 'variableCount': 0, 'time': 656 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "167*A + 145*B + 10*D + 12*K + 41", 'parsedBound': "167 * A + 145 * B + 10 * D + 12 * K + 41", 'degree': 1.0, 'variableCount': 4, 'time': 1968 },
  'T2/byron-2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 375 },
  'T2/matmult': { "stdout": True, 'originalBound': "37899", 'parsedBound': "37899", 'degree': 0.0, 'variableCount': 0, 'time': 15634 },
  'T2/complex_guard': { "stdout": True, 'originalBound': "25", 'parsedBound': "25", 'degree': 0.0, 'variableCount': 0, 'time': 166 },
  'T2/heidy6': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60136 },
  'T2/walk': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/rlft3.c.i.rlft3.pl.t2.fixed': { "stdout": True, 'originalBound': "78*H + 78*I + 24*J + 24*K + 2*P + 4*Q + 52", 'parsedBound': "78 * H + 78 * I + 24 * J + 24 * K + 2 * P + 4 * Q + 52", 'degree': 1.0, 'variableCount': 6, 'time': 4229 },
  'T2/slayer-3-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60021 },
  'T2/dsa_test15': { "stdout": True, 'originalBound': "23", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 268 },
  'T2/seq': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 89 },
  'T2/new_ex': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/n_firewire_instrumented-PP': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60998 },
  'T2/statemate': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/create': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/simple_pre2': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 27 },
  'T2/fun9': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/queue_10': { "stdout": True, 'originalBound': "269", 'parsedBound': "269", 'degree': 0.0, 'variableCount': 0, 'time': 674 },
  'T2/rev_nt2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/curious': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 222 },
  'T2/Loop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60068 },
  'T2/bf9': { "stdout": True, 'originalBound': "705", 'parsedBound': "705", 'degree': 0.0, 'variableCount': 0, 'time': 1200 },
  'T2/example': { "stdout": True, 'originalBound': "2*A + 2*B + 5", 'parsedBound': "2 * A + 2 * B + 5", 'degree': 1.0, 'variableCount': 2, 'time': 146 },
  'T2/n-3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/p-20': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 113 },
  'T2/nested2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/241': { "stdout": True, 'originalBound': "A^2 + 3*A + 2", 'parsedBound': "A^2 + 3 * A + 2", 'degree': 2.0, 'variableCount': 1, 'time': 222 },
  'T2/byron-1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/broydn.c.i.broydn.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/pentagon': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1095 },
  'T2/n-21': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60042 },
  'T2/p-61': { "stdout": True, 'originalBound': "1003", 'parsedBound': "1003", 'degree': 0.0, 'variableCount': 0, 'time': 151 },
  'T2/apchild-accepted': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/ex19': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/consts5nt': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/dsa_test12': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 29 },
  'T2/1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/dsa_test9': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 24 },
  'T2/p-37': { "stdout": True, 'originalBound': "8", 'parsedBound': "8", 'degree': 0.0, 'variableCount': 0, 'time': 269 },
  'T2/n-1c': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 387 },
  'T2/n-40': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/consts1nt': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/ex9': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/bf13': { "stdout": True, 'originalBound': "909", 'parsedBound': "909", 'degree': 0.0, 'variableCount': 0, 'time': 1170 },
  'T2/fun10b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/tqli.c.i.tqli.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60165 },
  'T2/ex3': { "stdout": True, 'originalBound': "13", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 240 },
  'T2/sas1': { "stdout": True, 'originalBound': "108*B^2 + 301*B + 213", 'parsedBound': "108 * B^2 + 301 * B + 213", 'degree': 2.0, 'variableCount': 1, 'time': 1014 },
  'T2/subpoly_crash': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/zeroconf_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60664 },
  'T2/heidy5': { "stdout": True, 'originalBound': "B + 3", 'parsedBound': "B + 3", 'degree': 1.0, 'variableCount': 1, 'time': 142 },
  'T2/neg-1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60044 },
  'T2/eric3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/p-6': { "stdout": True, 'originalBound': "3*A + 3*B + 2", 'parsedBound': "3 * A + 3 * B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 303 },
  'T2/n-18a': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/heidy3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 369 },
  'T2/ludcmp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/neg-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/p-5': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60036 },
  'T2/ex8': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/ex18': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/bf10': { "stdout": True, 'originalBound': "756", 'parsedBound': "756", 'degree': 0.0, 'variableCount': 0, 'time': 1181 },
  'T2/ex17': { "stdout": True, 'originalBound': "104", 'parsedBound': "104", 'degree': 0.0, 'variableCount': 0, 'time': 341 },
  'T2/cover': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/fun4-alt': { "stdout": True, 'originalBound': "5*A + 21*B + 3*A^2 + 8*A*B + 8*B^2 + 34", 'parsedBound': "5 * A + 21 * B + 3 * A^2 + 8 * A * B + 8 * B^2 + 34", 'degree': 2.0, 'variableCount': 2, 'time': 349 },
  'T2/minmax': { "stdout": True, 'originalBound': "5", 'parsedBound': "5", 'degree': 0.0, 'variableCount': 0, 'time': 61 },
  'T2/ex12': { "stdout": True, 'originalBound': "20", 'parsedBound': "20", 'degree': 0.0, 'variableCount': 0, 'time': 276 },
  'T2/consts5': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'T2/ndes': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60023 },
  'T2/n-8a': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'T2/simple_pre3': { "stdout": True, 'originalBound': "4", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 40 },
  'T2/p-32': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/p-40': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/streamserver-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/p-13': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 44 },
  'T2/ex2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/destroy_seg': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/fir': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/bf6': { "stdout": True, 'originalBound': "552", 'parsedBound': "552", 'degree': 0.0, 'variableCount': 0, 'time': 1173 },
  'T2/create_seg': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/p-56': { "stdout": True, 'originalBound': "2*D + 5", 'parsedBound': "2 * D + 5", 'degree': 1.0, 'variableCount': 1, 'time': 285 },
  'T2/p-18': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 104 },
  'T2/smagilla-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 448 },
  'T2/neg-smagilla-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 477 },
  'T2/n-12': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 261 },
  'T2/n-10': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 494 },
  'T2/dsa_test10': { "stdout": True, 'originalBound': "31", 'parsedBound': "31", 'degree': 0.0, 'variableCount': 0, 'time': 272 },
  'T2/1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/print': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'T2/jacobi.c.i.jacobi.pl.t2.fixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/neg-e-pgarch-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 883 },
  'T2/ex16': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/two_arrays1': { "stdout": True, 'originalBound': "3385", 'parsedBound': "3385", 'degree': 0.0, 'variableCount': 0, 'time': 1596 },
  'T2/eric2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60105 },
  'T2/consts4nt': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/traverse_twice': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/nested': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/neg-e-acqrel-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 302 },
  'T2/toeplz.c.i.toeplz.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/dummy': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/constants': { "stdout": True, 'originalBound': "404", 'parsedBound': "404", 'degree': 0.0, 'variableCount': 0, 'time': 269 },
  'T2/neg-smagilla-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 489 },
  'T2/disj_nightmare_abi': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 48 },
  'T2/send-more-money': { "stdout": True, 'originalBound': "129", 'parsedBound': "129", 'degree': 0.0, 'variableCount': 0, 'time': 5168 },
  'T2/seq2': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 81 },
  'T2/polyrank5': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/bf18': { "stdout": True, 'originalBound': "1164", 'parsedBound': "1164", 'degree': 0.0, 'variableCount': 0, 'time': 1166 },
  'T2/p-21': { "stdout": True, 'originalBound': "A + 4*B + 64", 'parsedBound': "A + 4 * B + 64", 'degree': 1.0, 'variableCount': 2, 'time': 204 },
  'T2/w2_nt': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60046 },
  'T2/hqr': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60020 },
  'T2/232': { "stdout": True, 'originalBound': "A^2 + 3*A + 2", 'parsedBound': "A^2 + 3 * A + 2", 'degree': 2.0, 'variableCount': 1, 'time': 231 },
  'T2/insertsort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60038 },
  'T2/traverse': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/ex29': { "stdout": True, 'originalBound': "15", 'parsedBound': "15", 'degree': 0.0, 'variableCount': 0, 'time': 161 },
  'T2/heidy1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/array_init': { "stdout": True, 'originalBound': "13", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 125 },
  'T2/p-19': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/n-3a': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 836 },
  'T2/bf11': { "stdout": True, 'originalBound': "807", 'parsedBound': "807", 'degree': 0.0, 'variableCount': 0, 'time': 1152 },
  'T2/rev_nt3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60023 },
  'T2/slayer-n2-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/p-49': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 105 },
  'T2/p-1a': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/array3': { "stdout": True, 'originalBound': "103", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 286 },
  'T2/array2': { "stdout": True, 'originalBound': "52", 'parsedBound': "52", 'degree': 0.0, 'variableCount': 0, 'time': 131 },
  'T2/smagillb-succeed': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 453 },
  'T2/p-44': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 174 },
  'T2/vmcai_bytes': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 27 },
  'T2/tqli.c.i.tqli.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/flipflop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/p-53': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/dsa_test4': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 24 },
  'T2/bio': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/brp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/byron-3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/ex31': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/fun6': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/p-41': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 25 },
  'T2/queens': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/ex1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'T2/dropbuf-live': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'T2/two_arrays6': { "stdout": True, 'originalBound': "18*E + 55", 'parsedBound': "18 * E + 55", 'degree': 1.0, 'variableCount': 1, 'time': 1837 },
  'T2/n-15': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60041 },
  'T2/ex27': { "stdout": True, 'originalBound': "22853", 'parsedBound': "22853", 'degree': 0.0, 'variableCount': 0, 'time': 18839 },
  'T2/ex4': { "stdout": True, 'originalBound': "87", 'parsedBound': "87", 'degree': 0.0, 'variableCount': 0, 'time': 688 },
  'T2/oct_vs_subpoly': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/fun8': { "stdout": True, 'originalBound': "573", 'parsedBound': "573", 'degree': 0.0, 'variableCount': 0, 'time': 5739 },
  'T2/ex37': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60034 },
  'T2/afagp-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60031 },
  'T2/simple': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/loop_on_input': { "stdout": True, 'originalBound': "10", 'parsedBound': "10", 'degree': 0.0, 'variableCount': 0, 'time': 467 },
  'T2/p-42': { "stdout": True, 'originalBound': "A + B + 7", 'parsedBound': "A + B + 7", 'degree': 1.0, 'variableCount': 2, 'time': 253 },
  'T2/p-1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/sort': { "stdout": True, 'originalBound': "1972", 'parsedBound': "1972", 'degree': 0.0, 'variableCount': 0, 'time': 3491 },
  'T2/ex23': { "stdout": True, 'originalBound': "39", 'parsedBound': "39", 'degree': 0.0, 'variableCount': 0, 'time': 182 },
  'T2/p-60': { "stdout": True, 'originalBound': "103", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 150 },
  'T2/broydn': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60028 },
  'T2/zeroconf': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60414 },
  'T2/bf16': { "stdout": True, 'originalBound': "1062", 'parsedBound': "1062", 'degree': 0.0, 'variableCount': 0, 'time': 1193 },
  'T2/stored': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 461 },
  'T2/array_init_assign': { "stdout": True, 'originalBound': "8", 'parsedBound': "8", 'degree': 0.0, 'variableCount': 0, 'time': 251 },
  'T2/loop3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60042 },
  'T2/slayer-3-new': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60043 },
  'T2/consts4': { "stdout": True, 'originalBound': "A + 1200", 'parsedBound': "A + 1200", 'degree': 1.0, 'variableCount': 1, 'time': 89 },
  'T2/p-4': { "stdout": True, 'originalBound': "15*A + 18*B + 3*C + 21*A*B + 12*B^2 + 9*A^2 + 3*A*C + 3*B*C + 7", 'parsedBound': "15 * A + 18 * B + 3 * C + 21 * A * B + 12 * B^2 + 9 * A^2 + 3 * A * C + 3 * B * C + 7", 'degree': 2.0, 'variableCount': 3, 'time': 207 },
  'T2/polyrank3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'T2/n-6': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 359 },
  'T2/collatz': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60061 },
  'T2/ex11': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/cnt': { "stdout": True, 'originalBound': "41596", 'parsedBound': "41596", 'degree': 0.0, 'variableCount': 0, 'time': 1510 },
  'T2/ex20': { "stdout": True, 'originalBound': "1030", 'parsedBound': "1030", 'degree': 0.0, 'variableCount': 0, 'time': 450 },
  'T2/array1': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 18 },
  'T2/heidy8': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/heidy7-simple': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'T2/fun11': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60024 },
  'T2/n-20': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/dsa_test8': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 24 },
  'T2/fake-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60046 },
  'T2/5': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60053 },
  'T2/refine_disj_problem': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60026 },
  'T2/n-1d': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 312 },
  'T2/p-46': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 423 },
  'T2/ex40': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'T2/magic': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'T2/bf20': { "stdout": True, 'originalBound': "1266", 'parsedBound': "1266", 'degree': 0.0, 'variableCount': 0, 'time': 1171 },
  'T2/fun2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60050 },
  'T2/rlft3': { "stdout": True, 'originalBound': "24*H + 24*I + 2*A + 122*J + 74*K + 9*P + 42*Q + 41", 'parsedBound': "24 * H + 24 * I + 2 * A + 122 * J + 74 * K + 9 * P + 42 * Q + 41", 'degree': 1.0, 'variableCount': 7, 'time': 4449 },
  'T2/p-63': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60022 },
  'T2/neg-popl07-fail': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 16166 },
  'T2/simple_double_free': { "stdout": True, 'originalBound': "1", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 21 },
  'T2/p-1c': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60045 },
  'T2/n-13': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60030 },
  'T2/fourn.c.i.fourn.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'SAS10/relation1': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 33 },
  'SAS10/wcet1': { "stdout": True, 'originalBound': "3*A + 13", 'parsedBound': "3 * A + 13", 'degree': 1.0, 'variableCount': 1, 'time': 838 },
  'SAS10/terminate': { "stdout": True, 'originalBound': "A + E + 207", 'parsedBound': "A + E + 207", 'degree': 1.0, 'variableCount': 2, 'time': 396 },
  'SAS10/realselect': { "stdout": True, 'originalBound': "12*A + 19", 'parsedBound': "12 * A + 19", 'degree': 1.0, 'variableCount': 1, 'time': 1129 },
  'SAS10/aaron2': { "stdout": True, 'originalBound': "4*C + 4*E + 7", 'parsedBound': "4 * C + 4 * E + 7", 'degree': 1.0, 'variableCount': 2, 'time': 936 },
  'SAS10/speedpldi3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'SAS10/speedpldi2': { "stdout": True, 'originalBound': "6*G + 9", 'parsedBound': "6 * G + 9", 'degree': 1.0, 'variableCount': 1, 'time': 564 },
  'SAS10/complex': { "stdout": True, 'originalBound': "193*A + 32*C + 6550", 'parsedBound': "193 * A + 32 * C + 6550", 'degree': 1.0, 'variableCount': 2, 'time': 1356 },
  'SAS10/counterex1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'SAS10/sipmabubble': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60037 },
  'SAS10/gcd': { "stdout": True, 'originalBound': "4*A + 4*C + 14", 'parsedBound': "4 * A + 4 * C + 14", 'degree': 1.0, 'variableCount': 2, 'time': 759 },
  'SAS10/easy1': { "stdout": True, 'originalBound': "126", 'parsedBound': "126", 'degree': 0.0, 'variableCount': 0, 'time': 845 },
  'SAS10/easy2': { "stdout": True, 'originalBound': "A + 4", 'parsedBound': "A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 455 },
  'SAS10/while2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60029 },
  'SAS10/perfect': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60085 },
  'SAS10/loops': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'SAS10/realheapsort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'SAS10/exmini': { "stdout": True, 'originalBound': "2*A + 2*E + G + 106", 'parsedBound': "2 * A + 2 * E + G + 106", 'degree': 1.0, 'variableCount': 3, 'time': 413 },
  'SAS10/random1d': { "stdout": True, 'originalBound': "2*A + 7", 'parsedBound': "2 * A + 7", 'degree': 1.0, 'variableCount': 1, 'time': 516 },
  'SAS10/realbubble': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'SAS10/wise': { "stdout": True, 'originalBound': "2*A + 2*C + 14", 'parsedBound': "2 * A + 2 * C + 14", 'degree': 1.0, 'variableCount': 2, 'time': 412 },
  'SAS10/ax': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60040 },
  'SAS10/speedpldi4': { "stdout": True, 'originalBound': "2*A + 2*C + 17", 'parsedBound': "2 * A + 2 * C + 17", 'degree': 1.0, 'variableCount': 2, 'time': 523 },
  'SAS10/realshellsort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'SAS10/nestedLoop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60027 },
  'SAS10/ndecr': { "stdout": True, 'originalBound': "A + 4", 'parsedBound': "A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 180 },
  'SAS10/maccarthy91': { "stdout": True, 'originalBound': "8*A + 1563", 'parsedBound': "8 * A + 1563", 'degree': 1.0, 'variableCount': 1, 'time': 1109 },
  'SAS10/insertsort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'SAS10/determinant': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'SAS10/random2d': { "stdout": True, 'originalBound': "22*A + 8", 'parsedBound': "22 * A + 8", 'degree': 1.0, 'variableCount': 1, 'time': 1510 },
  'SAS10/nd_loop': { "stdout": True, 'originalBound': "43", 'parsedBound': "43", 'degree': 0.0, 'variableCount': 0, 'time': 257 },
  'SAS10/speedFails4': { "stdout": True, 'originalBound': "2*B + 2*C + 7", 'parsedBound': "2 * B + 2 * C + 7", 'degree': 1.0, 'variableCount': 2, 'time': 901 },
  'SAS10/rsd': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'SAS10/ackermann': { "stdout": True, 'originalBound': "16*A + 4", 'parsedBound': "16 * A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 226 },
  'SAS10/cousot9': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'SAS10/wcet2': { "stdout": True, 'originalBound': "44*A + 221", 'parsedBound': "44 * A + 221", 'degree': 1.0, 'variableCount': 1, 'time': 963 },
  'costa/misc/divide_and_conquer': { "stdout": True, 'originalBound': "12*A + 4", 'parsedBound': "12 * A + 4", 'degree': 1.0, 'variableCount': 1, 'time': 150 },
  'costa/misc/exponential': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 254 },
  'costa/misc/direct_n_log_n': { "stdout": True, 'originalBound': "4*A + 9", 'parsedBound': "4 * A + 9", 'degree': 1.0, 'variableCount': 1, 'time': 88 },
  'costa/misc/n_log_n': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 55 },
  'costa/misc/linear': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 118 },
  'costa/misc/merge': { "stdout": True, 'originalBound': "2*A + 2*B + 3", 'parsedBound': "2 * A + 2 * B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 146 },
  'costa/misc/ms': { "stdout": True, 'originalBound': "12*A + 3*B + 10", 'parsedBound': "12 * A + 3 * B + 10", 'degree': 1.0, 'variableCount': 2, 'time': 49 },
  'costa/misc/quadratic': { "stdout": True, 'originalBound': "16*A + 12*A^2 + 5", 'parsedBound': "16 * A + 12 * A^2 + 5", 'degree': 2.0, 'variableCount': 1, 'time': 177 },
  'costa/misc/mspe': { "stdout": True, 'originalBound': "4*B + 4*F + 5", 'parsedBound': "4 * B + 4 * F + 5", 'degree': 1.0, 'variableCount': 2, 'time': 222 },
  'costa/misc/logarithmic': { "stdout": True, 'originalBound': "3", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 41 },
  'costa/misc/ack': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'costa/misc/no_cover_point': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 367 },
  'costa/RAML/matrix': { "stdout": True, 'originalBound': "45*A + 45*B + 12*C + 41*A*C + 29*B*C + 7*C^2 + 54*A^2 + 77*A*B + 18*A*B*C + 4*B^2*C + 5*B*C^2 + 9*A^2*B + 12*A*B^2 + 4*B^2 + 6*A*C^2 + C^3 + 9*A^2*C + 12", 'parsedBound': "45 * A + 45 * B + 12 * C + 41 * A * C + 29 * B * C + 7 * C^2 + 54 * A^2 + 77 * A * B + 18 * A * B * C + 4 * B^2 * C + 5 * B * C^2 + 9 * A^2 * B + 12 * A * B^2 + 4 * B^2 + 6 * A * C^2 + C^3 + 9 * A^2 * C + 12", 'degree': 3.0, 'variableCount': 3, 'time': 1523 },
  'costa/RAML/rationalPotential': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 175 },
  'costa/RAML/mergesort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'costa/RAML/bitvectors': { "stdout": True, 'originalBound': "150*A + 60*A*B + 12*B + 31", 'parsedBound': "150 * A + 60 * A * B + 12 * B + 31", 'degree': 2.0, 'variableCount': 2, 'time': 1631 },
  'costa/RAML/listsort': { "stdout": True, 'originalBound': "145*C + 180*C^2 + 60*A*C^2 + 47*A*C + 8*A + 26", 'parsedBound': "145 * C + 180 * C^2 + 60 * A * C^2 + 47 * A * C + 8 * A + 26", 'degree': 3.0, 'variableCount': 2, 'time': 564 },
  'costa/RAML/eratosthenes': { "stdout": True, 'originalBound': "19*A + 12*A^2 + 6", 'parsedBound': "19 * A + 12 * A^2 + 6", 'degree': 2.0, 'variableCount': 1, 'time': 256 },
  'costa/RAML/dyade': { "stdout": True, 'originalBound': "9*A + 3*A*C + C + 4", 'parsedBound': "9 * A + 3 * A * C + C + 4", 'degree': 2.0, 'variableCount': 2, 'time': 254 },
  'costa/RAML/insertionsort': { "stdout": True, 'originalBound': "19*B + 12*B^2 + 6", 'parsedBound': "19 * B + 12 * B^2 + 6", 'degree': 2.0, 'variableCount': 1, 'time': 250 },
  'costa/RAML/lcs': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'costa/RAML/cleavermmult': { "stdout": True, 'originalBound': "40*B + 20*B*C + 16*B*D + 5*C + 4*D + 8*A*B*C + 16*A*B*D + 2*A*C + 4*A*D + 8*A*B + 2*A + 11", 'parsedBound': "40 * B + 20 * B * C + 16 * B * D + 5 * C + 4 * D + 8 * A * B * C + 16 * A * B * D + 2 * A * C + 4 * A * D + 8 * A * B + 2 * A + 11", 'degree': 3.0, 'variableCount': 4, 'time': 1657 },
  'costa/RAML/quicksort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'costa/RAML/duplicates': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 90 },
  'costa/RAML/minsort': { "stdout": True, 'originalBound': "19*A + 12*A^2 + 6", 'parsedBound': "19 * A + 12 * A^2 + 6", 'degree': 2.0, 'variableCount': 1, 'time': 225 },
  'costa/jvm-cost/Factorial': { "stdout": True, 'originalBound': "25*A + 9", 'parsedBound': "25 * A + 9", 'degree': 1.0, 'variableCount': 1, 'time': 74 },
  'costa/jvm-cost/BST': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 10286 },
  'costa/jvm-cost/LinEqSolve': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60020 },
  'costa/jvm-cost/ListReverse': { "stdout": True, 'originalBound': "9*B + 6", 'parsedBound': "9 * B + 6", 'degree': 1.0, 'variableCount': 1, 'time': 218 },
  'costa/jvm-cost/EvenDigits': { "stdout": True, 'originalBound': "241*A + 27", 'parsedBound': "241 * A + 27", 'degree': 1.0, 'variableCount': 1, 'time': 1463 },
  'costa/jvm-cost/MatMult': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'costa/jvm-cost/ms': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 46861 },
  'costa/jvm-cost/DivByTwo': { "stdout": True, 'originalBound': "18*A + 6", 'parsedBound': "18 * A + 6", 'degree': 1.0, 'variableCount': 1, 'time': 66 },
  'costa/jvm-cost/Matrixinverse': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'costa/jvm-cost/EvenDigitsNew': { "stdout": True, 'originalBound': "1730*F + 2400*F^2 + 310", 'parsedBound': "1730 * F + 2400 * F^2 + 310", 'degree': 2.0, 'variableCount': 1, 'time': 2366 },
  'costa/jvm-cost/Power': { "stdout": True, 'originalBound': "25*A + 9", 'parsedBound': "25 * A + 9", 'degree': 1.0, 'variableCount': 1, 'time': 74 },
  'costa/jvm-cost/Fibonacci': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1474 },
  'costa/jvm-cost/Hanoi': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1580 },
  'costa/jvm-cost/FactSumNew': { "stdout": True, 'originalBound': "231*B + 60*B^2 + 128", 'parsedBound': "231 * B + 60 * B^2 + 128", 'degree': 2.0, 'variableCount': 1, 'time': 4387 },
  'costa/jvm-cost/Incr': { "stdout": True, 'originalBound': "275*A + 831", 'parsedBound': "275 * A + 831", 'degree': 1.0, 'variableCount': 1, 'time': 265 },
  'costa/jvm-cost/FactSum': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1541 },
  'costa/jvm-cost/MergeList': { "stdout": True, 'originalBound': "481*A + 555*B + 47", 'parsedBound': "481 * A + 555 * B + 47", 'degree': 1.0, 'variableCount': 2, 'time': 274 },
  'costa/jvm-cost/ArrayReverse': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'costa/jvm-cost/DetEval': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60020 },
  'costa/jvm-cost/ListInter': { "stdout": True, 'originalBound': "600*A*B + 575*A + 1056*B + 1018", 'parsedBound': "600 * A * B + 575 * A + 1056 * B + 1018", 'degree': 2.0, 'variableCount': 2, 'time': 2199 },
  'costa/jvm-cost/Polynomial': { "stdout": True, 'originalBound': "1066", 'parsedBound': "1066", 'degree': 0.0, 'variableCount': 0, 'time': 169 },
  'costa/jvm-cost/Cons': { "stdout": True, 'originalBound': "368*A + 70", 'parsedBound': "368 * A + 70", 'degree': 1.0, 'variableCount': 1, 'time': 194 },
  'costa/jvm-cost/SelectOrd': { "stdout": True, 'originalBound': "113*A + 80*A^2 + 80*A*D + 6", 'parsedBound': "113 * A + 80 * A^2 + 80 * A * D + 6", 'degree': 2.0, 'variableCount': 2, 'time': 2315 },
  'costa/jvm-cost/Delete': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'costa/jvm-cost/Concat': { "stdout": True, 'originalBound': "9*B + 9*A + 16", 'parsedBound': "9 * B + 9 * A + 16", 'degree': 1.0, 'variableCount': 2, 'time': 136 },
  'costa/jvm-cost/FibonacciNew': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2699 },
  'c-examples/ABC/ex08': { "stdout": True, 'originalBound': "21*A + 12*A*B + 4*B + 11", 'parsedBound': "21 * A + 12 * A * B + 4 * B + 11", 'degree': 2.0, 'variableCount': 2, 'time': 265 },
  'c-examples/ABC/ex15': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/ABC/ex07': { "stdout": True, 'originalBound': "33*B + 12*B*D + 8*D + 26", 'parsedBound': "33 * B + 12 * B * D + 8 * D + 26", 'degree': 2.0, 'variableCount': 2, 'time': 356 },
  'c-examples/ABC/ex02': { "stdout": True, 'originalBound': "69*B + 72*B^2 + 19", 'parsedBound': "69 * B + 72 * B^2 + 19", 'degree': 2.0, 'variableCount': 1, 'time': 328 },
  'c-examples/ABC/ex14': { "stdout": True, 'originalBound': "4249295*A + 10229904*A*B + 869820*B + 45132660*A^2*B + 18636784*A^2 + 40245408*A^2*B^2 + 9065376*A*B^2 + 765792*B^2 + 88526880*A^3*B + 36355968*A^3 + 79412832*A^3*B^2 + 58765824*A^4*B^2 + 65138688*A^4*B + 23141376*A^4*B^3 + 31072896*A^3*B^3 + 15645312*A^2*B^3 + 3500928*A*B^3 + 26615808*A^4 + 3359232*A^4*B^4 + 4478976*A^3*B^4 + 2239488*A^2*B^4 + 497664*A*B^4 + 41472*B^4 + 293760*B^3 + 363609", 'parsedBound': "4249295 * A + 10229904 * A * B + 869820 * B + 45132660 * A^2 * B + 18636784 * A^2 + 40245408 * A^2 * B^2 + 9065376 * A * B^2 + 765792 * B^2 + 88526880 * A^3 * B + 36355968 * A^3 + 79412832 * A^3 * B^2 + 58765824 * A^4 * B^2 + 65138688 * A^4 * B + 23141376 * A^4 * B^3 + 31072896 * A^3 * B^3 + 15645312 * A^2 * B^3 + 3500928 * A * B^3 + 26615808 * A^4 + 3359232 * A^4 * B^4 + 4478976 * A^3 * B^4 + 2239488 * A^2 * B^4 + 497664 * A * B^4 + 41472 * B^4 + 293760 * B^3 + 363609", 'degree': 8.0, 'variableCount': 2, 'time': 760 },
  'c-examples/ABC/ex13': { "stdout": True, 'originalBound': "239*A + 231*B + 1280*A*D + 1248*B*D + 1304*A*C + 1272*B*C + 224*D + 232*C + 1824*A^2*D + 3552*A*B*D + 1824*A^2*C + 3552*A*B*C + 312*A^2 + 600*A*B + 1728*B^2*D + 1728*B^2*C + 288*B^2 + 3168*A*C*D + 3168*B*C*D + 1632*A*C^2 + 1632*B*C^2 + 544*C*D + 288*C^2 + 2304*A^2*D^2 + 4608*A*B*D^2 + 4608*A^2*C*D + 9216*A*B*C*D + 1536*A*D^2 + 2304*B^2*D^2 + 4608*B^2*C*D + 1536*B*D^2 + 2304*A^2*C^2 + 4608*A*B*C^2 + 2304*B^2*C^2 + 256*D^2 + 49", 'parsedBound': "239 * A + 231 * B + 1280 * A * D + 1248 * B * D + 1304 * A * C + 1272 * B * C + 224 * D + 232 * C + 1824 * A^2 * D + 3552 * A * B * D + 1824 * A^2 * C + 3552 * A * B * C + 312 * A^2 + 600 * A * B + 1728 * B^2 * D + 1728 * B^2 * C + 288 * B^2 + 3168 * A * C * D + 3168 * B * C * D + 1632 * A * C^2 + 1632 * B * C^2 + 544 * C * D + 288 * C^2 + 2304 * A^2 * D^2 + 4608 * A * B * D^2 + 4608 * A^2 * C * D + 9216 * A * B * C * D + 1536 * A * D^2 + 2304 * B^2 * D^2 + 4608 * B^2 * C * D + 1536 * B * D^2 + 2304 * A^2 * C^2 + 4608 * A * B * C^2 + 2304 * B^2 * C^2 + 256 * D^2 + 49", 'degree': 4.0, 'variableCount': 4, 'time': 646 },
  'c-examples/ABC/ex10': { "stdout": True, 'originalBound': "33*A + 12*A*B + 4*B + 15", 'parsedBound': "33 * A + 12 * A * B + 4 * B + 15", 'degree': 2.0, 'variableCount': 2, 'time': 309 },
  'c-examples/ABC/ex03': { "stdout": True, 'originalBound': "964348*B + 2666040*B^2 + 3736080*B^3 + 2808576*B^4 + 165888*B^6 + 1078272*B^5 + 138246", 'parsedBound': "964348 * B + 2666040 * B^2 + 3736080 * B^3 + 2808576 * B^4 + 165888 * B^6 + 1078272 * B^5 + 138246", 'degree': 6.0, 'variableCount': 1, 'time': 804 },
  'c-examples/ABC/ex06': { "stdout": True, 'originalBound': "137*B + 84*B^2 + 58", 'parsedBound': "137 * B + 84 * B^2 + 58", 'degree': 2.0, 'variableCount': 1, 'time': 297 },
  'c-examples/ABC/ex05': { "stdout": True, 'originalBound': "141*B + 72*B^2 + 66", 'parsedBound': "141 * B + 72 * B^2 + 66", 'degree': 2.0, 'variableCount': 1, 'time': 329 },
  'c-examples/ABC/ex09': { "stdout": True, 'originalBound': "33*B + 12*B*D + 8*D + 26", 'parsedBound': "33 * B + 12 * B * D + 8 * D + 26", 'degree': 2.0, 'variableCount': 2, 'time': 356 },
  'c-examples/ABC/ex12': { "stdout": True, 'originalBound': "21*A + 24*A*B + 8*B + 11", 'parsedBound': "21 * A + 24 * A * B + 8 * B + 11", 'degree': 2.0, 'variableCount': 2, 'time': 267 },
  'c-examples/ABC/ex01': { "stdout": True, 'originalBound': "4*A + 4*B + 6", 'parsedBound': "4 * A + 4 * B + 6", 'degree': 1.0, 'variableCount': 2, 'time': 129 },
  'c-examples/ABC/ex04': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'c-examples/ABC/ex11': { "stdout": True, 'originalBound': "21*A + 12*A*B + 4*B + 11", 'parsedBound': "21 * A + 12 * A * B + 4 * B + 11", 'degree': 2.0, 'variableCount': 2, 'time': 264 },
  'c-examples/WTC/wcet1': { "stdout": True, 'originalBound': "44*A + 26", 'parsedBound': "44 * A + 26", 'degree': 1.0, 'variableCount': 1, 'time': 553 },
  'c-examples/WTC/terminate': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 207", 'parsedBound': "2 * A + 2 * B + 2 * C + 207", 'degree': 1.0, 'variableCount': 3, 'time': 195 },
  'c-examples/WTC/realselect': { "stdout": True, 'originalBound': "150*B + 216*B^2 + 28", 'parsedBound': "150 * B + 216 * B^2 + 28", 'degree': 2.0, 'variableCount': 1, 'time': 426 },
  'c-examples/WTC/aaron2': { "stdout": True, 'originalBound': "35*A + 28*B + 28*C + 13", 'parsedBound': "35 * A + 28 * B + 28 * C + 13", 'degree': 1.0, 'variableCount': 3, 'time': 330 },
  'c-examples/WTC/sipma91': { "stdout": True, 'originalBound': "3218*A + 15*A^2 + 172966", 'parsedBound': "3218 * A + 15 * A^2 + 172966", 'degree': 2.0, 'variableCount': 1, 'time': 2836 },
  'c-examples/WTC/speedpldi3': { "stdout": True, 'originalBound': "15*B + 3*A + 9*A*B + 17", 'parsedBound': "15 * B + 3 * A + 9 * A * B + 17", 'degree': 2.0, 'variableCount': 2, 'time': 1595 },
  'c-examples/WTC/speedpldi2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/complex': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/sipmabubble': { "stdout": True, 'originalBound': "428*A + 864*A^2 + 57", 'parsedBound': "428 * A + 864 * A^2 + 57", 'degree': 2.0, 'variableCount': 1, 'time': 321 },
  'c-examples/WTC/gcd': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60032 },
  'c-examples/WTC/easy1': { "stdout": True, 'originalBound': "830", 'parsedBound': "830", 'degree': 0.0, 'variableCount': 0, 'time': 288 },
  'c-examples/WTC/easy2': { "stdout": True, 'originalBound': "4*A + 6", 'parsedBound': "4 * A + 6", 'degree': 1.0, 'variableCount': 1, 'time': 116 },
  'c-examples/WTC/counterex1b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/realheapsort_step1': { "stdout": True, 'originalBound': "795*A + 216*A^2 + 730", 'parsedBound': "795 * A + 216 * A^2 + 730", 'degree': 2.0, 'variableCount': 1, 'time': 26242 },
  'c-examples/WTC/while2': { "stdout": True, 'originalBound': "25*B + 12*B^2 + 11", 'parsedBound': "25 * B + 12 * B^2 + 11", 'degree': 2.0, 'variableCount': 1, 'time': 274 },
  'c-examples/WTC/perfect': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'c-examples/WTC/loops': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/realheapsort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/exmini': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 207", 'parsedBound': "2 * A + 2 * B + 2 * C + 207", 'degree': 1.0, 'variableCount': 3, 'time': 195 },
  'c-examples/WTC/random1d': { "stdout": True, 'originalBound': "12*A + 13", 'parsedBound': "12 * A + 13", 'degree': 1.0, 'variableCount': 1, 'time': 286 },
  'c-examples/WTC/realbubble': { "stdout": True, 'originalBound': "2548*A + 1248*A^2 + 1305", 'parsedBound': "2548 * A + 1248 * A^2 + 1305", 'degree': 2.0, 'variableCount': 1, 'time': 558 },
  'c-examples/WTC/wise': { "stdout": True, 'originalBound': "78*A + 78*B + 66*A^2 + 132*A*B + 66*B^2 + 12", 'parsedBound': "78 * A + 78 * B + 66 * A^2 + 132 * A * B + 66 * B^2 + 12", 'degree': 2.0, 'variableCount': 2, 'time': 502 },
  'c-examples/WTC/ax': { "stdout": True, 'originalBound': "23*C + 12*C^2 + 14", 'parsedBound': "23 * C + 12 * C^2 + 14", 'degree': 2.0, 'variableCount': 1, 'time': 349 },
  'c-examples/WTC/speedpldi4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/realshellsort': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/realheapsort_step2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/nestedLoop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/ndecr': { "stdout": True, 'originalBound': "4*A + 6", 'parsedBound': "4 * A + 6", 'degree': 1.0, 'variableCount': 1, 'time': 156 },
  'c-examples/WTC/insertsort': { "stdout": True, 'originalBound': "716*B + 384*B^2 + 325", 'parsedBound': "716 * B + 384 * B^2 + 325", 'degree': 2.0, 'variableCount': 1, 'time': 435 },
  'c-examples/WTC/random2d': { "stdout": True, 'originalBound': "189*B + 139", 'parsedBound': "189 * B + 139", 'degree': 1.0, 'variableCount': 1, 'time': 972 },
  'c-examples/WTC/nd_loop': { "stdout": True, 'originalBound': "15", 'parsedBound': "15", 'degree': 0.0, 'variableCount': 0, 'time': 122 },
  'c-examples/WTC/speedFails4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/WTC/rsd': { "stdout": True, 'originalBound': "18*A^2 + 21*A + 7", 'parsedBound': "18 * A^2 + 21 * A + 7", 'degree': 2.0, 'variableCount': 1, 'time': 1344 },
  'c-examples/WTC/cousot9': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'c-examples/WTC/wcet2': { "stdout": True, 'originalBound': "2814*A + 360*A^2 + 5423", 'parsedBound': "2814 * A + 360 * A^2 + 5423", 'degree': 2.0, 'variableCount': 1, 'time': 304 },
  'c-examples/Rank/ex3': { "stdout": True, 'originalBound': "61*B + 9*B^2 + 84", 'parsedBound': "61 * B + 9 * B^2 + 84", 'degree': 2.0, 'variableCount': 1, 'time': 892 },
  'c-examples/Rank/ex2': { "stdout": True, 'originalBound': "41*B + 5*B^2 + 38", 'parsedBound': "41 * B + 5 * B^2 + 38", 'degree': 2.0, 'variableCount': 1, 'time': 606 },
  'c-examples/Rank/ex1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 6694 },
  'c-examples/SPEED/PLDI09/Example2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60018 },
  'c-examples/SPEED/PLDI09/Example3': { "stdout": True, 'originalBound': "136*B + 20*A + 30*A*B + 105*B^2 + 49", 'parsedBound': "136 * B + 20 * A + 30 * A * B + 105 * B^2 + 49", 'degree': 2.0, 'variableCount': 2, 'time': 1152 },
  'c-examples/SPEED/PLDI09/NestedLoop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60016 },
  'c-examples/SPEED/PLDI09/Example4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60025 },
  'c-examples/SPEED/PLDI09/Example5': { "stdout": True, 'originalBound': "9*B + 15*A + 27*C + 24*A*C + 24*B*C + 14", 'parsedBound': "9 * B + 15 * A + 27 * C + 24 * A * C + 24 * B * C + 14", 'degree': 2.0, 'variableCount': 3, 'time': 740 },
  'c-examples/SPEED/PLDI09/cyclic': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/SPEED/PLDI09/Example6': { "stdout": True, 'originalBound': "28*D + 7*G + 27", 'parsedBound': "28 * D + 7 * G + 27", 'degree': 1.0, 'variableCount': 2, 'time': 732 },
  'c-examples/SPEED/POPL09/SimpleSingle': { "stdout": True, 'originalBound': "4*B + 6", 'parsedBound': "4 * B + 6", 'degree': 1.0, 'variableCount': 1, 'time': 159 },
  'c-examples/SPEED/POPL09/Dis2': { "stdout": True, 'originalBound': "6*A + 9*B + 3*C + 5", 'parsedBound': "6 * A + 9 * B + 3 * C + 5", 'degree': 1.0, 'variableCount': 3, 'time': 970 },
  'c-examples/SPEED/POPL09/SimpleMultipleDep': { "stdout": True, 'originalBound': "15*C + 3*D + 9*C*D + 9", 'parsedBound': "15 * C + 3 * D + 9 * C * D + 9", 'degree': 2.0, 'variableCount': 2, 'time': 1035 },
  'c-examples/SPEED/POPL09/SimpleSingle2': { "stdout": True, 'originalBound': "20*D + 12*C + 17", 'parsedBound': "20 * D + 12 * C + 17", 'degree': 1.0, 'variableCount': 2, 'time': 488 },
  'c-examples/SPEED/POPL09/Dis1': { "stdout": True, 'originalBound': "9*A + 9*B + 10*C + 10*D + 7", 'parsedBound': "9 * A + 9 * B + 10 * C + 10 * D + 7", 'degree': 1.0, 'variableCount': 4, 'time': 759 },
  'c-examples/SPEED/POPL09/NestedMultipleDep': { "stdout": True, 'originalBound': "15*B + 12*B*E + 4*E + 9", 'parsedBound': "15 * B + 12 * B * E + 4 * E + 9", 'degree': 2.0, 'variableCount': 2, 'time': 383 },
  'c-examples/SPEED/POPL09/SequentialSingle': { "stdout": True, 'originalBound': "21*B + 6", 'parsedBound': "21 * B + 6", 'degree': 1.0, 'variableCount': 1, 'time': 289 },
  'c-examples/SPEED/POPL09/NestedSingle': { "stdout": True, 'originalBound': "48*B + 16", 'parsedBound': "48 * B + 16", 'degree': 1.0, 'variableCount': 1, 'time': 334 },
  'c-examples/SPEED/POPL09/SimpleMultiple': { "stdout": True, 'originalBound': "9*C + 10*D + 7", 'parsedBound': "9 * C + 10 * D + 7", 'degree': 1.0, 'variableCount': 2, 'time': 941 },
  'c-examples/SPEED/POPL09/NestedMultiple': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/SPEED/CAV09/ex3': { "stdout": True, 'originalBound': "90*B + 5", 'parsedBound': "90 * B + 5", 'degree': 1.0, 'variableCount': 1, 'time': 370 },
  'c-examples/SPEED/CAV09/ex2': { "stdout": True, 'originalBound': "15*C + 3*D + 9*C*D + 9", 'parsedBound': "15 * C + 3 * D + 9 * C * D + 9", 'degree': 2.0, 'variableCount': 2, 'time': 1027 },
  'c-examples/SPEED/CAV09/ex1': { "stdout": True, 'originalBound': "10*C + 898", 'parsedBound': "10 * C + 898", 'degree': 1.0, 'variableCount': 1, 'time': 873 },
  'c-examples/SPEED/PLDI10/Ex1': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 6509 },
  'c-examples/SPEED/PLDI10/Ex5': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 2248 },
  'c-examples/SPEED/PLDI10/Ex6': { "stdout": True, 'originalBound': "6*A + 9*C + 3*B + 5", 'parsedBound': "6 * A + 9 * C + 3 * B + 5", 'degree': 1.0, 'variableCount': 3, 'time': 982 },
  'c-examples/SPEED/PLDI10/Ex3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1194 },
  'c-examples/SPEED/PLDI10/Ex7': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60071 },
  'c-examples/SPEED/PLDI10/Ex2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1350 },
  'c-examples/SPEED/PLDI10/Ex4': { "stdout": True, 'originalBound': "110*A + 33", 'parsedBound': "110 * A + 33", 'degree': 1.0, 'variableCount': 1, 'time': 488 },
  'c-examples/Loopus/Example2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'c-examples/Loopus/Example3': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 1272 },
  'c-examples/Loopus/Example1': { "stdout": True, 'originalBound': "804*B + 220*B^2 + 736", 'parsedBound': "804 * B + 220 * B^2 + 736", 'degree': 2.0, 'variableCount': 1, 'time': 2834 },
  'KoAT-2014/exp-calls': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 253 },
  'KoAT-2014/scaling-exp-growth': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 175 },
  'KoAT-2014/adding-exp-growth2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'KoAT-2014/adding-exp-growth1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 204 },
  'KoAT-2014/scaling-exp-growth.koat': { 'time': 13 },
  'KoAT-2014/nesting-ex1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'KoAT-2014/scaling-doubly-exp-growth': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 327 },
  'KoAT-2014/adding-exp-growth3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 437 },
  'FGPSF09/TACAS01/terminate': { "stdout": True, 'originalBound': "A + B + C + 102", 'parsedBound': "A + B + C + 102", 'degree': 1.0, 'variableCount': 3, 'time': 139 },
  'FGPSF09/SAS05/c.02': { "stdout": True, 'originalBound': "32*A + 6*A^2 + 41", 'parsedBound': "32 * A + 6 * A^2 + 41", 'degree': 2.0, 'variableCount': 1, 'time': 250 },
  'FGPSF09/PLDI06/c.03': { "stdout": True, 'originalBound': "5*A + 2*B + 3*C + 4", 'parsedBound': "5 * A + 2 * B + 3 * C + 4", 'degree': 1.0, 'variableCount': 3, 'time': 186 },
  'FGPSF09/PLDI06/c.04': { "stdout": True, 'originalBound': "A + B + 2", 'parsedBound': "A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 144 },
  'FGPSF09/VMCAI04/complete4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'FGPSF09/VMCAI04/complete2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60019 },
  'FGPSF09/VMCAI04/complete3': { "stdout": True, 'originalBound': "13*A + 12*A^2 + 4", 'parsedBound': "13 * A + 12 * A^2 + 4", 'degree': 2.0, 'variableCount': 1, 'time': 224 },
  'FGPSF09/VMCAI04/complete1': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 103 },
  'FGPSF09/ESOP08/abstractions': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'FGPSF09/CAV02/practical1': { "stdout": True, 'originalBound': "13*A + 12*A^2 + 4", 'parsedBound': "13 * A + 12 * A^2 + 4", 'degree': 2.0, 'variableCount': 1, 'time': 223 },
  'FGPSF09/CAV02/practical2': { "stdout": True, 'originalBound': "4137*B + 20*B^2 + 211282", 'parsedBound': "4137 * B + 20 * B^2 + 211282", 'degree': 2.0, 'variableCount': 1, 'time': 2521 },
  'FGPSF09/VMCAI05/poly1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60055 },
  'FGPSF09/VMCAI05/poly2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60047 },
  'FGPSF09/VMCAI05/poly4': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 2*D + 1", 'parsedBound': "2 * A + 2 * B + 2 * C + 2 * D + 1", 'degree': 1.0, 'variableCount': 4, 'time': 562 },
  'FGPSF09/VMCAI05/poly3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60088 },
  'FGPSF09/RTA08/round': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 180 },
  'FGPSF09/CAV05/c.05': { "stdout": True, 'originalBound': "2*A + 2*B + 3", 'parsedBound': "2 * A + 2 * B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 239 },
  'FGPSF09/LICS04/choice': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60017 },
  'FGPSF09/LICS04/c.01': { "stdout": True, 'originalBound': "12*A + 2*A^2 + 17", 'parsedBound': "12 * A + 2 * A^2 + 17", 'degree': 2.0, 'variableCount': 1, 'time': 171 },
  'FGPSF09/new/randomFullUpDown': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 658 },
  'FGPSF09/new/unsatCond2': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 89 },
  'FGPSF09/patrs/increase1': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 101 },
  'FGPSF09/patrs/pasta/a.03': { "stdout": True, 'originalBound': "120*A + 142*B + 22*A*B + 12*B^2 + 10*A^2 + 111", 'parsedBound': "120 * A + 142 * B + 22 * A * B + 12 * B^2 + 10 * A^2 + 111", 'degree': 2.0, 'variableCount': 2, 'time': 721 },
  'FGPSF09/patrs/pasta/a.08': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 134 },
  'FGPSF09/patrs/pasta/a.02': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 60020 },
  'FGPSF09/patrs/pasta/a.10': { "stdout": True, 'originalBound': "2*A + 2*B + A^2 + 2*A*B + B^2 + 1", 'parsedBound': "2 * A + 2 * B + A^2 + 2 * A * B + B^2 + 1", 'degree': 2.0, 'variableCount': 2, 'time': 253 },
  'FGPSF09/patrs/pasta/a.09': { "stdout": True, 'originalBound': "A + B + 2", 'parsedBound': "A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 127 },
  'FGPSF09/patrs/pasta/a.07': { "stdout": True, 'originalBound': "A + C + 1", 'parsedBound': "A + C + 1", 'degree': 1.0, 'variableCount': 2, 'time': 150 },
  'FGPSF09/patrs/pasta/a.01': { "stdout": True, 'originalBound': "7*A + 2*A^2 + 7", 'parsedBound': "7 * A + 2 * A^2 + 7", 'degree': 2.0, 'variableCount': 1, 'time': 214 },
  'FGPSF09/patrs/pasta/a.11': { "stdout": True, 'originalBound': "18*A + 8*B + 10*C + 12", 'parsedBound': "18 * A + 8 * B + 10 * C + 12", 'degree': 1.0, 'variableCount': 3, 'time': 534 },
  'FGPSF09/patrs/pasta/a.06': { "stdout": True, 'originalBound': "A + B + C + 1", 'parsedBound': "A + B + C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 150 },
  'FGPSF09/patrs/pasta/a.04': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 94 },
  'FGPSF09/patrs/pasta/a.05': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 94 },
  'FGPSF09/patrs/random_full_no_wrap': { "stdout": True, 'originalBound': "?", 'parseError': 'Could not parse bound', 'time': 740 },
  'FGPSF09/patrs/sqrt': { "stdout": True, 'originalBound': "D + 2", 'parsedBound': "D + 2", 'degree': 1.0, 'variableCount': 1, 'time': 313 },
  'FGPSF09/patrs/increase3': { "stdout": True, 'originalBound': "4*A + 2*B + 2*C + 3", 'parsedBound': "4 * A + 2 * B + 2 * C + 3", 'degree': 1.0, 'variableCount': 3, 'time': 175 },
  'FGPSF09/patrs/increase4': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 134 },
  'FGPSF09/patrs/div': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 126 },
  'FGPSF09/patrs/sumto_no_if': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 108 },
  'FGPSF09/patrs/random_no_wrap': { "stdout": True, 'originalBound': "24*A + 7", 'parsedBound': "24 * A + 7", 'degree': 1.0, 'variableCount': 1, 'time': 67 },
  'FGPSF09/patrs/increase2': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 1", 'parsedBound': "2 * A + 2 * B + 2 * C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 175 },
  'FGPSF09/Beerendonk/08': { "stdout": True, 'originalBound': "A + 1", 'parsedBound': "A + 1", 'degree': 1.0, 'variableCount': 1, 'time': 127 },
  'FGPSF09/Beerendonk/13': { "stdout": True, 'originalBound': "A + 2", 'parsedBound': "A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 109 },
  'FGPSF09/Beerendonk/22': { "stdout": True, 'originalBound': "4*A + B + 7", 'parsedBound': "4 * A + B + 7", 'degree': 1.0, 'variableCount': 2, 'time': 166 },
  'FGPSF09/Beerendonk/09': { "stdout": True, 'originalBound': "B + C + 1", 'parsedBound': "B + C + 1", 'degree': 1.0, 'variableCount': 2, 'time': 151 },
  'FGPSF09/Beerendonk/21': { "stdout": True, 'originalBound': "A + B + 3", 'parsedBound': "A + B + 3", 'degree': 1.0, 'variableCount': 2, 'time': 246 },
  'FGPSF09/Beerendonk/02': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 145 },
  'FGPSF09/Beerendonk/10': { "stdout": True, 'originalBound': "2*A + 2", 'parsedBound': "2 * A + 2", 'degree': 1.0, 'variableCount': 1, 'time': 121 },
  'FGPSF09/Beerendonk/04': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'FGPSF09/Beerendonk/20': { "stdout": True, 'originalBound': "A + 3", 'parsedBound': "A + 3", 'degree': 1.0, 'variableCount': 1, 'time': 151 },
  'FGPSF09/Beerendonk/23': { "stdout": True, 'originalBound': "4*A + 5*B + C + 7", 'parsedBound': "4 * A + 5 * B + C + 7", 'degree': 1.0, 'variableCount': 3, 'time': 201 },
  'FGPSF09/Beerendonk/07': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'FGPSF09/Beerendonk/05': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'FGPSF09/Beerendonk/19': { "stdout": True, 'originalBound': "2*A + 3*B + C + 2", 'parsedBound': "2 * A + 3 * B + C + 2", 'degree': 1.0, 'variableCount': 3, 'time': 362 },
  'FGPSF09/Beerendonk/16': { "stdout": True, 'originalBound': "2*A + 2*B + 2*C + 1", 'parsedBound': "2 * A + 2 * B + 2 * C + 1", 'degree': 1.0, 'variableCount': 3, 'time': 180 },
  'FGPSF09/Beerendonk/17': { "stdout": True, 'originalBound': "3*A + 3*B + 1", 'parsedBound': "3 * A + 3 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 244 },
  'FGPSF09/Beerendonk/01': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 95 },
  'FGPSF09/Beerendonk/15': { "stdout": True, 'originalBound': "2*A + 2*B + 1", 'parsedBound': "2 * A + 2 * B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 168 },
  'FGPSF09/Beerendonk/06': { "stdout": True, 'originalBound': "2", 'parsedBound': "2", 'degree': 0.0, 'variableCount': 0, 'time': 30 },
  'FGPSF09/Beerendonk/03': { "stdout": True, 'originalBound': "A + B + 1", 'parsedBound': "A + B + 1", 'degree': 1.0, 'variableCount': 2, 'time': 115 },
  'FGPSF09/Beerendonk/18': { "stdout": True, 'originalBound': "2*A + B + 2", 'parsedBound': "2 * A + B + 2", 'degree': 1.0, 'variableCount': 2, 'time': 318 },
  'FGPSF09/Beerendonk/24': { "stdout": True, 'originalBound': "2*A + 2*B + 7", 'parsedBound': "2 * A + 2 * B + 7", 'degree': 1.0, 'variableCount': 2, 'time': 194 },
  'FGPSF09/Beerendonk/11': { "stdout": True, 'originalBound': "B + 6", 'parsedBound': "B + 6", 'degree': 1.0, 'variableCount': 1, 'time': 156 },
  'KoAT-2013/sect2': { "stdout": True, 'originalBound': "8*B + 2*B^2 + 8", 'parsedBound': "8 * B + 2 * B^2 + 8", 'degree': 2.0, 'variableCount': 1, 'time': 383 },
  'KoAT-2013/sect1-quad': { "stdout": True, 'originalBound': "3*A + B + A^2 + 3", 'parsedBound': "3 * A + B + A^2 + 3", 'degree': 2.0, 'variableCount': 2, 'time': 240 },
  'KoAT-2013/sect5-len': { "stdout": True, 'originalBound': "B + 2", 'parsedBound': "B + 2", 'degree': 1.0, 'variableCount': 1, 'time': 165 },
  'KoAT-2013/sect5-sumSum': { "stdout": True, 'originalBound': "4*B + 6*B^2 + 1", 'parsedBound': "4 * B + 6 * B^2 + 1", 'degree': 2.0, 'variableCount': 1, 'time': 449 },
  'KoAT-2013/sect4-facSum': { "stdout": True, 'originalBound': "105*B + 11*B^2 + 56", 'parsedBound': "105 * B + 11 * B^2 + 56", 'degree': 2.0, 'variableCount': 1, 'time': 379 },
  'KoAT-2013/sect1-lin': { "stdout": True, 'originalBound': "2*A + B + 4", 'parsedBound': "2 * A + B + 4", 'degree': 1.0, 'variableCount': 2, 'time': 217 },
  }

  data['Rank'] = {
  'T2/neg-e-pgarch-fail': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 182 },
  'T2/n-5': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/p-55': { "aspic_stdout": True, 'time': 67 },
  'T2/pgarch': { "aspic_stderr": True, "aspic_stdout": True, 'time': 186 },
  'T2/apchild-live': { "aspic_stderr": True, "aspic_stdout": True, 'time': 62 },
  'T2/cfg': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'T2/loop_on_input': { "aspic_stdout": True, 'time': 64 },
  'T2/slayer-4-filtered': { "aspic_stderr": True, "aspic_stdout": True, 'time': 108 },
  'T2/slayer-n1-filtered': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/simple_pre1': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/1394complete-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/fun6': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/simple_swap_call': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/neg-e-1394complete-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/fake-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 63 },
  'T2/1': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/sumit': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 128 },
  'T2/p-14': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/neg-e-acqrel-fail': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 95 },
  'T2/elmhes': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 769 },
  'T2/p-45': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 94 },
  'T2/polyrank4': { "aspic_stdout": True, 'time': 65 },
  'T2/e-acqrel-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 93 },
  'T2/n-8a': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 83 },
  'T2/afagx1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/destroy_seg_leak': { "aspic_stderr": True, "aspic_stdout": True, 'time': 99 },
  'T2/ex11': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 80 },
  'T2/a.10.c': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/p-60': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((101+1)+1)+1,(1+1)+1])", 'parsedBound': "max(104, 3)", 'degree': 0.0, 'variableCount': 0, 'time': 87 },
  'T2/ex9': { "aspic_stderr": True, "aspic_stdout": True, 'time': 83 },
  'T2/s3-work': { "aspic_stderr": True, "aspic_stdout": True, 'time': 68 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.nor.t2.rlgfixed': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 372 },
  'T2/p-53': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 216 },
  'T2/n-40': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 146 },
  'T2/ludcmp': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 372 },
  'T2/ex36': { "aspic_stderr": True, "aspic_stdout": True, 'time': 68 },
  'T2/p-32': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/traverse': { "aspic_stderr": True, "aspic_stdout": True, 'time': 60 },
  'T2/p-4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/neg-pgarch-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/byron-2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 135 },
  'T2/elmhes.c.i.elmhes.pl.t2.nor.t2.rlgfixed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 717 },
  'T2/p-43': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'T2/neg-e-1394complete-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/s1-saved': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/n-4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 189 },
  'T2/e-popl07-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/slayer-3': { "aspic_stderr": True, "aspic_stdout": True, 'time': 214 },
  'T2/ex40': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/create_via_tmps': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/e-1394complete-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/hqr.c.i.hqr.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 61 },
  'T2/fun4-alt': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/n-18a': { "aspic_stdout": True, 'time': 63 },
  'T2/neg-1394complete-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/n-3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/ex29': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/p-16': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/two_arrays1': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 231 },
  'T2/ex31': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 83 },
  'T2/minmax': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 103 },
  'T2/bf7': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+44)+8)+1)+6)+1])", 'parsedBound': "73", 'degree': 0.0, 'variableCount': 0, 'time': 210 },
  'T2/broydn.c.i.broydn.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/p-44': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 80 },
  'T2/buggyNonTermLoop': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/ex12': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+20)+1)+1])", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 74 },
  'T2/p-46': { "aspic_stdout": True, 'time': 87 },
  'T2/wtf': { "aspic_stderr": True, "aspic_stdout": True, 'time': 60 },
  'T2/byron-1': { "aspic_stdout": True, 'time': 68 },
  'T2/neg-popl07-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/hqr': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/ase_example': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((11+11)+11)+1)+1)+1])", 'parsedBound': "36", 'degree': 0.0, 'variableCount': 0, 'time': 120 },
  'T2/db2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 62 },
  'T2/p-6': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/dsa_test13': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/refine_disj_problem': { "aspic_stdout": True, 'time': 60 },
  'T2/matmul': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 103 },
  'T2/p-20': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/matrixsqrt': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 244 },
  'T2/consts5': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(1+1)+1])", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/jacobi': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/n-10': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 244 },
  'T2/fourn.c.i.fourn.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 53 },
  'T2/bf8': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+49)+9)+1)+6)+1])", 'parsedBound': "79", 'degree': 0.0, 'variableCount': 0, 'time': 201 },
  'T2/sas2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 332 },
  'T2/array1': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 61 },
  'T2/ns': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 171 },
  'T2/broydn': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/consts4nt': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/ex32': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/ex21': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+101)+101)+1)+1])", 'parsedBound': "205", 'degree': 0.0, 'variableCount': 0, 'time': 90 },
  'T2/bf13': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+74)+14)+1)+6)+1])", 'parsedBound': "109", 'degree': 0.0, 'variableCount': 0, 'time': 211 },
  'T2/array_init': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+11)+1)+1])", 'parsedBound': "14", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/firewire': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 577 },
  'T2/polyrank6': { "aspic_stdout": True, 'time': 65 },
  'T2/3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/byron-3': { "aspic_stdout": True, 'time': 63 },
  'T2/oct_vs_subpoly': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/n-6': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 85 },
  'T2/eric3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 93 },
  'T2/slayer-1-filtered': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/bf9': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+54)+10)+1)+6)+1])", 'parsedBound': "85", 'degree': 0.0, 'variableCount': 0, 'time': 207 },
  'T2/bs': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 126 },
  'T2/subpoly_crash': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 71 },
  'T2/n-12a': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 68 },
  'T2/agafp': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/n-1c': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 190 },
  'T2/fun4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/traverse_seg2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 63 },
  'T2/popl07-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/dsa_test8': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/spiral': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 115 },
  'T2/graycode': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 663 },
  'T2/reverse_div4': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/p-33': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 96 },
  'T2/svdcmp': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/simple': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 64 },
  'T2/nested': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 127 },
  'T2/collatz': { "aspic_stdout": True, 'time': 82 },
  'T2/1394complete-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/e-pgarch-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/Loop': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/p-52': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 116 },
  'T2/st88': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'T2/rlft3.c.i.rlft3.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/queue_1': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((((1+2)+1)+2)+1)+1)+1])", 'parsedBound': "9", 'degree': 0.0, 'variableCount': 0, 'time': 141 },
  'T2/ex17': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 109 },
  'T2/toeplz.c.i.toeplz.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/fun1': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/fun2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 62 },
  'T2/zeroconf': { "aspic_stdout": True, 'time': 0 },
  'T2/apchild-accepted-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 61 },
  'T2/ex33': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 83 },
  'T2/heidy3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/p-21': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 81 },
  'T2/reverse_seg_cyclic': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/simple_pre2': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/1394-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/two_arrays6': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 296 },
  'T2/n-37': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'T2/dsa_test4': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/toeplz.c.i.toeplz.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/cover': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 1422 },
  'T2/st88.bug': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 82 },
  'T2/e-pgarch-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 53 },
  'T2/n-17': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/rev_nt4': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/print': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/fermat': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/smagillb-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 130 },
  'T2/array': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 63 },
  'T2/constants': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 97 },
  'T2/fun11': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 120 },
  'T2/hongyi1': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/ex15': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 121 },
  'T2/eric2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/w2_nt': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/ex22': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/bf11': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+64)+12)+1)+6)+1])", 'parsedBound': "97", 'degree': 0.0, 'variableCount': 0, 'time': 210 },
  'T2/p-5': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/p-58': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/n-8': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 157 },
  'T2/dsa_test15': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+11)+11)+1)+1])", 'parsedBound': "25", 'degree': 0.0, 'variableCount': 0, 'time': 84 },
  'T2/sequential_swap': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 82 },
  'T2/6': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 68 },
  'T2/ex4': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((1+11)+11)+11)+1)+1])", 'parsedBound': "36", 'degree': 0.0, 'variableCount': 0, 'time': 143 },
  'T2/nakata_withassume': { "aspic_stdout": True, 'time': 0 },
  'T2/consts5nt': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/neg-popl07-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 61 },
  'T2/bf14': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+79)+15)+1)+6)+1])", 'parsedBound': "115", 'degree': 0.0, 'variableCount': 0, 'time': 209 },
  'T2/ex8': { "aspic_stderr": True, "aspic_stdout": True, 'time': 66 },
  'T2/p-1b': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/ex1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'T2/n-15a': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 168 },
  'T2/consts3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/polyrank1': { "aspic_stdout": True, 'time': 61 },
  'T2/pentagon': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 237 },
  'T2/fast_poll': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/edn': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/d': { "aspic_stdout": True, 'time': 65 },
  'T2/p-40': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(1+1)+1,(((500+(-1*D__o'))+1)+1)+1])", 'parsedBound': "max(3, 500 + -1 * D__o' + 1 + 1 + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 89 },
  'T2/fun2b': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/dropbuf': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/pldi': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 99 },
  'T2/241': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([1+1,(1+(((3/2)*A__o')+((1/2)*(A__o'*A__o'))))+1])", 'parsedBound': "max(2, 1 + 3 / 2 * A__o' + 1 / 2 * A__o' * A__o' + 1)", 'degree': 2.0, 'variableCount': 1, 'time': 71 },
  'T2/statemate': { "aspic_stderr": True, "aspic_stdout": True, 'time': 72 },
  'T2/fun10b': { "aspic_stderr": True, "aspic_stdout": True, 'time': 53 },
  'T2/example': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([1+1,1+1,(1+((-1+B__o')+A__o'))+1])", 'parsedBound': "max(2, 2, 1 + -1 + B__o' + A__o' + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 77 },
  'T2/heidy1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/bf16': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+89)+17)+1)+6)+1])", 'parsedBound': "127", 'degree': 0.0, 'variableCount': 0, 'time': 207 },
  'T2/slayer-2-filtered': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/bubblesort_inner_loop': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+5)+1)+1])", 'parsedBound': "8", 'degree': 0.0, 'variableCount': 0, 'time': 85 },
  'T2/p-12': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/p-10': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 116 },
  'T2/n-32': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/fun3': { "aspic_stderr": True, "aspic_stdout": True, 'time': 61 },
  'T2/fun10': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/e-acqrel-fail': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 89 },
  'T2/n-21': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/ex2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 83 },
  'T2/byron-4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 102 },
  'T2/intSqRoot': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/zeroconf_withassume': { "aspic_stdout": True, 'time': 0 },
  'T2/n-12': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 81 },
  'T2/array2': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+51)+1)+1])", 'parsedBound': "54", 'degree': 0.0, 'variableCount': 0, 'time': 78 },
  'T2/brp': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/bf19': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+104)+20)+1)+6)+1])", 'parsedBound': "145", 'degree': 0.0, 'variableCount': 0, 'time': 208 },
  'T2/selectSort': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 165 },
  'T2/afagp-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/simple_pre3': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/ud': { "aspic_stdout": True, 'time': 420 },
  'T2/p-19': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/send-more-money': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/consts1': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(1+200)+1])", 'parsedBound': "202", 'degree': 0.0, 'variableCount': 0, 'time': 65 },
  'T2/p-7b': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 82 },
  'T2/heidy7-simple': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/slayer-n3-filtered': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/dsa_test5': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 72 },
  'T2/janne_complex': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 129 },
  'T2/apchild-accepted': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/simpleWhile': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/slayer-n2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/streamserver.bug': { "aspic_stderr": True, "aspic_stdout": True, 'time': 61 },
  'T2/mc91': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/rlft3': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/neg-e-acqrel-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 93 },
  'T2/jacobi.c.i.jacobi.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/n-6a': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/consts1nt': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 63 },
  'T2/disj_nightmare_abi': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/n-15': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/pearl-necklace': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/p-56': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 96 },
  'T2/dsa_test11': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/hqr.c.i.hqr.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 70 },
  'T2/crc': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/n-7': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/polyrank5': { "aspic_stdout": True, 'time': 62 },
  'T2/invgen': { "aspic_stdout": True, 'time': 59 },
  'T2/wrong_loop': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/elmhes.c.i.elmhes.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/seq2': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(1+(1+A__o'))+1])", 'parsedBound': "1 + 1 + A__o' + 1", 'degree': 1.0, 'variableCount': 1, 'time': 69 },
  'T2/ex23': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+1)+37)+1,(1+1)+1])", 'parsedBound': "max(40, 3)", 'degree': 0.0, 'variableCount': 0, 'time': 76 },
  'T2/dsa_test6': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+11)+1)+1])", 'parsedBound': "14", 'degree': 0.0, 'variableCount': 0, 'time': 74 },
  'T2/slayer-n1': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 64 },
  'T2/p-3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 80 },
  'T2/n-46': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 84 },
  'T2/seq': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 62 },
  'T2/eric1': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([1+1,(((((3/2)*B__o')+((1/2)*(B__o'*B__o')))+(((1/2)*B__o')+((1/2)*(B__o'*B__o'))))+1)+1,1+1])", 'parsedBound': "max(2, 3 / 2 * B__o' + 1 / 2 * B__o' * B__o' + 1 / 2 * B__o' + 1 / 2 * B__o' * B__o' + 1 + 1, 2)", 'degree': 2.0, 'variableCount': 1, 'time': 87 },
  'T2/p-1d': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 90 },
  'T2/stored': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 90 },
  'T2/fun9': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 1266 },
  'T2/smagillc-fail': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 103 },
  'T2/7': { "aspic_stdout": True, 'time': 60 },
  'T2/non_term': { "aspic_stdout": True, 'time': 60 },
  'T2/spctrm.c.i.spctrm.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/polling': { "aspic_stderr": True, "aspic_stdout": True, 'time': 60 },
  'T2/array_free': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+43)+1)+1])", 'parsedBound': "46", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/heidy7': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 84 },
  'T2/n-13': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 71 },
  'T2/p-22': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(1+1)+1,((A__o'+1)+1)+1])", 'parsedBound': "max(3, A__o' + 1 + 1 + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 80 },
  'T2/dsa_test9': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/p-1c': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 132 },
  'T2/p-43-terminate': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 668 },
  'T2/ex18': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 139 },
  'T2/5': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/p-18': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/bsort100': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 223 },
  'T2/n-20': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/simple_pre': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 68 },
  'T2/heidy6': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/neg-smagilla-fail': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 102 },
  'T2/jacobi.c.i.jacobi.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/neg-e-popl07-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/qrdcmp': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/queue_10': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((((1+11)+10)+11)+10)+1)+1])", 'parsedBound': "45", 'degree': 0.0, 'variableCount': 0, 'time': 120 },
  'T2/efegp': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/array_init_assign': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+3)+3)+1)+1])", 'parsedBound': "9", 'degree': 0.0, 'variableCount': 0, 'time': 78 },
  'T2/ndes': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/consts4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/ctl': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 131 },
  'T2/ex10': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 158 },
  'T2/bf18': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+99)+19)+1)+6)+1])", 'parsedBound': "139", 'degree': 0.0, 'variableCount': 0, 'time': 206 },
  'T2/spctrm': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/ex34': { "aspic_stderr": True, "aspic_stdout": True, 'time': 53 },
  'T2/dropbuf-live': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/p-1a': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 127 },
  'T2/p-42': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/two_arrays2': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 270 },
  'T2/walk': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/p-34': { "aspic_stderr": True, "aspic_stdout": True, 'time': 170 },
  'T2/flipflop': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/fun5': { "aspic_stdout": True, 'time': 0 },
  'T2/heidy8': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/mc91test': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 107 },
  'T2/consts3nt': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/nested2': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/fourn': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/reverse': { "aspic_stderr": True, "aspic_stdout": True, 'time': 70 },
  'T2/destroy': { "aspic_stderr": True, "aspic_stdout": True, 'time': 60 },
  'T2/bf12': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+69)+13)+1)+6)+1])", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 208 },
  'T2/bio': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/p-61': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((901+1)+1)+1])", 'parsedBound': "904", 'degree': 0.0, 'variableCount': 0, 'time': 81 },
  'T2/vmcai_bytes': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/sort': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 535 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 61 },
  'T2/ex19': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/p-8': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 93 },
  'T2/slayer-n2-filtered': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/bubbleSort': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 149 },
  'T2/huh': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/n-16': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/n-1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 129 },
  'T2/slayer-1-rf': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/bf10': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+59)+11)+1)+6)+1])", 'parsedBound': "91", 'degree': 0.0, 'variableCount': 0, 'time': 210 },
  'T2/db3': { "aspic_stderr": True, "aspic_stdout": True, 'time': 65 },
  'T2/fourn.c.i.fourn.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/array3': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+51)+51)+1)+1])", 'parsedBound': "105", 'degree': 0.0, 'variableCount': 0, 'time': 83 },
  'T2/ex7': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+11)+1)+1])", 'parsedBound': "14", 'degree': 0.0, 'variableCount': 0, 'time': 84 },
  'T2/p-49': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/select': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 804 },
  'T2/neg-e-pgarch-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 155 },
  'T2/simple_control_on_input': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(1+1)+1,((1+20)+1)+1])", 'parsedBound': "max(3, 23)", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/dsa_test10': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((11+11)+1)+1)+1])", 'parsedBound': "25", 'degree': 0.0, 'variableCount': 0, 'time': 96 },
  'T2/create_seg': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/bf20': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+109)+21)+1)+6)+1])", 'parsedBound': "151", 'degree': 0.0, 'variableCount': 0, 'time': 201 },
  'T2/insertsort': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 102 },
  'T2/ex26': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+101)+101)+1)+1])", 'parsedBound': "205", 'degree': 0.0, 'variableCount': 0, 'time': 83 },
  'T2/destroy_seg': { "aspic_stderr": True, "aspic_stdout": True, 'time': 53 },
  'T2/p-7': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 81 },
  'T2/bf5': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+34)+6)+1)+6)+1])", 'parsedBound': "61", 'degree': 0.0, 'variableCount': 0, 'time': 204 },
  'T2/n-3a': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 135 },
  'T2/n-33': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 129 },
  'T2/1394-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/ex30': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 116 },
  'T2/complex_guard': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((4+4)+1)+1)+1)+1])", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 79 },
  'T2/simple_fail': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/matmult': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 280 },
  'T2/loop3': { "aspic_stdout": True, 'time': 1118 },
  'T2/232': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([1+1,(1+(((3/2)*A__o')+((1/2)*(A__o'*A__o'))))+1])", 'parsedBound': "max(2, 1 + 3 / 2 * A__o' + 1 / 2 * A__o' * A__o' + 1)", 'degree': 2.0, 'variableCount': 1, 'time': 74 },
  'T2/consts2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/fun8': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/cnt': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/two_arrays': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((((((1+51)+51)+51)+51)+51)+51)+1)+1])", 'parsedBound': "309", 'degree': 0.0, 'variableCount': 0, 'time': 205 },
  'T2/acqrel-fail': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 90 },
  'T2/curious': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 68 },
  'T2/ex37': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 63 },
  'T2/toeplz': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/ex14': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+11)+1)+1])", 'parsedBound': "14", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/polyrank7': { "aspic_stdout": True, 'time': 66 },
  'T2/eric': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/jfdctint': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/slayer-3-new': { "aspic_stderr": True, "aspic_stdout": True, 'time': 181 },
  'T2/magic': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 64 },
  'T2/randomwalk_withassume': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "max([(((1+-1)+-1)+1)+1])", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 208 },
  'T2/p-63': { "aspic_stdout": True, 'time': 69 },
  'T2/create': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/n-14': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 96 },
  'T2/p-13': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/bf6': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+39)+7)+1)+6)+1])", 'parsedBound': "67", 'degree': 0.0, 'variableCount': 0, 'time': 206 },
  'T2/heidy2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 71 },
  'T2/n-16a': { "aspic_stdout": True, 'time': 61 },
  'T2/traverse_seg': { "aspic_stderr": True, "aspic_stdout": True, 'time': 60 },
  'T2/rev_nt3': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/brp_withassume': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/p-19a': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 138 },
  'T2/p-9': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 94 },
  'T2/p-37': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 100 },
  'T2/ex16': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/p-41': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/fir': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 228 },
  'T2/polling.bug': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/queens': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 714 },
  'T2/apchildlive-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/polyrank2': { "aspic_stdout": True, 'time': 66 },
  'T2/p-36': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/fibcall': { "aspic_stdout": True, 'time': 72 },
  'T2/bitcount32': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+33)+1)+1])", 'parsedBound': "36", 'degree': 0.0, 'variableCount': 0, 'time': 140 },
  'T2/p-1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 103 },
  'T2/bf17': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+94)+18)+1)+6)+1])", 'parsedBound': "133", 'degree': 0.0, 'variableCount': 0, 'time': 313 },
  'T2/popl07-fail': { "aspic_stderr": True, "aspic_stdout": True, 'time': 63 },
  'T2/ex13': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 63 },
  'T2/polyrank3': { "aspic_stdout": True, 'time': 60 },
  'T2/slayer-3-filtered': { "aspic_stderr": True, "aspic_stdout": True, 'time': 62 },
  'T2/dead.neg-st88b-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/sudoku': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/queue_1000': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((((1+1001)+1000)+1001)+1000)+1)+1])", 'parsedBound': "4005", 'degree': 0.0, 'variableCount': 0, 'time': 121 },
  'T2/heidy9': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 68 },
  'T2/tqli': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/fdct': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/p-15': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 72 },
  'T2/dsa_test12': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/fuhs-inflasso': { "aspic_stdout": True, 'time': 63 },
  'T2/heidy5': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'T2/broydn.c.i.broydn.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'T2/fun7': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/simple_array_inversion': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+3)+1)+1])", 'parsedBound': "6", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/sas1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/smagillc-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 105 },
  'T2/neg-smagilla-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 105 },
  'T2/rev_nt2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/curious4': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/consts2nt': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/fun1b': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/dsa_test': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 64 },
  'T2/tqli.c.i.tqli.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/bf15': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+6)+6)+84)+16)+1)+6)+1])", 'parsedBound': "121", 'degree': 0.0, 'variableCount': 0, 'time': 210 },
  'T2/iecs': { "aspic_stdout": True, 'time': 65 },
  'T2/smagilla-succeed': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 99 },
  'T2/vmcai_struct': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 64 },
  'T2/rewrite': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'T2/spctrm.c.i.spctrm.pl.t2.nor.t2.rlgfixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 58 },
  'T2/slayer-n5-filtered': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'T2/n-48': { "aspic_stdout": True, 'time': 71 },
  'T2/tqli.c.i.tqli.pl.t2.fixed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'T2/queue_100': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((((1+101)+100)+101)+100)+1)+1])", 'parsedBound': "405", 'degree': 0.0, 'variableCount': 0, 'time': 126 },
  'T2/n-9': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 163 },
  'T2/ex20': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+1025)+1)+1])", 'parsedBound': "1028", 'degree': 0.0, 'variableCount': 0, 'time': 101 },
  'T2/w1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/dummy': { "aspic_stdout": True, 'time': 64 },
  'T2/nakata': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57873 },
  'T2/randomwalk': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 166 },
  'T2/n-36': { "aspic_stderr": True, "aspic_stdout": True, 'time': 72 },
  'T2/ex3': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+22)+1)+1])", 'parsedBound': "25", 'degree': 0.0, 'variableCount': 0, 'time': 78 },
  'T2/traverse_twice': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'T2/n_firewire_instrumented-PP': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 21200 },
  'T2/n-1d': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/new_ex': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 118 },
  'T2/neg-1394complete-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 55 },
  'T2/traverse2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 64 },
  'T2/bitcount16': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+17)+1)+1])", 'parsedBound': "20", 'degree': 0.0, 'variableCount': 0, 'time': 133 },
  'T2/ex27': { "aspic_stderr": True, "aspic_stdout": True, 'time': 71 },
  'T2/heidy10': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/simple_double_free': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/n-18': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 72 },
  'T2/ex6': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'T2/streamserver-succeed': { "aspic_stderr": True, "aspic_stdout": True, 'time': 60 },
  'T2/dsa_test1': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'SAS10/speedpldi4': { "aspic_stdout": True, 'time': 84 },
  'SAS10/rsd': { "aspic_stdout": True, 'time': 91 },
  'SAS10/ackermann': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((((1+A__o')+1)+A__o')+1)+A__o')+A__o')+1)+1)+1,(((1+A__o')+1)+1)+1])", 'parsedBound': "max(1 + A__o' + 1 + A__o' + 1 + A__o' + A__o' + 1 + 1 + 1, 1 + A__o' + 1 + 1 + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 116 },
  'SAS10/perfect': { "aspic_stdout": True, 'time': 105 },
  'SAS10/realselect': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 244 },
  'SAS10/complex': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'SAS10/realheapsort': { "aspic_stderr": True, "aspic_stdout": True, 'time': 68 },
  'SAS10/realshellsort': { "aspic_stderr": True, "aspic_stdout": True, 'time': 61 },
  'SAS10/nestedLoop': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 259 },
  'SAS10/maccarthy91': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 156 },
  'SAS10/counterex1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "max([(((((1+1)+-1)+(1+A__o'))+-1)+1)+1])", 'parsedBound': "1 + 1 + A__o' + -1 + 1 + 1", 'degree': 1.0, 'variableCount': 1, 'time': 249 },
  'SAS10/speedpldi3': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+1)+1)+1)+1,((1+1)+1)+1,((((1+1)+(C__o'*A__o'))+((-2+C__o')+A__o'))+1)+1,(((((1+1)+(C__o'*A__o'))+1)+((-2+C__o')+A__o'))+1)+1,(((((1+1)+(C__o'*A__o'))+1)+C__o')+1)+1,((1+1)+1)+1,(((1+1)+1)+1)+1,(((1+1)+1)+1)+1])", 'parsedBound': "max(5, 4, 2 + C__o' * A__o' + -2 + C__o' + A__o' + 1 + 1, 2 + C__o' * A__o' + 1 + -2 + C__o' + A__o' + 1 + 1, 2 + C__o' * A__o' + 1 + C__o' + 1 + 1, 4, 5, 5)", 'degree': 2.0, 'variableCount': 2, 'time': 341 },
  'SAS10/random2d': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 251 },
  'SAS10/wise': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+1)+((-2+(-1*C__o'))+A__o'))+1)+1,((1+1)+1)+1,(((1+1)+((-2+C__o')+(-1*A__o')))+1)+1])", 'parsedBound': "max(2 + -2 + -1 * C__o' + A__o' + 1 + 1, 4, 2 + -2 + C__o' + -1 * A__o' + 1 + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 125 },
  'SAS10/nd_loop': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((1+10)+1)+9)+1)+1])", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 95 },
  'SAS10/loops': { "aspic_stdout": True, 'time': 82 },
  'SAS10/gcd': { "aspic_stdout": True, 'time': 90 },
  'SAS10/aaron2': { "aspic_stdout": True, 'time': 92 },
  'SAS10/random1d': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+1)+A__o')+1)+1,((1+1)+1)+1])", 'parsedBound': "max(2 + A__o' + 1 + 1, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 106 },
  'SAS10/wcet1': { "aspic_stdout": True, 'time': 103 },
  'SAS10/realbubble': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 226 },
  'SAS10/wcet2': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'SAS10/terminate': { "aspic_stdout": True, 'time': 87 },
  'SAS10/speedpldi2': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+1)+1)+1,((((1+1)+G__o')+(G__o'+(-1*A__o')))+1)+1,((1+1)+1)+1,(((1+1)+G__o')+1)+1,((1+1)+1)+1])", 'parsedBound': "max(4, 2 + G__o' + G__o' + -1 * A__o' + 1 + 1, 4, 2 + G__o' + 1 + 1, 4)", 'degree': 1.0, 'variableCount': 2, 'time': 219 },
  'SAS10/ndecr': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+1)+(-1+A__o'))+1)+1,((1+1)+1)+1])", 'parsedBound': "max(2 + -1 + A__o' + 1 + 1, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 86 },
  'SAS10/cousot9': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "max([((1+1)+1)+1,((((1+1)+-1)+A__o')+1)+1])", 'parsedBound': "max(4, 1 + A__o' + 1 + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 147 },
  'SAS10/ax': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+1)+1)+1,((((1+((1+(-2*A__o'))+(A__o'*A__o')))+1)+(-2+A__o'))+1)+1,(((1+((1+(-2*A__o'))+(A__o'*A__o')))+1)+1)+1])", 'parsedBound': "max(4, 1 + 1 + -2 * A__o' + A__o' * A__o' + 1 + -2 + A__o' + 1 + 1, 1 + 1 + -2 * A__o' + A__o' * A__o' + 1 + 1 + 1)", 'degree': 2.0, 'variableCount': 1, 'time': 136 },
  'SAS10/speedFails4': { "aspic_stdout": True, 'time': 106 },
  'SAS10/while2': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+1)+1)+1,((((1+1)+(A__o'*A__o'))+A__o')+1)+1])", 'parsedBound': "max(4, 2 + A__o' * A__o' + A__o' + 1 + 1)", 'degree': 2.0, 'variableCount': 1, 'time': 134 },
  'SAS10/insertsort': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((1+1)+1)+1,(((((1+1)+(-1+A__o'))+(((-1/2)*A__o')+((1/2)*(A__o'*A__o'))))+(-1+A__o'))+1)+1])", 'parsedBound': "max(4, 2 + -1 + A__o' + -1 / 2 * A__o' + 1 / 2 * A__o' * A__o' + -1 + A__o' + 1 + 1)", 'degree': 2.0, 'variableCount': 1, 'time': 232 },
  'SAS10/relation1': { "aspic_stdout": True, "errors": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'SAS10/sipmabubble': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+1)+(1+A__o'))+1)+1,(((((1+1)+(1+A__o'))+(((1/2)*A__o')+((1/2)*(A__o'*A__o'))))+(((1/2)*A__o')+((1/2)*(A__o'*A__o'))))+1)+1])", 'parsedBound': "max(2 + 1 + A__o' + 1 + 1, 2 + 1 + A__o' + 1 / 2 * A__o' + 1 / 2 * A__o' * A__o' + 1 / 2 * A__o' + 1 / 2 * A__o' * A__o' + 1 + 1)", 'degree': 2.0, 'variableCount': 1, 'time': 279 },
  'SAS10/exmini': { "aspic_stdout": True, 'time': 91 },
  'SAS10/easy2': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+1)+A__o')+1)+1,((1+1)+1)+1])", 'parsedBound': "max(2 + A__o' + 1 + 1, 4)", 'degree': 1.0, 'variableCount': 1, 'time': 204 },
  'SAS10/easy1': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+40)+1)+1)+1,((((1+40)+40)+1)+1)+1])", 'parsedBound': "max(44, 84)", 'degree': 0.0, 'variableCount': 0, 'time': 132 },
  'SAS10/determinant': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((1+1)+A__o')+((-1+((1/2)*A__o'))+((1/2)*(A__o'*A__o'))))+1)+(((-1/3)*A__o')+((1/3)*((A__o'*A__o')*A__o'))))+1)+1,((((1+1)+A__o')+1)+1)+1,(1+1)+1])", 'parsedBound': "max(2 + A__o' + -1 + 1 / 2 * A__o' + 1 / 2 * A__o' * A__o' + 1 + -1 / 3 * A__o' + 1 / 3 * A__o' * A__o' * A__o' + 1 + 1, 2 + A__o' + 1 + 1 + 1, 3)", 'degree': 3.0, 'variableCount': 1, 'time': 186 },
  'costa/misc/mspe': { "aspic_stderr": True, 'time': 21 },
  'costa/misc/divide_and_conquer': { 'time': 18 },
  'costa/misc/logarithmic': { "aspic_stderr": True, 'time': 21 },
  'costa/misc/exponential': { 'time': 18 },
  'costa/misc/linear': { "aspic_stderr": True, 'time': 21 },
  'costa/misc/quadratic': { 'time': 18 },
  'costa/misc/n_log_n': { 'time': 18 },
  'costa/misc/merge': { "aspic_stderr": True, 'time': 21 },
  'costa/misc/ms': { 'time': 18 },
  'costa/misc/no_cover_point': { 'time': 18 },
  'costa/misc/ack': { "aspic_stderr": True, 'time': 21 },
  'costa/misc/direct_n_log_n': { "aspic_stderr": True, 'time': 21 },
  'costa/RAML/eratosthenes': { 'time': 18 },
  'costa/RAML/listsort': { 'time': 18 },
  'costa/RAML/matrix': { 'time': 18 },
  'costa/RAML/insertionsort': { 'time': 18 },
  'costa/RAML/dyade': { 'time': 18 },
  'costa/RAML/mergesort': { 'time': 18 },
  'costa/RAML/minsort': { 'time': 18 },
  'costa/RAML/rationalPotential': { "aspic_stderr": True, 'time': 21 },
  'costa/RAML/lcs': { 'time': 18 },
  'costa/RAML/cleavermmult': { 'time': 18 },
  'costa/RAML/quicksort': { 'time': 18 },
  'costa/RAML/bitvectors': { 'time': 18 },
  'costa/RAML/duplicates': { 'time': 18 },
  'costa/jvm-cost/Factorial': { 'time': 18 },
  'costa/jvm-cost/Power': { 'time': 18 },
  'costa/jvm-cost/Fibonacci': { 'time': 18 },
  'costa/jvm-cost/DetEval': { 'time': 18 },
  'costa/jvm-cost/EvenDigits': { 'time': 18 },
  'costa/jvm-cost/ListInter': { 'time': 18 },
  'costa/jvm-cost/Incr': { 'time': 18 },
  'costa/jvm-cost/Polynomial': { 'time': 18 },
  'costa/jvm-cost/Hanoi': { 'time': 18 },
  'costa/jvm-cost/SelectOrd': { 'time': 18 },
  'costa/jvm-cost/Delete': { 'time': 18 },
  'costa/jvm-cost/FibonacciNew': { 'time': 18 },
  'costa/jvm-cost/MergeList': { 'time': 18 },
  'costa/jvm-cost/FactSum': { 'time': 18 },
  'costa/jvm-cost/Matrixinverse': { 'time': 18 },
  'costa/jvm-cost/ms': { 'time': 18 },
  'costa/jvm-cost/ArrayReverse': { 'time': 18 },
  'costa/jvm-cost/Cons': { 'time': 18 },
  'costa/jvm-cost/MatMult': { 'time': 18 },
  'costa/jvm-cost/BST': { 'time': 18 },
  'costa/jvm-cost/LinEqSolve': { 'time': 18 },
  'costa/jvm-cost/FactSumNew': { 'time': 18 },
  'costa/jvm-cost/EvenDigitsNew': { 'time': 18 },
  'costa/jvm-cost/Concat': { 'time': 18 },
  'costa/jvm-cost/ListReverse': { 'time': 18 },
  'costa/jvm-cost/DivByTwo': { 'time': 18 },
  'c-examples/ABC/ex11': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 89 },
  'c-examples/ABC/ex12': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 91 },
  'c-examples/ABC/ex04': { "aspic_stderr": True, "aspic_stdout": True, 'time': 56 },
  'c-examples/ABC/ex02': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 90 },
  'c-examples/ABC/ex15': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 243 },
  'c-examples/ABC/ex09': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 98 },
  'c-examples/ABC/ex07': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 96 },
  'c-examples/ABC/ex08': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 88 },
  'c-examples/ABC/ex01': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 71 },
  'c-examples/ABC/ex05': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'c-examples/ABC/ex10': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 88 },
  'c-examples/ABC/ex03': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 156 },
  'c-examples/ABC/ex14': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 179 },
  'c-examples/ABC/ex13': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 162 },
  'c-examples/ABC/ex06': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 91 },
  'c-examples/WTC/realheapsort_step2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 266 },
  'c-examples/WTC/speedpldi4': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((((((1+1)+1)+(1+B__o'))+B__o')+(-1+A__o'))+((1+B__o')+(-1*A__o')))+1)+1,((((((1+1)+1)+(1+B__o'))+B__o')+((1+B__o')+(-1*A__o')))+1)+1,(((1+1)+1)+1)+1,(((1+1)+1)+1)+1,(((1+1)+1)+1)+1])", 'parsedBound': "max(3 + 1 + B__o' + B__o' + -1 + A__o' + 1 + B__o' + -1 * A__o' + 1 + 1, 3 + 1 + B__o' + B__o' + 1 + B__o' + -1 * A__o' + 1 + 1, 5, 5, 5)", 'degree': 1.0, 'variableCount': 2, 'time': 109 },
  'c-examples/WTC/rsd': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 104 },
  'c-examples/WTC/perfect': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 128 },
  'c-examples/WTC/realselect': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 111 },
  'c-examples/WTC/complex': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 139 },
  'c-examples/WTC/realheapsort': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 280 },
  'c-examples/WTC/realshellsort': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 265 },
  'c-examples/WTC/nestedLoop': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 261 },
  'c-examples/WTC/realheapsort_step1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 528 },
  'c-examples/WTC/speedpldi3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 116 },
  'c-examples/WTC/random2d': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 406 },
  'c-examples/WTC/wise': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((((((1+1)+1)+((1+B__o')+A__o'))+((-2+B__o')+A__o'))+(-3+(2*B__o')))+((-2+B__o')+A__o'))+1)+1,(((((((1+1)+1)+((1+B__o')+A__o'))+((-2+B__o')+A__o'))+(-3+(2*B__o')))+(-2+(2*A__o')))+1)+1,((((((1+1)+1)+((1+B__o')+A__o'))+((-2+B__o')+A__o'))+((-2+B__o')+A__o'))+1)+1,(((((((1+1)+1)+((1+B__o')+A__o'))+((-2+B__o')+A__o'))+((-2+B__o')+A__o'))+(-2+(2*A__o')))+1)+1,((((((1+1)+1)+((1+B__o')+A__o'))+((-2+B__o')+A__o'))+(-3+(2*B__o')))+1)+1,((((((1+1)+1)+((1+B__o')+A__o'))+((-2+B__o')+A__o'))+((-2+B__o')+A__o'))+1)+1,((((((1+1)+1)+((1+B__o')+A__o'))+((-2+B__o')+A__o'))+((-2+B__o')+A__o'))+1)+1,((((1+1)+1)+((1+B__o')+A__o'))+1)+1,((((1+1)+1)+((1+B__o')+A__o'))+1)+1,((((1+1)+1)+((1+B__o')+A__o'))+1)+1])", 'parsedBound': "max(3 + 1 + B__o' + A__o' + -2 + B__o' + A__o' + -3 + 2 * B__o' + -2 + B__o' + A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + -2 + B__o' + A__o' + -3 + 2 * B__o' + -2 + 2 * A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + -2 + B__o' + A__o' + -2 + B__o' + A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + -2 + B__o' + A__o' + -2 + B__o' + A__o' + -2 + 2 * A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + -2 + B__o' + A__o' + -3 + 2 * B__o' + 1 + 1, 3 + 1 + B__o' + A__o' + -2 + B__o' + A__o' + -2 + B__o' + A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + -2 + B__o' + A__o' + -2 + B__o' + A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + 1 + 1, 3 + 1 + B__o' + A__o' + 1 + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 146 },
  'c-examples/WTC/nd_loop': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((1+1)+3)+1)+1)+1])", 'parsedBound': "8", 'degree': 0.0, 'variableCount': 0, 'time': 88 },
  'c-examples/WTC/loops': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 95 },
  'c-examples/WTC/gcd': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 101 },
  'c-examples/WTC/aaron2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 104 },
  'c-examples/WTC/random1d': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(((1+1)+1)+1)+1,(((((1+1)+(1+A__o'))+1)+A__o')+1)+1])", 'parsedBound': "max(5, 2 + 1 + A__o' + 1 + A__o' + 1 + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 98 },
  'c-examples/WTC/wcet1': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([((((((((1+1)+A__o')+1)+A__o')+A__o')+A__o')+A__o')+1)+1,(((1+1)+1)+1)+1])", 'parsedBound': "max(2 + A__o' + 1 + A__o' + A__o' + A__o' + A__o' + 1 + 1, 5)", 'degree': 1.0, 'variableCount': 1, 'time': 157 },
  'c-examples/WTC/realbubble': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 157 },
  'c-examples/WTC/wcet2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 89 },
  'c-examples/WTC/terminate': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 80 },
  'c-examples/WTC/speedpldi2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'c-examples/WTC/ndecr': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'c-examples/WTC/cousot9': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 95 },
  'c-examples/WTC/ax': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 89 },
  'c-examples/WTC/speedFails4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 95 },
  'c-examples/WTC/while2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 93 },
  'c-examples/WTC/insertsort': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 118 },
  'c-examples/WTC/sipmabubble': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 173 },
  'c-examples/WTC/exmini': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'c-examples/WTC/counterex1b': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 201 },
  'c-examples/WTC/easy2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 73 },
  'c-examples/WTC/sipma91': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 161 },
  'c-examples/WTC/easy1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 87 },
  'c-examples/Rank/ex1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 206 },
  'c-examples/Rank/ex2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 142 },
  'c-examples/Rank/ex3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 257 },
  'c-examples/SPEED/PLDI09/Example6': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 186 },
  'c-examples/SPEED/PLDI09/Example2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 115 },
  'c-examples/SPEED/PLDI09/NestedLoop': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 210 },
  'c-examples/SPEED/PLDI09/Example3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 143 },
  'c-examples/SPEED/PLDI09/cyclic': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 132 },
  'c-examples/SPEED/PLDI09/Example4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 116 },
  'c-examples/SPEED/PLDI09/Example5': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 105 },
  'c-examples/SPEED/POPL09/Dis2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 88 },
  'c-examples/SPEED/POPL09/SequentialSingle': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 96 },
  'c-examples/SPEED/POPL09/SimpleSingle': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 72 },
  'c-examples/SPEED/POPL09/NestedMultiple': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 138 },
  'c-examples/SPEED/POPL09/NestedSingle': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 105 },
  'c-examples/SPEED/POPL09/SimpleSingle2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 118 },
  'c-examples/SPEED/POPL09/Dis1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 97 },
  'c-examples/SPEED/POPL09/NestedMultipleDep': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 104 },
  'c-examples/SPEED/POPL09/SimpleMultiple': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 96 },
  'c-examples/SPEED/POPL09/SimpleMultipleDep': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 98 },
  'c-examples/SPEED/CAV09/ex1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'c-examples/SPEED/CAV09/ex2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'c-examples/SPEED/CAV09/ex3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 125 },
  'c-examples/SPEED/PLDI10/Ex4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 109 },
  'c-examples/SPEED/PLDI10/Ex1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 124 },
  'c-examples/SPEED/PLDI10/Ex2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 112 },
  'c-examples/SPEED/PLDI10/Ex3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 110 },
  'c-examples/SPEED/PLDI10/Ex5': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 143 },
  'c-examples/SPEED/PLDI10/Ex7': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 95 },
  'c-examples/SPEED/PLDI10/Ex6': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'c-examples/Loopus/Example1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 144 },
  'c-examples/Loopus/Example2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 1254 },
  'c-examples/Loopus/Example3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 90 },
  'KoAT-2014/adding-exp-growth3': { 'time': 18 },
  'KoAT-2014/nesting-ex1': { 'time': 18 },
  'KoAT-2014/scaling-exp-growth': { 'time': 18 },
  'KoAT-2014/adding-exp-growth2': { 'time': 18 },
  'KoAT-2014/scaling-doubly-exp-growth': { 'time': 18 },
  'KoAT-2014/exp-calls': { 'time': 18 },
  'KoAT-2014/adding-exp-growth1': { 'time': 18 },
  'FGPSF09/TACAS01/terminate': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'FGPSF09/SAS05/c.02': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'FGPSF09/PLDI06/c.04': { "aspic_stdout": True, 'time': 66 },
  'FGPSF09/PLDI06/c.03': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 70 },
  'FGPSF09/VMCAI04/complete4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'FGPSF09/VMCAI04/complete2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'FGPSF09/VMCAI04/complete3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'FGPSF09/VMCAI04/complete1': { "aspic_stdout": True, 'time': 69 },
  'FGPSF09/ESOP08/abstractions': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 71 },
  'FGPSF09/CAV02/practical2': { "aspic_stdout": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 156 },
  'FGPSF09/CAV02/practical1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 71 },
  'FGPSF09/VMCAI05/poly1': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'FGPSF09/VMCAI05/poly3': { "aspic_stderr": True, "aspic_stdout": True, 'time': 54 },
  'FGPSF09/VMCAI05/poly4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 89 },
  'FGPSF09/VMCAI05/poly2': { "aspic_stdout": True, 'time': 67 },
  'FGPSF09/RTA08/round': { 'time': 20 },
  'FGPSF09/CAV05/c.05': { "aspic_stdout": True, 'time': 65 },
  'FGPSF09/LICS04/c.01': { "aspic_stdout": True, 'time': 66 },
  'FGPSF09/LICS04/choice': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'FGPSF09/new/unsatCond2': { "aspic_stderr": True, "aspic_stdout": True, 'time': 53 },
  'FGPSF09/new/randomFullUpDown': { 'time': 20 },
  'FGPSF09/patrs/div': { "aspic_stdout": True, 'time': 61 },
  'FGPSF09/patrs/pasta/a.06': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 72 },
  'FGPSF09/patrs/pasta/a.03': { "aspic_stdout": True, 'time': 78 },
  'FGPSF09/patrs/pasta/a.09': { "aspic_stdout": True, 'time': 65 },
  'FGPSF09/patrs/pasta/a.01': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'FGPSF09/patrs/pasta/a.11': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'FGPSF09/patrs/pasta/a.10': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 72 },
  'FGPSF09/patrs/pasta/a.02': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 93 },
  'FGPSF09/patrs/pasta/a.05': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'FGPSF09/patrs/pasta/a.04': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'FGPSF09/patrs/pasta/a.08': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 70 },
  'FGPSF09/patrs/pasta/a.07': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 68 },
  'FGPSF09/patrs/increase2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'FGPSF09/patrs/increase3': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'FGPSF09/patrs/random_no_wrap': { 'time': 19 },
  'FGPSF09/patrs/increase1': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 66 },
  'FGPSF09/patrs/random_full_no_wrap': { 'time': 20 },
  'FGPSF09/patrs/sumto_no_if': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'FGPSF09/patrs/sqrt': { "aspic_stdout": True, 'time': 65 },
  'FGPSF09/patrs/increase4': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'FGPSF09/Beerendonk/15': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'FGPSF09/Beerendonk/13': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'FGPSF09/Beerendonk/07': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(4+1)+1])", 'parsedBound': "6", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'FGPSF09/Beerendonk/24': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 79 },
  'FGPSF09/Beerendonk/05': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(2+1)+1])", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 73 },
  'FGPSF09/Beerendonk/01': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 67 },
  'FGPSF09/Beerendonk/02': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 70 },
  'FGPSF09/Beerendonk/16': { "aspic_stderr": True, "aspic_stdout": True, 'time': 57 },
  'FGPSF09/Beerendonk/03': { "aspic_stdout": True, 'time': 60 },
  'FGPSF09/Beerendonk/11': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'FGPSF09/Beerendonk/17': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 71 },
  'FGPSF09/Beerendonk/06': { "aspic_stdout": True, "stdout": True, 'originalBound': "max([(2+1)+1])", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'FGPSF09/Beerendonk/21': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 77 },
  'FGPSF09/Beerendonk/23': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 76 },
  'FGPSF09/Beerendonk/09': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'FGPSF09/Beerendonk/08': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'FGPSF09/Beerendonk/04': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 65 },
  'FGPSF09/Beerendonk/19': { "aspic_stderr": True, "aspic_stdout": True, 'time': 60 },
  'FGPSF09/Beerendonk/10': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 122 },
  'FGPSF09/Beerendonk/18': { "aspic_stderr": True, "aspic_stdout": True, 'time': 59 },
  'FGPSF09/Beerendonk/20': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 75 },
  'FGPSF09/Beerendonk/22': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 74 },
  'KoAT-2013/sect4-facSum': { 'time': 19 },
  'KoAT-2013/sect1-quad': { "aspic_stdout": True, 'time': 62 },
  'KoAT-2013/sect5-len': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 68 },
  'KoAT-2013/sect1-lin': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 69 },
  'KoAT-2013/sect5-sumSum': { "aspic_stdout": True, 'time': 70 },
  'KoAT-2013/sect2': { "aspic_stdout": True, "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 85 },
  }

  data['PUBS'] = {
  'T2/spiral': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 158 },
  'T2/fun11': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f2/6])) ", 'parseError': 'Could not parse bound', 'time': 110 },
  'T2/simple_swap_call': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 73 },
  'T2/edn': { "stdout": True, 'originalBound': "15465/4 ", 'parsedBound': "15465 / 4", 'degree': 0.0, 'variableCount': 0, 'time': 41802 },
  'T2/polyrank4': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/3])) ", 'parseError': 'Could not parse bound', 'time': 56 },
  'T2/matmult': { "stdout": True, 'originalBound': "945 ", 'parsedBound': "945", 'degree': 0.0, 'variableCount': 0, 'time': 620 },
  'T2/cnt': { "stdout": True, 'originalBound': "243 ", 'parsedBound': "243", 'degree': 0.0, 'variableCount': 0, 'time': 2144 },
  'T2/fake-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-16': { "stdout": True, 'originalBound': "2+nat(A) ", 'parsedBound': "2 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 83 },
  'T2/dsa_test8': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/bs': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f6/7])) ", 'parseError': 'Could not parse bound', 'time': 153 },
  'T2/bf9': { "stdout": True, 'originalBound': "79 ", 'parsedBound': "79", 'degree': 0.0, 'variableCount': 0, 'time': 529 },
  'T2/n-20': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/11])) ", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/bf7': { "stdout": True, 'originalBound': "67 ", 'parsedBound': "67", 'degree': 0.0, 'variableCount': 0, 'time': 552 },
  'T2/two_arrays': { "stdout": True, 'originalBound': "307 ", 'parsedBound': "307", 'degree': 0.0, 'variableCount': 0, 'time': 371 },
  'T2/byron-2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f0/6])) ", 'parseError': 'Could not parse bound', 'time': 102 },
  'T2/constants': { "stdout": True, 'originalBound': "402 ", 'parsedBound': "402", 'degree': 0.0, 'variableCount': 0, 'time': 124 },
  'T2/bsort100': { "stdout": True, 'originalBound': "10302 ", 'parsedBound': "10302", 'degree': 0.0, 'variableCount': 0, 'time': 409 },
  'T2/consts5': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 47 },
  'T2/polyrank2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/3])) ", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/bf8': { "stdout": True, 'originalBound': "73 ", 'parsedBound': "73", 'degree': 0.0, 'variableCount': 0, 'time': 547 },
  'T2/n-4': { "stdout": True, 'originalBound': "1+c(failed(cover_point,[scc=1,cr=f300/5])) ", 'parseError': 'Could not parse bound', 'time': 83 },
  'T2/slayer-n1': { "stdout": True, 'originalBound': "2+c(maximize_failed)+c(failed(no_rf,[scc=0,cr=f12/28])) ", 'parseError': 'Could not parse bound', 'time': 7820 },
  'T2/polyrank7': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 84 },
  'T2/apchild-accepted-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ndes': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/a.10.c': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=1,cr=f3/12])) ", 'parseError': 'Could not parse bound', 'time': 208 },
  'T2/send-more-money': { "stdout": True, 'originalBound': "ERROR: error(resource_error(stack),global)", 'parseError': 'Could not parse bound', 'time': 4905 },
  'T2/db3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/neg-1394complete-succeed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 42224 },
  'T2/neg-smagilla-succeed': { "stdout": True, 'originalBound': "6+c(failed(no_rf,[scc=0,cr=f22/6])) ", 'parseError': 'Could not parse bound', 'time': 180 },
  'T2/tqli.c.i.tqli.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 125 },
  'T2/simple_double_free': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/fast_poll': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/reverse_div4': { "stdout": True, 'originalBound': "max([2+c(maximize_failed)+c(failed(no_rf,[scc=1,cr=f2/34])),1+c(failed(no_rf,[scc=4,cr=f5/34])),1+c(failed(no_rf,[scc=4,cr=f5/34]))]) ", 'parseError': 'Could not parse bound', 'time': 3356 },
  'T2/streamserver-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 29193 },
  'T2/slayer-1-filtered': { "stdout": True, 'originalBound': "4+c(maximize_failed)+nat(G+1)+nat(H1+1) ", 'parseError': 'Could not parse bound', 'time': 9687 },
  'T2/ex19': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f6/4])) ", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/p-7b': { "stdout": True, 'originalBound': "2+nat(-B/2+C/2+1/2) ", 'parsedBound': "2 + max(0, (0 - B) / 2 + C / 2 + 1 / 2)", 'degree': 1.0, 'variableCount': 2, 'time': 101 },
  'T2/complex_guard': { "stdout": True, 'originalBound': "10 ", 'parsedBound': "10", 'degree': 0.0, 'variableCount': 0, 'time': 79 },
  'T2/p-34': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/23])) ", 'parseError': 'Could not parse bound', 'time': 557 },
  'T2/fun10': { "stdout": True, 'originalBound': "max([1+c(failed(no_rf,[scc=7,cr=f36/157])),1+c(failed(no_rf,[scc=5,cr=f35/157]))]) ", 'parseError': 'Could not parse bound', 'time': 58179 },
  'T2/seq': { "stdout": True, 'originalBound': "1+nat(A+1) ", 'parsedBound': "1 + max(0, A + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 74 },
  'T2/smagillc-fail': { "stdout": True, 'originalBound': "2+5/2+c(failed(no_rf,[scc=0,cr=f21/6])) ", 'parseError': 'Could not parse bound', 'time': 179 },
  'T2/slayer-4-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-14': { "stdout": True, 'originalBound': "2+nat(A-1) ", 'parsedBound': "2 + max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 85 },
  'T2/sas2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f5/6])) ", 'parseError': 'Could not parse bound', 'time': 11013 },
  'T2/bitcount16': { "stdout": True, 'originalBound': "18 ", 'parsedBound': "18", 'degree': 0.0, 'variableCount': 0, 'time': 385 },
  'T2/fun3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-1d': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f300/4])) ", 'parseError': 'Could not parse bound', 'time': 99 },
  'T2/hqr': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/walk': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=1,cr=f17/15])) ", 'parseError': 'Could not parse bound', 'time': 246 },
  'T2/5': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=3,cr=f1/13]))+c(failed(no_rf,[scc=4,cr=loop_cont_f1/13])) ", 'parseError': 'Could not parse bound', 'time': 284 },
  'T2/statemate': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/cfg': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/1])) ", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/p-21': { "stdout": True, 'originalBound': "2+nat(B-20)* (2+c(maximize_failed)) ", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/p-44': { "stdout": True, 'originalBound': "2+nat(A) ", 'parsedBound': "2 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 93 },
  'T2/dsa_test': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/array_init': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 76 },
  'T2/flipflop': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 72 },
  'T2/iecs': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 74 },
  'T2/ex9': { "stdout": True, 'originalBound': "2+c(maximize_failed)+c(failed(no_rf,[scc=6,cr=f27/6])) ", 'parseError': 'Could not parse bound', 'time': 155 },
  'T2/p-55': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f300/3])) ", 'parseError': 'Could not parse bound', 'time': 94 },
  'T2/s1-saved': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "4+c(failed(cover_point,[scc=6,cr=f5/18]))+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 1095 },
  'T2/stored': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=1,cr=f6/3])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/p-6': { "stdout": True, 'originalBound': "2+nat(-A+B) ", 'parsedBound': "2 + max(0, 0 - A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 151 },
  'T2/p-7': { "stdout": True, 'originalBound': "2+nat(-B/2+C/2) ", 'parsedBound': "2 + max(0, (0 - B) / 2 + C / 2)", 'degree': 1.0, 'variableCount': 2, 'time': 102 },
  'T2/1': { "stdout": True, 'originalBound': "2+nat(F-2)+c(failed(no_rf,[scc=2,cr=f11/14])) ", 'parseError': 'Could not parse bound', 'time': 412 },
  'T2/n-33': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/n-46': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/4])) ", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/n-15a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 84 },
  'T2/new_ex': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=3,cr=f6/4]))+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 162 },
  'T2/p-61': { "stdout": True, 'originalBound': "902 ", 'parsedBound': "902", 'degree': 0.0, 'variableCount': 0, 'time': 110 },
  'T2/fun4-alt': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/3])) ", 'parseError': 'Could not parse bound', 'time': 88 },
  'T2/heidy6': { "stdout": True, 'originalBound': "max([1+c(failed(no_rf,[scc=0,cr=f2/3])),2+nat(B)+c(failed(no_rf,[scc=1,cr=f5/3]))]) ", 'parseError': 'Could not parse bound', 'time': 96 },
  'T2/e-popl07-fail': { "stdout": True, 'originalBound': "4+nat(-A+B)+c(failed(no_rf,[scc=2,cr=f54/23])) ", 'parseError': 'Could not parse bound', 'time': 1065 },
  'T2/byron-3': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f0/3])) ", 'parseError': 'Could not parse bound', 'time': 82 },
  'T2/acqrel-fail': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=4,cr=f9/4])) ", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/ex11': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/2])) ", 'parseError': 'Could not parse bound', 'time': 89 },
  'T2/fun4': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/4])) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/invgen': { "stdout": True, 'originalBound': "1+nat(B+1) ", 'parsedBound': "1 + max(0, B + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 80 },
  'T2/ex29': { "stdout": True, 'originalBound': "4 ", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 171 },
  'T2/efegp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/mc91test': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/5])) ", 'parseError': 'Could not parse bound', 'time': 131 },
  'T2/neg-1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-43-terminate': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=3,cr=f27/10])) ", 'parseError': 'Could not parse bound', 'time': 225 },
  'T2/eric': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 106 },
  'T2/byron-1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 85 },
  'T2/rlft3': { "stdout": True, 'originalBound': "max([5+nat(H-I+1)* (2+c(maximize_failed))+max([2+c(maximize_failed),2+nat(J-1)])+c(maximize_failed),4+2*nat(H-I+1)+max([2+c(maximize_failed),2+nat(J-1)])+c(maximize_failed),4+2*nat(H-I+1)+max([2+c(maximize_failed),2+nat(J-1)])+c(maximize_failed)]) ", 'parseError': 'Could not parse bound', 'time': 10751 },
  'T2/dsa_test15': { "stdout": True, 'originalBound': "23 ", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 103 },
  'T2/smagillb-succeed': { "stdout": True, 'originalBound': "2+c(maximize_failed)+c(failed(no_rf,[scc=0,cr=f24/7])) ", 'parseError': 'Could not parse bound', 'time': 215 },
  'T2/p-1a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/10])) ", 'parseError': 'Could not parse bound', 'time': 100 },
  'T2/p-43': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f300/4])) ", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/neg-e-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/streamserver.bug': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 59141 },
  'T2/create_via_tmps': { "stdout": True, 'originalBound': "3+nat(A-2)+nat(U+1) ", 'parsedBound': "3 + max(0, A - 2) + max(0, U + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 16675 },
  'T2/afagp-fail': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=27,cr=f22/96])) ", 'parseError': 'Could not parse bound', 'time': 56492 },
  'T2/cover': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/neg-e-1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/dsa_test9': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/fourn.c.i.fourn.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "13+nat(A-B+1)+c(maximize_failed)* (3+c(failed(no_rf,[scc=7,cr=f26/27])))+c(failed(no_rf,[scc=12,cr=f41/27]))+c(maximize_failed)* (3+c(failed(no_rf,[scc=7,cr=f26/27])))+2*c(failed(no_rf,[scc=7,cr=f26/27])) ", 'parseError': 'Could not parse bound', 'time': 3630 },
  'T2/bubbleSort': { "stdout": True, 'originalBound': "4+nat(C)+nat(C-1)* (2+nat(C-1))+nat(C-1) ", 'parsedBound': "4 + max(0, C) + max(0, C - 1) * (2 + max(0, C - 1)) + max(0, C - 1)", 'degree': 2.0, 'variableCount': 1, 'time': 346 },
  'T2/agafp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/fun7': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=3,cr=f3/32])) ", 'parseError': 'Could not parse bound', 'time': 864 },
  'T2/heidy9': { "stdout": True, 'originalBound': "2+nat(A) ", 'parsedBound': "2 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 81 },
  'T2/ex16': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=f25/18]))+c(failed(no_rf,[scc=3,cr=f40/18])) ", 'parseError': 'Could not parse bound', 'time': 460 },
  'T2/p-45': { "stdout": True, 'originalBound': "2+nat(B) ", 'parsedBound': "2 + max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 120 },
  'T2/heidy7-simple': { "stdout": True, 'originalBound': "2+nat(B)+c(failed(no_rf,[scc=0,cr=f4/3])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/polling': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/db2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/eric1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 57 },
  'T2/create': { "stdout": True, 'originalBound': "2+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 286 },
  'T2/queue_1': { "stdout": True, 'originalBound': "7 ", 'parsedBound': "7", 'degree': 0.0, 'variableCount': 0, 'time': 226 },
  'T2/dsa_test13': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 68 },
  'T2/s3-work': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/firewire': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f9/9])) ", 'parseError': 'Could not parse bound', 'time': 45118 },
  'T2/consts5nt': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/janne_complex': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=3,cr=f8/6])) ", 'parseError': 'Could not parse bound', 'time': 109 },
  'T2/destroy_seg': { "stdout": True, 'originalBound': "3+c(maximize_failed)+nat(T+1) ", 'parseError': 'Could not parse bound', 'time': 46450 },
  'T2/slayer-2-filtered': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 96 },
  'T2/elmhes': { "stdout": True, 'originalBound': "4+c(failed(cover_point,[scc=7,cr=f0/8]))+2*c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 389 },
  'T2/queue_10': { "stdout": True, 'originalBound': "43 ", 'parsedBound': "43", 'degree': 0.0, 'variableCount': 0, 'time': 241 },
  'T2/consts1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/st88.bug': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f9/2])) ", 'parseError': 'Could not parse bound', 'time': 93 },
  'T2/bitcount32': { "stdout": True, 'originalBound': "34 ", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 388 },
  'T2/fir': { "stdout": True, 'originalBound': "2+10* (3+c(maximize_failed)) ", 'parseError': 'Could not parse bound', 'time': 980 },
  'T2/n-6a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f300/4])) ", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/p-32': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/destroy_seg_leak': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 25382 },
  'T2/toeplz.c.i.toeplz.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 89 },
  'T2/ex6': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/p-58': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 83 },
  'T2/dsa_test10': { "stdout": True, 'originalBound': "23 ", 'parsedBound': "23", 'degree': 0.0, 'variableCount': 0, 'time': 136 },
  'T2/traverse_seg2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex8': { "stdout": True, 'originalBound': "2+c(maximize_failed)+c(failed(no_rf,[scc=4,cr=f24/5])) ", 'parseError': 'Could not parse bound', 'time': 132 },
  'T2/p-41': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 69 },
  'T2/matmul': { "stdout": True, 'originalBound': "54 ", 'parsedBound': "54", 'degree': 0.0, 'variableCount': 0, 'time': 128 },
  'T2/rlft3.c.i.rlft3.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 95 },
  'T2/jacobi.c.i.jacobi.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 112 },
  'T2/n-3a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/4])) ", 'parseError': 'Could not parse bound', 'time': 136 },
  'T2/randomwalk': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f10/7])) ", 'parseError': 'Could not parse bound', 'time': 232 },
  'T2/refine_disj_problem': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f0/2])) ", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/n-14': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/dsa_test11': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 44 },
  'T2/n-1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/8])) ", 'parseError': 'Could not parse bound', 'time': 96 },
  'T2/e-1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/curious4': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/e-acqrel-fail': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=2,cr=f23/4])) ", 'parseError': 'Could not parse bound', 'time': 65 },
  'T2/ex21': { "stdout": True, 'originalBound': "203 ", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 129 },
  'T2/ex4': { "stdout": True, 'originalBound': "34 ", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 336 },
  'T2/n-15': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f3/1])) ", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/example': { "stdout": True, 'originalBound': "1+nat(A+B-2) ", 'parsedBound': "1 + max(0, A + B - 2)", 'degree': 1.0, 'variableCount': 2, 'time': 89 },
  'T2/apchildlive-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex13': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 73 },
  'T2/array2': { "stdout": True, 'originalBound': "52 ", 'parsedBound': "52", 'degree': 0.0, 'variableCount': 0, 'time': 80 },
  'T2/dsa_test1': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 70 },
  'T2/apchild-live': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/slayer-n1-filtered': { "stdout": True, 'originalBound': "2+c(maximize_failed)+c(failed(no_rf,[scc=1,cr=f12/28])) ", 'parseError': 'Could not parse bound', 'time': 1515 },
  'T2/ex2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f14/4])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/print': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/buggyNonTermLoop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-3': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 84 },
  'T2/st88': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f9/2])) ", 'parseError': 'Could not parse bound', 'time': 95 },
  'T2/jacobi': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex20': { "stdout": True, 'originalBound': "1026 ", 'parsedBound': "1026", 'degree': 0.0, 'variableCount': 0, 'time': 123 },
  'T2/ex15': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 75 },
  'T2/bf14': { "stdout": True, 'originalBound': "109 ", 'parsedBound': "109", 'degree': 0.0, 'variableCount': 0, 'time': 553 },
  'T2/n-12a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/array3': { "stdout": True, 'originalBound': "103 ", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 101 },
  'T2/destroy': { "stdout": True, 'originalBound': "3+c(maximize_failed)+nat(R+1) ", 'parseError': 'Could not parse bound', 'time': 21182 },
  'T2/simple_pre1': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 73 },
  'T2/matrixsqrt': { "stdout": True, 'originalBound': "18 ", 'parsedBound': "18", 'degree': 0.0, 'variableCount': 0, 'time': 278 },
  'T2/dummy': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/tqli': { "stdout": True, 'originalBound': "5+nat(A-B+1)+nat(A-C+1)* (2+c(maximize_failed))+max([3+nat(A-C),7+c(maximize_failed),7+c(maximize_failed)])+2*c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 4036 },
  'T2/hongyi1': { "stdout": True, 'originalBound': "11+3*nat(D) ", 'parsedBound': "11 + 3 * max(0, D)", 'degree': 1.0, 'variableCount': 1, 'time': 16757 },
  'T2/heidy2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f0/2])) ", 'parseError': 'Could not parse bound', 'time': 74 },
  'T2/vmcai_struct': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 45 },
  'T2/simple_pre': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 70 },
  'T2/fun8': { "stdout": True, 'originalBound': "19+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 25414 },
  'T2/broydn.c.i.broydn.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 131 },
  'T2/non_term': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/w1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/hqr.c.i.hqr.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 144 },
  'T2/neg-popl07-succeed': { "stdout": True, 'originalBound': "4+nat(-A+B)+c(failed(no_rf,[scc=2,cr=f53/23])) ", 'parseError': 'Could not parse bound', 'time': 1007 },
  'T2/consts2nt': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/simple_control_on_input': { "stdout": True, 'originalBound': "21 ", 'parsedBound': "21", 'degree': 0.0, 'variableCount': 0, 'time': 79 },
  'T2/ex33': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 77 },
  'T2/queue_1000': { "stdout": True, 'originalBound': "4003 ", 'parsedBound': "4003", 'degree': 0.0, 'variableCount': 0, 'time': 243 },
  'T2/smagillc-succeed': { "stdout": True, 'originalBound': "6+c(failed(no_rf,[scc=0,cr=f21/6])) ", 'parseError': 'Could not parse bound', 'time': 177 },
  'T2/n-16': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/1])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/ex27': { "stdout": True, 'originalBound': "595 ", 'parsedBound': "595", 'degree': 0.0, 'variableCount': 0, 'time': 15140 },
  'T2/polling.bug': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/create_seg': { "stdout": True, 'originalBound': "2+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 362 },
  'T2/consts3': { "stdout": True, 'originalBound': "1+nat(A-201) ", 'parsedBound': "1 + max(0, A - 201)", 'degree': 1.0, 'variableCount': 1, 'time': 73 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/nakata': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf12': { "stdout": True, 'originalBound': "97 ", 'parsedBound': "97", 'degree': 0.0, 'variableCount': 0, 'time': 550 },
  'T2/p-56': { "stdout": True, 'originalBound': "2+nat(-D-1) ", 'parsedBound': "2 + max(0, 0 - D - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 139 },
  'T2/dsa_test4': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 70 },
  'T2/minmax': { "stdout": True, 'originalBound': "3 ", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 102 },
  'T2/tqli.c.i.tqli.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "5+nat(A-B+1)+nat(A-C+1)* (2+c(maximize_failed))+max([3+nat(A-C),7+c(maximize_failed),7+c(maximize_failed)])+2*c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 4029 },
  'T2/wrong_loop': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f3/2])) ", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/bf17': { "stdout": True, 'originalBound': "127 ", 'parsedBound': "127", 'degree': 0.0, 'variableCount': 0, 'time': 535 },
  'T2/sequential_swap': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 74 },
  'T2/spctrm': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex36': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-49': { "stdout": True, 'originalBound': "2+nat(A+1) ", 'parsedBound': "2 + max(0, A + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 56 },
  'T2/toeplz.c.i.toeplz.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "1+c(failed(cover_point,[scc=7,cr=f13/18])) ", 'parseError': 'Could not parse bound', 'time': 545 },
  'T2/neg-e-pgarch-succeed': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=0,cr=f31/10])) ", 'parseError': 'Could not parse bound', 'time': 145 },
  'T2/p-13': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 70 },
  'T2/array_free': { "stdout": True, 'originalBound': "44 ", 'parsedBound': "44", 'degree': 0.0, 'variableCount': 0, 'time': 82 },
  'T2/bf10': { "stdout": True, 'originalBound': "85 ", 'parsedBound': "85", 'degree': 0.0, 'variableCount': 0, 'time': 552 },
  'T2/heidy3': { "stdout": True, 'originalBound': "2+nat(B)+c(failed(no_rf,[scc=0,cr=f4/2])) ", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/qrdcmp.c.i.qrdcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 81 },
  'T2/p-52': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/10])) ", 'parseError': 'Could not parse bound', 'time': 73 },
  'T2/p-63': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/7])) ", 'parseError': 'Could not parse bound', 'time': 99 },
  'T2/n-5': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=2,cr=f8/13]))+c(failed(no_rf,[scc=1,cr=f1/13])) ", 'parseError': 'Could not parse bound', 'time': 200 },
  'T2/jacobi.c.i.jacobi.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex40': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/2])) ", 'parseError': 'Could not parse bound', 'time': 84 },
  'T2/p-53': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/ase_example': { "stdout": True, 'originalBound': "34 ", 'parsedBound': "34", 'degree': 0.0, 'variableCount': 0, 'time': 189 },
  'T2/p-9': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/7])) ", 'parseError': 'Could not parse bound', 'time': 88 },
  'T2/p-18': { "stdout": True, 'originalBound': "2+nat(A) ", 'parsedBound': "2 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 81 },
  'T2/p-37': { "stdout": True, 'originalBound': "6 ", 'parsedBound': "6", 'degree': 0.0, 'variableCount': 0, 'time': 123 },
  'T2/fermat': { "stdout": True, 'originalBound': "13 ", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 1369 },
  'T2/ex12': { "stdout": True, 'originalBound': "23/2 ", 'parsedBound': "23 / 2", 'degree': 0.0, 'variableCount': 0, 'time': 80 },
  'T2/rewrite': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/bf16': { "stdout": True, 'originalBound': "121 ", 'parsedBound': "121", 'degree': 0.0, 'variableCount': 0, 'time': 552 },
  'T2/p-3': { "stdout": True, 'originalBound': "2+nat(-A+B+1) ", 'parsedBound': "2 + max(0, 0 - A + B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 104 },
  'T2/ex7': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 101 },
  'T2/3': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f4/1])) ", 'parseError': 'Could not parse bound', 'time': 69 },
  'T2/oct_vs_subpoly': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/fun6': { "stdout": True, 'originalBound': "1+c(failed(cover_point,[scc=5,cr=f1/36])) ", 'parseError': 'Could not parse bound', 'time': 457 },
  'T2/6': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f4/1])) ", 'parseError': 'Could not parse bound', 'time': 71 },
  'T2/e-pgarch-succeed': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=0,cr=f41/17])) ", 'parseError': 'Could not parse bound', 'time': 253 },
  'T2/loop3': { "stdout": True, 'originalBound': "129+c(failed(no_rf,[scc=192,cr=f310/3])) ", 'parseError': 'Could not parse bound', 'time': 1346 },
  'T2/traverse_seg': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ud': { "stdout": True, 'originalBound': "52+c(failed(no_rf,[scc=16,cr=f36/13]))+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 2794 },
  'T2/two_arrays6': { "stdout": True, 'originalBound': "9+nat(E)+nat(E)+nat(E)+nat(E)+nat(E)+nat(E)+nat(E)+nat(E) ", 'parsedBound': "9 + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E)", 'degree': 1.0, 'variableCount': 1, 'time': 967 },
  'T2/eric3': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/5])) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/n-6': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f300/4])) ", 'parseError': 'Could not parse bound', 'time': 103 },
  'T2/queue_100': { "stdout": True, 'originalBound': "403 ", 'parsedBound': "403", 'degree': 0.0, 'variableCount': 0, 'time': 242 },
  'T2/intSqRoot': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/traverse': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/simple': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f3/1])) ", 'parseError': 'Could not parse bound', 'time': 57 },
  'T2/p-10': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/10])) ", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/sumit': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/4])) ", 'parseError': 'Could not parse bound', 'time': 179 },
  'T2/array1': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 69 },
  'T2/neg-e-popl07-succeed': { "stdout": True, 'originalBound': "4+nat(-A+B)+c(failed(no_rf,[scc=2,cr=f52/21])) ", 'parseError': 'Could not parse bound', 'time': 856 },
  'T2/fibcall': { "stdout": True, 'originalBound': "31 ", 'parsedBound': "31", 'degree': 0.0, 'variableCount': 0, 'time': 196 },
  'T2/byron-4': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=1,cr=f3/3])) ", 'parseError': 'Could not parse bound', 'time': 104 },
  'T2/simple_pre3': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 71 },
  'T2/fun2b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/reverse_seg_cyclic': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/brp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-4': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/3])) ", 'parseError': 'Could not parse bound', 'time': 89 },
  'T2/traverse_twice': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/popl07-fail': { "stdout": True, 'originalBound': "3+nat(-A+B)+c(failed(no_rf,[scc=2,cr=f47/20])) ", 'parseError': 'Could not parse bound', 'time': 742 },
  'T2/zeroconf_withassume': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=3,cr=f15/10])) ", 'parseError': 'Could not parse bound', 'time': 446 },
  'T2/spctrm.c.i.spctrm.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 102 },
  'T2/1394-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex26': { "stdout": True, 'originalBound': "203 ", 'parsedBound': "203", 'degree': 0.0, 'variableCount': 0, 'time': 131 },
  'T2/selectSort': { "stdout": True, 'originalBound': "4+nat(C)+nat(C-1)* (2+nat(C-1))+nat(C-1) ", 'parsedBound': "4 + max(0, C) + max(0, C - 1) * (2 + max(0, C - 1)) + max(0, C - 1)", 'degree': 2.0, 'variableCount': 1, 'time': 455 },
  'T2/simple_fail': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 74 },
  'T2/dead.neg-st88b-succeed': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f11/3])) ", 'parseError': 'Could not parse bound', 'time': 96 },
  'T2/heidy8': { "stdout": True, 'originalBound': "2+nat(C)+c(failed(no_rf,[scc=0,cr=f6/5])) ", 'parseError': 'Could not parse bound', 'time': 141 },
  'T2/ex10': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f12/11])) ", 'parseError': 'Could not parse bound', 'time': 157 },
  'T2/randomwalk_withassume': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f10/7])) ", 'parseError': 'Could not parse bound', 'time': 240 },
  'T2/bf18': { "stdout": True, 'originalBound': "133 ", 'parsedBound': "133", 'degree': 0.0, 'variableCount': 0, 'time': 552 },
  'T2/7': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/3])) ", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/elmhes.c.i.elmhes.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 99 },
  'T2/241': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f3/2])) ", 'parseError': 'Could not parse bound', 'time': 54 },
  'T2/jfdctint': { "stdout": True, 'originalBound': "84 ", 'parsedBound': "84", 'degree': 0.0, 'variableCount': 0, 'time': 968 },
  'T2/n-7': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/4])) ", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/n-18': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/rev_nt3': { "stdout": True, 'originalBound': "7+c(failed(no_rf,[scc=2,cr=f11/31])) ", 'parseError': 'Could not parse bound', 'time': 7751 },
  'T2/pldi': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=3,cr=f4/4])) ", 'parseError': 'Could not parse bound', 'time': 139 },
  'T2/p-33': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/n-16a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/dsa_test5': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/polyrank6': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/ludcmp.c.i.ludcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 92 },
  'T2/broydn.c.i.broydn.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "2+nat(A-B+1)+max([1+c(failed(cover_point,[scc=27,cr=f26/29]))+max([2,1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed)]),1+c(failed(cover_point,[scc=27,cr=f26/29]))+max([2,1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1)]),1+c(failed(cover_point,[scc=27,cr=f26/29]))+max([2,1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1)]),1+c(failed(cover_point,[scc=27,cr=f26/29]))+max([2,1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1)])]) ", 'parseError': 'Could not parse bound', 'time': 40848 },
  'T2/p-46': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f0/5])) ", 'parseError': 'Could not parse bound', 'time': 107 },
  'T2/afagx1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f7/2])) ", 'parseError': 'Could not parse bound', 'time': 71 },
  'T2/fourn': { "stdout": True, 'originalBound': "13+nat(A-B+1)+c(maximize_failed)* (3+c(failed(no_rf,[scc=7,cr=f30/27])))+c(failed(no_rf,[scc=11,cr=f44/27]))+c(maximize_failed)* (3+c(failed(no_rf,[scc=7,cr=f30/27])))+2*c(failed(no_rf,[scc=7,cr=f30/27])) ", 'parseError': 'Could not parse bound', 'time': 3624 },
  'T2/ex32': { "stdout": True, 'originalBound': "2003 ", 'parsedBound': "2003", 'degree': 0.0, 'variableCount': 0, 'time': 116 },
  'T2/p-40': { "stdout": True, 'originalBound': "2+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 89 },
  'T2/heidy1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f0/2])) ", 'parseError': 'Could not parse bound', 'time': 49 },
  'T2/n-9': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f0/7])) ", 'parseError': 'Could not parse bound', 'time': 100 },
  'T2/pgarch': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/1394complete-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 41054 },
  'T2/ex22': { "stdout": True, 'originalBound': "390 ", 'parsedBound': "390", 'degree': 0.0, 'variableCount': 0, 'time': 5418 },
  'T2/n-40': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 195 },
  'T2/collatz': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 112 },
  'T2/fdct': { "stdout": True, 'originalBound': "19 ", 'parsedBound': "19", 'degree': 0.0, 'variableCount': 0, 'time': 484 },
  'T2/d': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/3])) ", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/broydn': { "stdout": True, 'originalBound': "2+nat(A-B+1)+max([1+c(failed(cover_point,[scc=27,cr=f54/29]))+max([2,1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed),1+c(maximize_failed)]),1+c(failed(cover_point,[scc=27,cr=f54/29]))+max([2,1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1)]),1+c(failed(cover_point,[scc=27,cr=f54/29]))+max([2,1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1)]),1+c(failed(cover_point,[scc=27,cr=f54/29]))+max([2,1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+nat(A-K+1),1+c(maximize_failed),1+nat(A-K+1)])]) ", 'parseError': 'Could not parse bound', 'time': 40886 },
  'T2/ex17': { "stdout": True, 'originalBound': "102 ", 'parsedBound': "102", 'degree': 0.0, 'variableCount': 0, 'time': 239 },
  'T2/n-18a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/smagilla-succeed': { "stdout": True, 'originalBound': "10+c(failed(no_rf,[scc=0,cr=f20/5])) ", 'parseError': 'Could not parse bound', 'time': 145 },
  'T2/apchild-accepted': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/p-60': { "stdout": True, 'originalBound': "102 ", 'parsedBound': "102", 'degree': 0.0, 'variableCount': 0, 'time': 110 },
  'T2/n-1c': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/9])) ", 'parseError': 'Could not parse bound', 'time': 119 },
  'T2/1394-fail': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/neg-popl07-fail': { "stdout": True, 'originalBound': "3+nat(-A+B)+c(failed(no_rf,[scc=2,cr=f51/22])) ", 'parseError': 'Could not parse bound', 'time': 906 },
  'T2/dropbuf-live': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 75 },
  'T2/fun10b': { "stdout": True, 'originalBound': "max([1+c(failed(no_rf,[scc=7,cr=f36/149])),1+c(failed(no_rf,[scc=5,cr=f35/149]))]) ", 'parseError': 'Could not parse bound', 'time': 51153 },
  'T2/crc': { "stdout": True, 'originalBound': "5210 ", 'parsedBound': "5210", 'degree': 0.0, 'variableCount': 0, 'time': 24454 },
  'T2/neg-smagilla-fail': { "stdout": True, 'originalBound': "10+c(failed(no_rf,[scc=0,cr=f21/5])) ", 'parseError': 'Could not parse bound', 'time': 151 },
  'T2/fun2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-37': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/6])) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/sort': { "stdout": True, 'originalBound': "163 ", 'parsedBound': "163", 'degree': 0.0, 'variableCount': 0, 'time': 14821 },
  'T2/ex18': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=4,cr=f15/5])) ", 'parseError': 'Could not parse bound', 'time': 132 },
  'T2/p-1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/8])) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/curious': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/slayer-3-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf20': { "stdout": True, 'originalBound': "145 ", 'parsedBound': "145", 'degree': 0.0, 'variableCount': 0, 'time': 553 },
  'T2/brp_withassume': { "stdout": True, 'originalBound': "11+3*c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 8508 },
  'T2/e-pgarch-fail': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=0,cr=f40/15])) ", 'parseError': 'Could not parse bound', 'time': 210 },
  'T2/select': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=6,cr=f11/11])) ", 'parseError': 'Could not parse bound', 'time': 20806 },
  'T2/neg-e-pgarch-fail': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=0,cr=f32/11])) ", 'parseError': 'Could not parse bound', 'time': 157 },
  'T2/ex30': { "stdout": True, 'originalBound': "3+2*c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 178 },
  'T2/1394complete-succeed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex23': { "stdout": True, 'originalBound': "38 ", 'parsedBound': "38", 'degree': 0.0, 'variableCount': 0, 'time': 89 },
  'T2/p-22': { "stdout": True, 'originalBound': "2+nat(A-1) ", 'parsedBound': "2 + max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 80 },
  'T2/bf6': { "stdout": True, 'originalBound': "61 ", 'parsedBound': "61", 'degree': 0.0, 'variableCount': 0, 'time': 550 },
  'T2/n-8': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/8])) ", 'parseError': 'Could not parse bound', 'time': 116 },
  'T2/ex37': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 69 },
  'T2/consts3nt': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 72 },
  'T2/polyrank3': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/3])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/neg-e-acqrel-fail': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=4,cr=f10/6])) ", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/zeroconf': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=3,cr=f15/10])) ", 'parseError': 'Could not parse bound', 'time': 408 },
  'T2/n-17': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f3/1])) ", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/disj_nightmare_abi': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f0/2])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/svdcmp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/queens': { "stdout": True, 'originalBound': "18+9* (3+log(4,12))+log(4,3+c(maximize_failed)) ", 'parseError': 'Could not parse bound', 'time': 2657 },
  'T2/bf15': { "stdout": True, 'originalBound': "115 ", 'parsedBound': "115", 'degree': 0.0, 'variableCount': 0, 'time': 547 },
  'T2/fun9': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/slayer-n3-filtered': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 261 },
  'T2/n-13': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 80 },
  'T2/p-20': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f2/11])) ", 'parseError': 'Could not parse bound', 'time': 105 },
  'T2/elmhes.c.i.elmhes.pl.t2.nor.t2.rlgfixed': { "stdout": True, 'originalBound': "4+c(failed(cover_point,[scc=7,cr=f2/8]))+2*c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 391 },
  'T2/fuhs-inflasso': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f4/3])) ", 'parseError': 'Could not parse bound', 'time': 80 },
  'T2/n-12': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 88 },
  'T2/simple_pre2': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 72 },
  'T2/traverse2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex31': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/2])) ", 'parseError': 'Could not parse bound', 'time': 55 },
  'T2/fourn.c.i.fourn.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 94 },
  'T2/bubblesort_inner_loop': { "stdout": True, 'originalBound': "6 ", 'parsedBound': "6", 'degree': 0.0, 'variableCount': 0, 'time': 116 },
  'T2/loop_on_input': { "stdout": True, 'originalBound': "2+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 76 },
  'T2/rev_nt4': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 74 },
  'T2/slayer-3': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-10': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/11])) ", 'parseError': 'Could not parse bound', 'time': 146 },
  'T2/slayer-3-new': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/two_arrays1': { "stdout": True, 'originalBound': "409 ", 'parsedBound': "409", 'degree': 0.0, 'variableCount': 0, 'time': 726 },
  'T2/bio': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/Loop': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n-36': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/21])) ", 'parseError': 'Could not parse bound', 'time': 484 },
  'T2/p-15': { "stdout": True, 'originalBound': "2+nat(A) ", 'parsedBound': "2 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 82 },
  'T2/p-19': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/8])) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'T2/232': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f3/2])) ", 'parseError': 'Could not parse bound', 'time': 70 },
  'T2/slayer-n2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f0/4])) ", 'parseError': 'Could not parse bound', 'time': 82 },
  'T2/n-48': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f4/7])) ", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/neg-e-acqrel-succeed': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=2,cr=f25/5])) ", 'parseError': 'Could not parse bound', 'time': 95 },
  'T2/nested2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f0/6])) ", 'parseError': 'Could not parse bound', 'time': 105 },
  'T2/ludcmp': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/fun1': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/consts2': { "stdout": True, 'originalBound': "1+nat(A/1000-1/1000) ", 'parsedBound': "1 + max(0, A / 1000 - 1 / 1000)", 'degree': 1.0, 'variableCount': 1, 'time': 79 },
  'T2/subpoly_crash': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/slayer-n5-filtered': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/neg-pgarch-succeed': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=0,cr=f41/15])) ", 'parseError': 'Could not parse bound', 'time': 212 },
  'T2/huh': { "stdout": True, 'originalBound': "19+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 837 },
  'T2/ctl': { "stdout": True, 'originalBound': "max([1+c(failed(no_rf,[scc=11,cr=f2/4])),1+c(failed(no_rf,[scc=6,cr=f12/4])),2+c(failed(no_rf,[scc=2,cr=f120/4]))]) ", 'parseError': 'Could not parse bound', 'time': 111 },
  'T2/wtf': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf5': { "stdout": True, 'originalBound': "55 ", 'parsedBound': "55", 'degree': 0.0, 'variableCount': 0, 'time': 554 },
  'T2/p-1b': { "stdout": True, 'originalBound': "2+nat(-A+B) ", 'parsedBound': "2 + max(0, 0 - A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 92 },
  'T2/p-5': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=2,cr=f8/13]))+c(failed(no_rf,[scc=1,cr=f1/13])) ", 'parseError': 'Could not parse bound', 'time': 214 },
  'T2/ex14': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 83 },
  'T2/mc91': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 79 },
  'T2/qrdcmp': { "stdout": True, 'originalBound': "4+c(failed(cover_point,[scc=6,cr=f10/18]))+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 1092 },
  'T2/nakata_withassume': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/pearl-necklace': { "stdout": True, 'originalBound': "4+nat(A-B)+3*c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 192 },
  'T2/p-1d': { "stdout": True, 'originalBound': "2+nat(-A+B) ", 'parsedBound': "2 + max(0, 0 - A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 151 },
  'T2/eric2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f1/29])) ", 'parseError': 'Could not parse bound', 'time': 1626 },
  'T2/n-8a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/6])) ", 'parseError': 'Could not parse bound', 'time': 85 },
  'T2/ex34': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 289 },
  'T2/p-1c': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f300/10])) ", 'parseError': 'Could not parse bound', 'time': 98 },
  'T2/magic': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/consts4nt': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 74 },
  'T2/polyrank1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/2])) ", 'parseError': 'Could not parse bound', 'time': 77 },
  'T2/consts4': { "stdout": True, 'originalBound': "1+nat(A/1000-201/1000) ", 'parsedBound': "1 + max(0, A / 1000 - 201 / 1000)", 'degree': 1.0, 'variableCount': 1, 'time': 81 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.fixed': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 184 },
  'T2/nested': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=3,cr=f2/7])) ", 'parseError': 'Could not parse bound', 'time': 132 },
  'T2/polyrank5': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/4])) ", 'parseError': 'Could not parse bound', 'time': 83 },
  'T2/dsa_test6': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 83 },
  'T2/p-42': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/3])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/simple_array_inversion': { "stdout": True, 'originalBound': "4 ", 'parsedBound': "4", 'degree': 0.0, 'variableCount': 0, 'time': 52 },
  'T2/heidy7': { "stdout": True, 'originalBound': "2+nat(B)+c(failed(no_rf,[scc=0,cr=f4/3])) ", 'parseError': 'Could not parse bound', 'time': 102 },
  'T2/sas1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=3,cr=f4/4])) ", 'parseError': 'Could not parse bound', 'time': 136 },
  'T2/fun1b': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/seq2': { "stdout": True, 'originalBound': "1+nat(A) ", 'parsedBound': "1 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 74 },
  'T2/slayer-1-rf': { "stdout": True, 'originalBound': "4+c(maximize_failed)+log(4,4)+nat(E1+1) ", 'parseError': 'Could not parse bound', 'time': 26706 },
  'T2/vmcai_bytes': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 70 },
  'T2/dropbuf': { "stdout": True, 'originalBound': "max([2+2*c(maximize_failed)+c(failed(no_rf,[scc=0,cr=f31/24])),2+2*c(maximize_failed)+c(failed(no_rf,[scc=6,cr=f61/24]))+c(failed(no_rf,[scc=10,cr=loop_cont_f36/24])),2+2*c(maximize_failed)+c(failed(no_rf,[scc=6,cr=f61/24]))+c(failed(no_rf,[scc=10,cr=loop_cont_f36/24]))]) ", 'parseError': 'Could not parse bound', 'time': 29144 },
  'T2/simpleWhile': { "stdout": True, 'originalBound': "3+nat(C) ", 'parsedBound': "3 + max(0, C)", 'degree': 1.0, 'variableCount': 1, 'time': 132 },
  'T2/spctrm.c.i.spctrm.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/dsa_test12': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 74 },
  'T2/sudoku': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 115 },
  'T2/bf13': { "stdout": True, 'originalBound': "103 ", 'parsedBound': "103", 'degree': 0.0, 'variableCount': 0, 'time': 553 },
  'T2/w2_nt': { "stdout": True, 'originalBound': "4+c(failed(no_rf,[scc=0,cr=f8/27])) ", 'parseError': 'Could not parse bound', 'time': 4849 },
  'T2/pentagon': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f0/6])) ", 'parseError': 'Could not parse bound', 'time': 144 },
  'T2/consts1nt': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f1/1])) ", 'parseError': 'Could not parse bound', 'time': 68 },
  'T2/p-19a': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/10])) ", 'parseError': 'Could not parse bound', 'time': 78 },
  'T2/p-8': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/7])) ", 'parseError': 'Could not parse bound', 'time': 90 },
  'T2/bf11': { "stdout": True, 'originalBound': "91 ", 'parsedBound': "91", 'degree': 0.0, 'variableCount': 0, 'time': 545 },
  'T2/toeplz': { "stdout": True, 'originalBound': "1+c(failed(cover_point,[scc=7,cr=f17/18])) ", 'parseError': 'Could not parse bound', 'time': 566 },
  'T2/e-acqrel-succeed': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=4,cr=f10/5])) ", 'parseError': 'Could not parse bound', 'time': 93 },
  'T2/rev_nt2': { "stdout": True, 'originalBound': "6+c(failed(no_rf,[scc=0,cr=f11/31])) ", 'parseError': 'Could not parse bound', 'time': 7605 },
  'T2/reverse': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex1': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f5/3])) ", 'parseError': 'Could not parse bound', 'time': 81 },
  'T2/p-12': { "stdout": True, 'originalBound': "2+nat(A+1) ", 'parsedBound': "2 + max(0, A + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 83 },
  'T2/ns': { "stdout": True, 'originalBound': "20 ", 'parsedBound': "20", 'degree': 0.0, 'variableCount': 0, 'time': 172 },
  'T2/graycode': { "stdout": True, 'originalBound': "210+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 27258 },
  'T2/p-36': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f1/18])) ", 'parseError': 'Could not parse bound', 'time': 217 },
  'T2/2': { "stdout": True, 'originalBound': "2+nat(F-2)+c(failed(no_rf,[scc=2,cr=f11/14])) ", 'parseError': 'Could not parse bound', 'time': 405 },
  'T2/slayer-n2-filtered': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f0/4])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'T2/svdcmp.c.i.svdcmp.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/ex3': { "stdout": True, 'originalBound': "12 ", 'parsedBound': "12", 'degree': 0.0, 'variableCount': 0, 'time': 90 },
  'T2/n-21': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=3,cr=f300/3])) ", 'parseError': 'Could not parse bound', 'time': 83 },
  'T2/two_arrays2': { "stdout": True, 'originalBound': "9+nat(E)+nat(E)+nat(E)+nat(E)+nat(E)+nat(E)+nat(E)+nat(E) ", 'parsedBound': "9 + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E) + max(0, E)", 'degree': 1.0, 'variableCount': 1, 'time': 975 },
  'T2/hqr.c.i.hqr.pl.t2.nor.t2.rlgfixed': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/n_firewire_instrumented-PP': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f11/7])) ", 'parseError': 'Could not parse bound', 'time': 6253 },
  'T2/insertsort': { "stdout": True, 'originalBound': "2+9* (1+c(failed(no_rf,[scc=1,cr=f18/3]))) ", 'parseError': 'Could not parse bound', 'time': 86 },
  'T2/array_init_assign': { "stdout": True, 'originalBound': "7 ", 'parsedBound': "7", 'degree': 0.0, 'variableCount': 0, 'time': 89 },
  'T2/array': { "stdout": True, 'originalBound': "1 ", 'parsedBound': "1", 'degree': 0.0, 'variableCount': 0, 'time': 70 },
  'T2/fun5': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'T2/bf19': { "stdout": True, 'originalBound': "139 ", 'parsedBound': "139", 'degree': 0.0, 'variableCount': 0, 'time': 555 },
  'T2/heidy10': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 80 },
  'T2/heidy5': { "stdout": True, 'originalBound': "2+nat(B) ", 'parsedBound': "2 + max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 89 },
  'T2/n-32': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=1,cr=f2/2])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'T2/popl07-succeed': { "stdout": True, 'originalBound': "3+nat(-A+B)+c(failed(no_rf,[scc=2,cr=f49/20])) ", 'parseError': 'Could not parse bound', 'time': 740 },
  'SAS10/wcet2': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl92/8])),1+c(failed(cover_point,[scc=1,cr=lbl82/8]))]) ", 'parseError': 'Could not parse bound', 'time': 97 },
  'SAS10/relation1': { "stdout": True, 'originalBound': "3 ", 'parsedBound': "3", 'degree': 0.0, 'variableCount': 0, 'time': 80 },
  'SAS10/realbubble': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=lbl53/12])) ", 'parseError': 'Could not parse bound', 'time': 466 },
  'SAS10/while2': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=3,cr=lbl62/6])) ", 'parseError': 'Could not parse bound', 'time': 132 },
  'SAS10/speedFails4': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl71/10])),1+c(failed(cover_point,[scc=1,cr=lbl81/10]))]) ", 'parseError': 'Could not parse bound', 'time': 118 },
  'SAS10/sipmabubble': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl142/8])),1+c(failed(cover_point,[scc=1,cr=lbl91/8])),1+c(failed(cover_point,[scc=1,cr=lbl131/8]))]) ", 'parseError': 'Could not parse bound', 'time': 108 },
  'SAS10/determinant': { "stdout": True, 'originalBound': "4+nat(A-1)* (2+nat(A-1)* (2+nat(A-1))) ", 'parsedBound': "4 + max(0, A - 1) * (2 + max(0, A - 1) * (2 + max(0, A - 1)))", 'degree': 3.0, 'variableCount': 1, 'time': 369 },
  'SAS10/counterex1': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl42/8])),1+c(failed(cover_point,[scc=1,cr=cut/8])),1+c(failed(cover_point,[scc=1,cr=lbl72/8]))]) ", 'parseError': 'Could not parse bound', 'time': 109 },
  'SAS10/rsd': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl82/8])),1+c(failed(cover_point,[scc=1,cr=lbl121/8]))]) ", 'parseError': 'Could not parse bound', 'time': 99 },
  'SAS10/nd_loop': { "stdout": True, 'originalBound': "21 ", 'parsedBound': "21", 'degree': 0.0, 'variableCount': 0, 'time': 111 },
  'SAS10/random2d': { "stdout": True, 'originalBound': "4+2*nat(A-1) ", 'parsedBound': "4 + 2 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 5966 },
  'SAS10/perfect': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=4,cr=lbl111/8])) ", 'parseError': 'Could not parse bound', 'time': 227 },
  'SAS10/realheapsort': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=2,cr=lbl71/20])) ", 'parseError': 'Could not parse bound', 'time': 599 },
  'SAS10/easy1': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl91/6])),1+c(failed(cover_point,[scc=1,cr=lbl111/6])),1+c(failed(cover_point,[scc=1,cr=lbl111/6]))]) ", 'parseError': 'Could not parse bound', 'time': 93 },
  'SAS10/realselect': { "stdout": True, 'originalBound': "5+nat(A-2) ", 'parsedBound': "5 + max(0, A - 2)", 'degree': 1.0, 'variableCount': 1, 'time': 6508 },
  'SAS10/cousot9': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl52/6])),1+c(failed(cover_point,[scc=1,cr=lbl72/6]))]) ", 'parseError': 'Could not parse bound', 'time': 93 },
  'SAS10/ndecr': { "stdout": True, 'originalBound': "3+nat(A-2) ", 'parsedBound': "3 + max(0, A - 2)", 'degree': 1.0, 'variableCount': 1, 'time': 112 },
  'SAS10/terminate': { "stdout": True, 'originalBound': "3+nat(-A-E+201) ", 'parsedBound': "3 + max(0, 0 - A - E + 201)", 'degree': 1.0, 'variableCount': 2, 'time': 258 },
  'SAS10/maccarthy91': { "stdout": True, 'originalBound': "2+nat(-A/11+100/11)+max([1+c(failed(cover_point,[scc=1,cr=lbl161/8])),1+c(failed(cover_point,[scc=1,cr=lbl221/8])),1+c(failed(cover_point,[scc=1,cr=lbl221/8])),1+c(failed(cover_point,[scc=1,cr=lbl221/8]))]) ", 'parseError': 'Could not parse bound', 'time': 222 },
  'SAS10/wise': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl81/4])),1+c(failed(cover_point,[scc=1,cr=lbl91/4]))]) ", 'parseError': 'Could not parse bound', 'time': 86 },
  'SAS10/exmini': { "stdout": True, 'originalBound': "3+nat(-A-G+201) ", 'parsedBound': "3 + max(0, 0 - A - G + 201)", 'degree': 1.0, 'variableCount': 2, 'time': 255 },
  'SAS10/speedpldi3': { "stdout": True, 'originalBound': "1+max([2,1+c(failed(no_rf,[scc=5,cr=lbl121/8]))]) ", 'parseError': 'Could not parse bound', 'time': 197 },
  'SAS10/random1d': { "stdout": True, 'originalBound': "3+nat(A-1) ", 'parsedBound': "3 + max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 270 },
  'SAS10/complex': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl171/4])),1+c(failed(cover_point,[scc=1,cr=lbl151/4])),1+c(failed(cover_point,[scc=1,cr=lbl151/4]))]) ", 'parseError': 'Could not parse bound', 'time': 94 },
  'SAS10/ackermann': { "stdout": True, 'originalBound': "5+4*nat(A) ", 'parsedBound': "5 + 4 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 112 },
  'SAS10/ax': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=4,cr=lbl71/6])) ", 'parseError': 'Could not parse bound', 'time': 138 },
  'SAS10/gcd': { "stdout": True, 'originalBound': "1+max([2,1+c(failed(cover_point,[scc=2,cr=lbl101/4])),1+c(failed(cover_point,[scc=2,cr=lbl111/4]))]) ", 'parseError': 'Could not parse bound', 'time': 92 },
  'SAS10/easy2': { "stdout": True, 'originalBound': "3+nat(A-1) ", 'parsedBound': "3 + max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 152 },
  'SAS10/loops': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl121/6])),1+c(failed(cover_point,[scc=1,cr=lbl101/6]))]) ", 'parseError': 'Could not parse bound', 'time': 93 },
  'SAS10/speedpldi2': { "stdout": True, 'originalBound': "3+2*nat(G-1) ", 'parsedBound': "3 + 2 * max(0, G - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 462 },
  'SAS10/realshellsort': { "stdout": True, 'originalBound': "7+c(maximize_failed)* (3+c(maximize_failed))+c(maximize_failed)+c(failed(no_rf,[scc=8,cr=loop_cont_lbl71/16])) ", 'parseError': 'Could not parse bound', 'time': 2396 },
  'SAS10/aaron2': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl91/6])),1+c(failed(cover_point,[scc=1,cr=lbl101/6]))]) ", 'parseError': 'Could not parse bound', 'time': 97 },
  'SAS10/wcet1': { "stdout": True, 'originalBound': "3+nat(A-2) ", 'parsedBound': "3 + max(0, A - 2)", 'degree': 1.0, 'variableCount': 1, 'time': 897 },
  'SAS10/nestedLoop': { "stdout": True, 'originalBound': "1+max([1+c(failed(cover_point,[scc=1,cr=lbl131/12])),1+c(failed(cover_point,[scc=1,cr=lbl121/12])),1+c(failed(cover_point,[scc=1,cr=lbl111/12]))]) ", 'parseError': 'Could not parse bound', 'time': 163 },
  'SAS10/insertsort': { "stdout": True, 'originalBound': "5+nat(A-2)* (3+nat(A-3))+nat(A-2) ", 'parsedBound': "5 + max(0, A - 2) * (3 + max(0, A - 3)) + max(0, A - 2)", 'degree': 2.0, 'variableCount': 1, 'time': 620 },
  'SAS10/speedpldi4': { "stdout": True, 'originalBound': "4+nat(-A+C) ", 'parsedBound': "4 + max(0, 0 - A + C)", 'degree': 1.0, 'variableCount': 2, 'time': 230 },
  'costa/misc/no_cover_point': { "errors": True, "stdout": True, 'originalBound': "1+c(failed(cover_point,[scc=0,cr=p/1])) ", 'parseError': 'Could not parse bound', 'time': 50 },
  'costa/misc/direct_n_log_n': { "stdout": True, 'originalBound': "1+log(2,1+nat(A-1)) ", 'parsedBound': "1 + log(2, 1 + max(0, A - 1))", 'degree': 0.5, 'variableCount': 1, 'time': 79 },
  'costa/misc/n_log_n': { "errors": True, "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 64 },
  'costa/misc/ack': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=ack/2])) ", 'parseError': 'Could not parse bound', 'time': 75 },
  'costa/misc/ms': { "errors": True, "stdout": True, 'originalBound': "1+3*nat(A-1) ", 'parsedBound': "1 + 3 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 75 },
  'costa/misc/logarithmic': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'costa/misc/merge': { "stdout": True, 'originalBound': "1+nat(A+B-1) ", 'parsedBound': "1 + max(0, A + B - 1)", 'degree': 1.0, 'variableCount': 2, 'time': 91 },
  'costa/misc/quadratic': { "errors": True, "stdout": True, 'originalBound': "1+nat(A)* (3+nat(A)) ", 'parsedBound': "1 + max(0, A) * (3 + max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 64 },
  'costa/misc/linear': { "stdout": True, 'originalBound': "max([101,1+nat(A)]) ", 'parsedBound': "max(101, 1 + max(0, A))", 'degree': 1.0, 'variableCount': 1, 'time': 79 },
  'costa/misc/mspe': { "stdout": True, 'originalBound': "1+nat(-A+B+1) ", 'parsedBound': "1 + max(0, 0 - A + B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 574 },
  'costa/misc/exponential': { "errors": True, "stdout": True, 'originalBound': "1+ (pow(2,nat(1*A))-1) ", 'parsedBound': "1 + pow(2, max(0, A)) - 1", 'degree': 10000.0, 'variableCount': 1, 'time': 60 },
  'costa/misc/divide_and_conquer': { "errors": True, "stdout": True, 'originalBound': "1+3* (pow(2,nat(2*A+1))-1) ", 'parsedBound': "1 + 3 * (pow(2, max(0, 2 * A + 1)) - 1)", 'degree': 10000.0, 'variableCount': 1, 'time': 72 },
  'costa/RAML/eratosthenes': { "errors": True, "stdout": True, 'originalBound': "1+nat(A)* (3+nat(A-1)) ", 'parsedBound': "1 + max(0, A) * (3 + max(0, A - 1))", 'degree': 2.0, 'variableCount': 1, 'time': 68 },
  'costa/RAML/bitvectors': { "errors": True, "stdout": True, 'originalBound': "1+nat(A)* (4+3*nat(A))+nat(A)* (4+3*nat(A)) ", 'parsedBound': "1 + max(0, A) * (4 + 3 * max(0, A)) + max(0, A) * (4 + 3 * max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 206 },
  'costa/RAML/dyade': { "errors": True, "stdout": True, 'originalBound': "1+nat(A)* (3+nat(C)) ", 'parsedBound': "1 + max(0, A) * (3 + max(0, C))", 'degree': 2.0, 'variableCount': 1, 'time': 86 },
  'costa/RAML/mergesort': { "errors": True, "stdout": True, 'originalBound': "1+ (nat(2*A+ -3)+1-1)* (5+nat(A/2)+nat(A-1/2)) ", 'parsedBound': "1 + (max(0, 2 * A + -3) + 1 - 1) * (5 + max(0, A / 2) + max(0, A - 1 / 2))", 'degree': 2.0, 'variableCount': 1, 'time': 149 },
  'costa/RAML/duplicates': { "errors": True, "stdout": True, 'originalBound': "1+nat(B) ", 'parsedBound': "1 + max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 76 },
  'costa/RAML/quicksort': { "errors": True, "stdout": True, 'originalBound': "1+ (pow(2,nat(1*A))-1)* (5+nat(A-1)+nat(A-2)) ", 'parsedBound': "1 + (pow(2, max(0, A)) - 1) * (5 + max(0, A - 1) + max(0, A - 2))", 'degree': 10001.0, 'variableCount': 1, 'time': 134 },
  'costa/RAML/matrix': { "errors": True, "stdout": True, 'originalBound': "6+nat(A)* (3+nat(C))+nat(B)* (3+nat(A)* (3+nat(B+C)))+nat(C) ", 'parsedBound': "6 + max(0, A) * (3 + max(0, C)) + max(0, B) * (3 + max(0, A) * (3 + max(0, B + C))) + max(0, C)", 'degree': 3.0, 'variableCount': 1, 'time': 230 },
  'costa/RAML/insertionsort': { "errors": True, "stdout": True, 'originalBound': "1+nat(B)* (3+nat(B-1)) ", 'parsedBound': "1 + max(0, B) * (3 + max(0, B - 1))", 'degree': 2.0, 'variableCount': 1, 'time': 76 },
  'costa/RAML/listsort': { "errors": True, "stdout": True, 'originalBound': "1+nat(C)* (4+nat(C-1)* (3+nat(A))+nat(A)) ", 'parsedBound': "1 + max(0, C) * (4 + max(0, C - 1) * (3 + max(0, A)) + max(0, A))", 'degree': 3.0, 'variableCount': 1, 'time': 105 },
  'costa/RAML/minsort': { "errors": True, "stdout": True, 'originalBound': "2+nat(A)* (3+nat(A)) ", 'parsedBound': "2 + max(0, A) * (3 + max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 65 },
  'costa/RAML/lcs': { "errors": True, "stdout": True, 'originalBound': "2+nat(A)* (3+5*nat(B))+nat(B) ", 'parsedBound': "2 + max(0, A) * (3 + 5 * max(0, B)) + max(0, B)", 'degree': 2.0, 'variableCount': 1, 'time': 198 },
  'costa/RAML/cleavermmult': { "errors": True, "stdout": True, 'originalBound': "1+nat(B)* (3+nat(D)* (3+nat(A))) ", 'parsedBound': "1 + max(0, B) * (3 + max(0, D) * (3 + max(0, A)))", 'degree': 3.0, 'variableCount': 1, 'time': 206 },
  'costa/RAML/rationalPotential': { "stdout": True, 'originalBound': "1+nat(C) ", 'parsedBound': "1 + max(0, C)", 'degree': 1.0, 'variableCount': 1, 'time': 89 },
  'costa/jvm-cost/Polynomial': { "errors": True, "stdout": True, 'originalBound': "71 ", 'parsedBound': "71", 'degree': 0.0, 'variableCount': 0, 'time': 116 },
  'costa/jvm-cost/Matrixinverse': { "errors": True, "stdout": True, 'originalBound': "41+3*nat(A)+3*nat(A)+nat(A)* (9+13*nat(A))+nat(A-1)* (14+13*nat(A)+nat(A-1)* (8+3*nat(A-1)))+nat(A-1)* (8+nat(A-1)* (8+3*nat(A)))+nat(A)* (8+nat(A-1)* (8+3*nat(A-1))) ", 'parsedBound': "41 + 3 * max(0, A) + 3 * max(0, A) + max(0, A) * (9 + 13 * max(0, A)) + max(0, A - 1) * (14 + 13 * max(0, A) + max(0, A - 1) * (8 + 3 * max(0, A - 1))) + max(0, A - 1) * (8 + max(0, A - 1) * (8 + 3 * max(0, A))) + max(0, A) * (8 + max(0, A - 1) * (8 + 3 * max(0, A - 1)))", 'degree': 3.0, 'variableCount': 1, 'time': 13020 },
  'costa/jvm-cost/ListReverse': { "errors": True, "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 64 },
  'costa/jvm-cost/Fibonacci': { "errors": True, "stdout": True, 'originalBound': "-7+13*pow(2,nat(A-1)) ", 'parsedBound': "-7 + 13 * pow(2, max(0, A - 1))", 'degree': 10000.0, 'variableCount': 1, 'time': 79 },
  'costa/jvm-cost/DetEval': { "errors": True, "stdout": True, 'originalBound': "33+3*nat(A)+nat(A)* (9+13*nat(A))+nat(A-1)* (14+13*nat(A)+nat(A-1)* (8+3*nat(A-1)))+3*nat(A)+8*nat(A) ", 'parsedBound': "33 + 3 * max(0, A) + max(0, A) * (9 + 13 * max(0, A)) + max(0, A - 1) * (14 + 13 * max(0, A) + max(0, A - 1) * (8 + 3 * max(0, A - 1))) + 3 * max(0, A) + 8 * max(0, A)", 'degree': 3.0, 'variableCount': 1, 'time': 14037 },
  'costa/jvm-cost/Hanoi': { "errors": True, "stdout": True, 'originalBound': "-8+15*pow(2,nat(A)) ", 'parsedBound': "-8 + 15 * pow(2, max(0, A))", 'degree': 10000.0, 'variableCount': 1, 'time': 74 },
  'costa/jvm-cost/ListInter': { "errors": True, "stdout": True, 'originalBound': "11+nat(B)* (25+5*nat(A)) ", 'parsedBound': "11 + max(0, B) * (25 + 5 * max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 224 },
  'costa/jvm-cost/Concat': { "errors": True, "stdout": True, 'originalBound': "10+3*nat(B)+3*nat(A) ", 'parsedBound': "10 + 3 * max(0, B) + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 87 },
  'costa/jvm-cost/Power': { "errors": True, "stdout": True, 'originalBound': "6+5*nat(A) ", 'parsedBound': "6 + 5 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 61 },
  'costa/jvm-cost/Factorial': { "errors": True, "stdout": True, 'originalBound': "6+5*nat(A) ", 'parsedBound': "6 + 5 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 57 },
  'costa/jvm-cost/BST': { "errors": True, "stdout": True, 'originalBound': "-27+52*pow(2,nat(A-1)) ", 'parsedBound': "-27 + 52 * pow(2, max(0, A - 1))", 'degree': 10000.0, 'variableCount': 1, 'time': 359 },
  'costa/jvm-cost/SelectOrd': { "errors": True, "stdout": True, 'originalBound': "5+nat(A-2)* (7+6*nat(A-2)) ", 'parsedBound': "5 + max(0, A - 2) * (7 + 6 * max(0, A - 2))", 'degree': 2.0, 'variableCount': 1, 'time': 170 },
  'costa/jvm-cost/FactSum': { "errors": True, "stdout": True, 'originalBound': "5+nat(A+1)* (10+5*nat(A)) ", 'parsedBound': "5 + max(0, A + 1) * (10 + 5 * max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 87 },
  'costa/jvm-cost/Cons': { "errors": True, "stdout": True, 'originalBound': "20+16*nat(A-1) ", 'parsedBound': "20 + 16 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 95 },
  'costa/jvm-cost/FibonacciNew': { "errors": True, "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=5,cr=f8/4])) ", 'parseError': 'Could not parse bound', 'time': 85 },
  'costa/jvm-cost/ms': { "errors": True, "stdout": True, 'originalBound': "1+ (nat(-2*C+2*E+ -1)+1-1)* (23+12*nat(-C+E+1)+5*nat(-C+E+1))+2* (1+nat(-2*C+2*E-1)) ", 'parsedBound': "1 + (max(0, -2 * C + 2 * E + -1) + 1 - 1) * (23 + 12 * max(0, 0 - C + E + 1) + 5 * max(0, 0 - C + E + 1)) + 2 * (1 + max(0, -2 * C + 2 * E - 1))", 'degree': 2.0, 'variableCount': 2, 'time': 2545 },
  'costa/jvm-cost/Incr': { "errors": True, "stdout": True, 'originalBound': "5+11*nat(A+1) ", 'parsedBound': "5 + 11 * max(0, A + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 184 },
  'costa/jvm-cost/MergeList': { "errors": True, "stdout": True, 'originalBound': "15+15*nat(A+B) ", 'parsedBound': "15 + 15 * max(0, A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 182 },
  'costa/jvm-cost/EvenDigits': { "errors": True, "stdout": True, 'originalBound': "5+nat(A)* (10+3*log(3,2+nat(2*A-3))) ", 'parsedBound': "5 + max(0, A) * (10 + 3 * log(3, 2 + max(0, 2 * A - 3)))", 'degree': 1.5, 'variableCount': 1, 'time': 104 },
  'costa/jvm-cost/DivByTwo': { "errors": True, "stdout": True, 'originalBound': "5+3*log(2,1+nat(2*A-1)) ", 'parsedBound': "5 + 3 * log(2, 1 + max(0, 2 * A - 1))", 'degree': 0.5, 'variableCount': 1, 'time': 64 },
  'costa/jvm-cost/MatMult': { "errors": True, "stdout": True, 'originalBound': "5+nat(B)* (7+nat(A)* (7+3*nat(A))) ", 'parsedBound': "5 + max(0, B) * (7 + max(0, A) * (7 + 3 * max(0, A)))", 'degree': 3.0, 'variableCount': 1, 'time': 185 },
  'costa/jvm-cost/LinEqSolve': { "errors": True, "stdout": True, 'originalBound': "35+3*nat(B)+nat(B)* (9+8*nat(B))+nat(B-1)* (14+8*nat(B)+nat(B-1)* (8+3*nat(B-1)))+nat(A-1)* (8+3*nat(A-1))+nat(A-1)* (8+3*nat(A-1)) ", 'parsedBound': "35 + 3 * max(0, B) + max(0, B) * (9 + 8 * max(0, B)) + max(0, B - 1) * (14 + 8 * max(0, B) + max(0, B - 1) * (8 + 3 * max(0, B - 1))) + max(0, A - 1) * (8 + 3 * max(0, A - 1)) + max(0, A - 1) * (8 + 3 * max(0, A - 1))", 'degree': 3.0, 'variableCount': 1, 'time': 10539 },
  'costa/jvm-cost/EvenDigitsNew': { "errors": True, "stdout": True, 'originalBound': "7+nat(F)* (13+3*log(2,1+nat(2*F-3))) ", 'parsedBound': "7 + max(0, F) * (13 + 3 * log(2, 1 + max(0, 2 * F - 3)))", 'degree': 1.5, 'variableCount': 1, 'time': 184 },
  'costa/jvm-cost/ArrayReverse': { "errors": True, "stdout": True, 'originalBound': "5+3*nat(A) ", 'parsedBound': "5 + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 60 },
  'costa/jvm-cost/Delete': { "errors": True, "stdout": True, 'originalBound': "5+nat(D)*max([21+5*nat(A)+3*nat(A-1),21+5*nat(B)+3*nat(B-1)]) ", 'parsedBound': "5 + max(0, D) * max(21 + 5 * max(0, A) + 3 * max(0, A - 1), 21 + 5 * max(0, B) + 3 * max(0, B - 1))", 'degree': 2.0, 'variableCount': 1, 'time': 810 },
  'costa/jvm-cost/FactSumNew': { "errors": True, "stdout": True, 'originalBound': "7+nat(B+1)* (7+6*nat(B)) ", 'parsedBound': "7 + max(0, B + 1) * (7 + 6 * max(0, B))", 'degree': 2.0, 'variableCount': 1, 'time': 133 },
  'c-examples/ABC/ex11': { "stdout": True, 'originalBound': "5+3*nat(A) ", 'parsedBound': "5 + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 95 },
  'c-examples/ABC/ex04': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 90 },
  'c-examples/ABC/ex01': { "stdout": True, 'originalBound': "4+2*nat(-A+B+1) ", 'parsedBound': "4 + 2 * max(0, 0 - A + B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 88 },
  'c-examples/ABC/ex08': { "stdout": True, 'originalBound': "5+3*nat(A) ", 'parsedBound': "5 + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 99 },
  'c-examples/ABC/ex02': { "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 100 },
  'c-examples/ABC/ex13': { "stdout": True, 'originalBound': "10+3*nat(-A+B+1) ", 'parsedBound': "10 + 3 * max(0, 0 - A + B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 152 },
  'c-examples/ABC/ex15': { "stdout": True, 'originalBound': "6+3*nat(A) ", 'parsedBound': "6 + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 158 },
  'c-examples/ABC/ex12': { "stdout": True, 'originalBound': "5+3*nat(A) ", 'parsedBound': "5 + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 99 },
  'c-examples/ABC/ex03': { "stdout": True, 'originalBound': "6+2*nat(B) ", 'parsedBound': "6 + 2 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 112 },
  'c-examples/ABC/ex09': { "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 106 },
  'c-examples/ABC/ex10': { "stdout": True, 'originalBound': "5+3*nat(A) ", 'parsedBound': "5 + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 94 },
  'c-examples/ABC/ex05': { "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 99 },
  'c-examples/ABC/ex06': { "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 98 },
  'c-examples/ABC/ex14': { "stdout": True, 'originalBound': "6+3*nat(A) ", 'parsedBound': "6 + 3 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 122 },
  'c-examples/ABC/ex07': { "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 106 },
  'c-examples/WTC/wcet2': { "stdout": True, 'originalBound': "5+3*nat(-A+5) ", 'parsedBound': "5 + 3 * max(0, 0 - A + 5)", 'degree': 1.0, 'variableCount': 1, 'time': 91 },
  'c-examples/WTC/realbubble': { "stdout": True, 'originalBound': "9+4*nat(A-1) ", 'parsedBound': "9 + 4 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 119 },
  'c-examples/WTC/while2': { "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 93 },
  'c-examples/WTC/speedFails4': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalspeedFails4bb6in/4])) ", 'parseError': 'Could not parse bound', 'time': 99 },
  'c-examples/WTC/sipmabubble': { "stdout": True, 'originalBound': "7+3*nat(A+1) ", 'parsedBound': "7 + 3 * max(0, A + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 92 },
  'c-examples/WTC/rsd': { "stdout": True, 'originalBound': "4+c(failed(no_rf,[scc=1,cr=evalrsdbb4in/3])) ", 'parseError': 'Could not parse bound', 'time': 106 },
  'c-examples/WTC/nd_loop': { "stdout": True, 'originalBound': "13 ", 'parsedBound': "13", 'degree': 0.0, 'variableCount': 0, 'time': 79 },
  'c-examples/WTC/random2d': { "stdout": True, 'originalBound': "4+7*nat(B) ", 'parsedBound': "4 + 7 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 497 },
  'c-examples/WTC/perfect': { "stdout": True, 'originalBound': "6+3*nat(A-1) ", 'parsedBound': "6 + 3 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 180 },
  'c-examples/WTC/realheapsort': { "stdout": True, 'originalBound': "11+3*nat(A-1)+4*nat(A-1) ", 'parsedBound': "11 + 3 * max(0, A - 1) + 4 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 276 },
  'c-examples/WTC/easy1': { "stdout": True, 'originalBound': "124 ", 'parsedBound': "124", 'degree': 0.0, 'variableCount': 0, 'time': 110 },
  'c-examples/WTC/realselect': { "stdout": True, 'originalBound': "5+4*nat(B-1) ", 'parsedBound': "5 + 4 * max(0, B - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 104 },
  'c-examples/WTC/counterex1b': { "stdout": True, 'originalBound': "3+4*nat(A+1)+c(failed(no_rf,[scc=11,cr=loop_cont_evalfbb8in/6])) ", 'parseError': 'Could not parse bound', 'time': 208 },
  'c-examples/WTC/cousot9': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalcousot9bb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 97 },
  'c-examples/WTC/ndecr': { "stdout": True, 'originalBound': "4+2*nat(A-2) ", 'parsedBound': "4 + 2 * max(0, A - 2)", 'degree': 1.0, 'variableCount': 1, 'time': 78 },
  'c-examples/WTC/terminate': { "stdout": True, 'originalBound': "4+2*nat(-A/2+B/2-C/2+51) ", 'parsedBound': "4 + 2 * max(0, (0 - A) / 2 + B / 2 - C / 2 + 51)", 'degree': 1.0, 'variableCount': 3, 'time': 98 },
  'c-examples/WTC/wise': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'c-examples/WTC/exmini': { "stdout": True, 'originalBound': "4+2*nat(-A/2+B/2-C/2+51) ", 'parsedBound': "4 + 2 * max(0, (0 - A) / 2 + B / 2 - C / 2 + 51)", 'degree': 1.0, 'variableCount': 3, 'time': 102 },
  'c-examples/WTC/speedpldi3': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalspeedpldi3bb5in/4])) ", 'parseError': 'Could not parse bound', 'time': 101 },
  'c-examples/WTC/realheapsort_step1': { "stdout": True, 'originalBound': "6+3*nat(A-1) ", 'parsedBound': "6 + 3 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 176 },
  'c-examples/WTC/random1d': { "stdout": True, 'originalBound': "4+2*nat(A) ", 'parsedBound': "4 + 2 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 103 },
  'c-examples/WTC/complex': { "stdout": True, 'originalBound': "5+c(failed(no_rf,[scc=3,cr=evalcomplexbb10in/5])) ", 'parseError': 'Could not parse bound', 'time': 102 },
  'c-examples/WTC/ax': { "stdout": True, 'originalBound': "7+3*nat(C-2) ", 'parsedBound': "7 + 3 * max(0, C - 2)", 'degree': 1.0, 'variableCount': 1, 'time': 104 },
  'c-examples/WTC/gcd': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalgcdbb7in/2])) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'c-examples/WTC/easy2': { "stdout": True, 'originalBound': "4+2*nat(A) ", 'parsedBound': "4 + 2 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 75 },
  'c-examples/WTC/realheapsort_step2': { "stdout": True, 'originalBound': "10+4*nat(A-1) ", 'parsedBound': "10 + 4 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 124 },
  'c-examples/WTC/loops': { "stdout": True, 'originalBound': "5+4*nat(A+1) ", 'parsedBound': "5 + 4 * max(0, A + 1)", 'degree': 1.0, 'variableCount': 1, 'time': 94 },
  'c-examples/WTC/speedpldi2': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalspeedpldi2bb5in/3])) ", 'parseError': 'Could not parse bound', 'time': 92 },
  'c-examples/WTC/realshellsort': { "stdout": True, 'originalBound': "1+max([10+3*log(2,1+nat(A-1)),10+3*log(2,1+nat(A))]) ", 'parsedBound': "1 + max(10 + 3 * log(2, 1 + max(0, A - 1)), 10 + 3 * log(2, 1 + max(0, A)))", 'degree': 0.5, 'variableCount': 1, 'time': 145 },
  'c-examples/WTC/sipma91': { "stdout": True, 'originalBound': "4+2*nat(-A/11+111/11)+c(failed(no_rf,[scc=1,cr=evalsipma91bb11in/4])) ", 'parseError': 'Could not parse bound', 'time': 159 },
  'c-examples/WTC/aaron2': { "stdout": True, 'originalBound': "4+3*nat(B-C+1) ", 'parsedBound': "4 + 3 * max(0, B - C + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 147 },
  'c-examples/WTC/wcet1': { "stdout": True, 'originalBound': "7+4*nat(A-1) ", 'parsedBound': "7 + 4 * max(0, A - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 416 },
  'c-examples/WTC/nestedLoop': { "stdout": True, 'originalBound': "5+c(failed(no_rf,[scc=6,cr=evalnestedLoopbb9in/8])) ", 'parseError': 'Could not parse bound', 'time': 151 },
  'c-examples/WTC/insertsort': { "stdout": True, 'originalBound': "6+4*nat(B-1) ", 'parsedBound': "6 + 4 * max(0, B - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 119 },
  'c-examples/WTC/speedpldi4': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalspeedpldi4bb5in/2])) ", 'parseError': 'Could not parse bound', 'time': 86 },
  'c-examples/Rank/ex2': { "stdout": True, 'originalBound': "6+4*nat(B/2) ", 'parsedBound': "6 + 4 * max(0, B / 2)", 'degree': 1.0, 'variableCount': 1, 'time': 119 },
  'c-examples/Rank/ex1': { "stdout": True, 'originalBound': "5+c(failed(no_rf,[scc=3,cr=evalfbb7in/5])) ", 'parseError': 'Could not parse bound', 'time': 172 },
  'c-examples/Rank/ex3': { "stdout": True, 'originalBound': "7+c(failed(no_rf,[scc=7,cr=evalfbb9in/6])) ", 'parseError': 'Could not parse bound', 'time': 136 },
  'c-examples/SPEED/PLDI09/Example6': { "stdout": True, 'originalBound': "4+nat(D)* (3+c(maximize_failed)) ", 'parseError': 'Could not parse bound', 'time': 449 },
  'c-examples/SPEED/PLDI09/cyclic': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalcyclicbb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 159 },
  'c-examples/SPEED/PLDI09/Example5': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalfbb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 94 },
  'c-examples/SPEED/PLDI09/Example4': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalfbb3in/2])) ", 'parseError': 'Could not parse bound', 'time': 98 },
  'c-examples/SPEED/PLDI09/Example3': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalfbb3in/4])) ", 'parseError': 'Could not parse bound', 'time': 129 },
  'c-examples/SPEED/PLDI09/NestedLoop': { "stdout": True, 'originalBound': "9+c(failed(no_rf,[scc=6,cr=loop_cont_evalNestedLoopbb6in/8])) ", 'parseError': 'Could not parse bound', 'time': 249 },
  'c-examples/SPEED/PLDI09/Example2': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalfbb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 113 },
  'c-examples/SPEED/POPL09/Dis2': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalDis2bb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 89 },
  'c-examples/SPEED/POPL09/NestedMultipleDep': { "stdout": True, 'originalBound': "5+3*nat(B) ", 'parsedBound': "5 + 3 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 120 },
  'c-examples/SPEED/POPL09/SimpleMultipleDep': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalSimpleMultipleDepbb3in/4])) ", 'parseError': 'Could not parse bound', 'time': 101 },
  'c-examples/SPEED/POPL09/NestedMultiple': { "stdout": True, 'originalBound': "6+3*nat(-A+B) ", 'parsedBound': "6 + 3 * max(0, 0 - A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 156 },
  'c-examples/SPEED/POPL09/Dis1': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalDis1bb3in/4])) ", 'parseError': 'Could not parse bound', 'time': 103 },
  'c-examples/SPEED/POPL09/SimpleSingle': { "stdout": True, 'originalBound': "4+2*nat(B) ", 'parsedBound': "4 + 2 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 85 },
  'c-examples/SPEED/POPL09/NestedSingle': { "stdout": True, 'originalBound': "5+c(failed(no_rf,[scc=3,cr=evalNestedSinglebb5in/3])) ", 'parseError': 'Could not parse bound', 'time': 96 },
  'c-examples/SPEED/POPL09/SequentialSingle': { "stdout": True, 'originalBound': "6+3*nat(B)+2*nat(B) ", 'parsedBound': "6 + 3 * max(0, B) + 2 * max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 102 },
  'c-examples/SPEED/POPL09/SimpleMultiple': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalSimpleMultiplebb3in/4])) ", 'parseError': 'Could not parse bound', 'time': 99 },
  'c-examples/SPEED/POPL09/SimpleSingle2': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalSimpleSingle2bb4in/4])) ", 'parseError': 'Could not parse bound', 'time': 124 },
  'c-examples/SPEED/CAV09/ex2': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalfbb3in/4])) ", 'parseError': 'Could not parse bound', 'time': 89 },
  'c-examples/SPEED/CAV09/ex1': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalfbb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 88 },
  'c-examples/SPEED/CAV09/ex3': { "stdout": True, 'originalBound': "5+c(failed(no_rf,[scc=3,cr=evalfbb5in/3])) ", 'parseError': 'Could not parse bound', 'time': 103 },
  'c-examples/SPEED/PLDI10/Ex7': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalEx7bb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 106 },
  'c-examples/SPEED/PLDI10/Ex2': { "stdout": True, 'originalBound': "4+c(failed(no_rf,[scc=3,cr=evalEx2bb3in/4])) ", 'parseError': 'Could not parse bound', 'time': 97 },
  'c-examples/SPEED/PLDI10/Ex4': { "stdout": True, 'originalBound': "2+c(failed(no_rf,[scc=3,cr=evalEx4bb4in/4]))+c(failed(no_rf,[scc=7,cr=loop_cont_evalEx4bb4in/4])) ", 'parseError': 'Could not parse bound', 'time': 95 },
  'c-examples/SPEED/PLDI10/Ex1': { "stdout": True, 'originalBound': "4+c(failed(no_rf,[scc=3,cr=evalEx1bb6in/4])) ", 'parseError': 'Could not parse bound', 'time': 100 },
  'c-examples/SPEED/PLDI10/Ex3': { "stdout": True, 'originalBound': "3+3*log(4,3+nat(A))+c(failed(no_rf,[scc=7,cr=loop_cont_evalEx3bb4in/3])) ", 'parseError': 'Could not parse bound', 'time': 90 },
  'c-examples/SPEED/PLDI10/Ex6': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalEx6bb3in/3])) ", 'parseError': 'Could not parse bound', 'time': 96 },
  'c-examples/SPEED/PLDI10/Ex5': { "stdout": True, 'originalBound': "5+c(failed(no_rf,[scc=3,cr=evalEx5bb6in/5])) ", 'parseError': 'Could not parse bound', 'time': 123 },
  'c-examples/Loopus/Example1': { "stdout": True, 'originalBound': "5+c(failed(no_rf,[scc=3,cr=evalfbb6in/4])) ", 'parseError': 'Could not parse bound', 'time': 113 },
  'c-examples/Loopus/Example3': { "stdout": True, 'originalBound': "3+c(failed(no_rf,[scc=1,cr=evalfbb3in/2])) ", 'parseError': 'Could not parse bound', 'time': 97 },
  'c-examples/Loopus/Example2': { 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 0 },
  'KoAT-2014/adding-exp-growth3': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 82 },
  'KoAT-2014/scaling-doubly-exp-growth': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 87 },
  'KoAT-2014/scaling-exp-growth': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 83 },
  'KoAT-2014/nesting-ex1': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 58 },
  'KoAT-2014/adding-exp-growth1': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 80 },
  'KoAT-2014/adding-exp-growth2': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'KoAT-2014/exp-calls': { "errors": True, "stdout": True, 'originalBound': "1+ (pow(2,nat(1*A+1))-1) ", 'parsedBound': "1 + pow(2, max(0, A + 1)) - 1", 'degree': 10000.0, 'variableCount': 1, 'time': 61 },
  'FGPSF09/TACAS01/terminate': { "stdout": True, 'originalBound': "1+nat(-A/2+B/2-C/2+51) ", 'parsedBound': "1 + max(0, (0 - A) / 2 + B / 2 - C / 2 + 51)", 'degree': 1.0, 'variableCount': 3, 'time': 95 },
  'FGPSF09/SAS05/c.02': { "stdout": True, 'originalBound': "1+nat(A+1)* (2+nat(A+1)) ", 'parsedBound': "1 + max(0, A + 1) * (2 + max(0, A + 1))", 'degree': 2.0, 'variableCount': 1, 'time': 91 },
  'FGPSF09/PLDI06/c.04': { "stdout": True, 'originalBound': "1+nat(-B+C-1) ", 'parsedBound': "1 + max(0, 0 - B + C - 1)", 'degree': 1.0, 'variableCount': 2, 'time': 116 },
  'FGPSF09/PLDI06/c.03': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/3])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'FGPSF09/VMCAI04/complete2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/1])) ", 'parseError': 'Could not parse bound', 'time': 74 },
  'FGPSF09/VMCAI04/complete3': { "stdout": True, 'originalBound': "1+nat(A+1)* (2+nat(A)) ", 'parsedBound': "1 + max(0, A + 1) * (2 + max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 89 },
  'FGPSF09/VMCAI04/complete1': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 76 },
  'FGPSF09/VMCAI04/complete4': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/2])) ", 'parseError': 'Could not parse bound', 'time': 73 },
  'FGPSF09/ESOP08/abstractions': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/2])) ", 'parseError': 'Could not parse bound', 'time': 80 },
  'FGPSF09/CAV02/practical1': { "stdout": True, 'originalBound': "1+nat(A+1)* (2+nat(A)) ", 'parsedBound': "1 + max(0, A + 1) * (2 + max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 90 },
  'FGPSF09/CAV02/practical2': { "stdout": True, 'originalBound': "3+nat(-B/11+111/11)+c(failed(no_rf,[scc=1,cr=eval5/4])) ", 'parseError': 'Could not parse bound', 'time': 196 },
  'FGPSF09/VMCAI05/poly1': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 82 },
  'FGPSF09/VMCAI05/poly2': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/3])) ", 'parseError': 'Could not parse bound', 'time': 87 },
  'FGPSF09/VMCAI05/poly3': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 84 },
  'FGPSF09/VMCAI05/poly4': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/5])) ", 'parseError': 'Could not parse bound', 'time': 127 },
  'FGPSF09/RTA08/round': { "errors": True, "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=2,cr=f/2])) ", 'parseError': 'Could not parse bound', 'time': 56 },
  'FGPSF09/CAV05/c.05': { "stdout": True, 'originalBound': "1+nat(A+B-1) ", 'parsedBound': "1 + max(0, A + B - 1)", 'degree': 1.0, 'variableCount': 2, 'time': 104 },
  'FGPSF09/LICS04/c.01': { "stdout": True, 'originalBound': "1+nat(A+1)* (2+log(2,1+nat(A-1))) ", 'parsedBound': "1 + max(0, A + 1) * (2 + log(2, 1 + max(0, A - 1)))", 'degree': 1.5, 'variableCount': 1, 'time': 95 },
  'FGPSF09/LICS04/choice': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/2])) ", 'parseError': 'Could not parse bound', 'time': 79 },
  'FGPSF09/new/randomFullUpDown': { "errors": True, "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=5,cr=rand/3])) ", 'parseError': 'Could not parse bound', 'time': 66 },
  'FGPSF09/new/unsatCond2': { "stdout": True, 'originalBound': "", 'parseError': 'Could not parse bound', 'time': 86 },
  'FGPSF09/patrs/increase3': { "stdout": True, 'originalBound': "1+nat(2*A-B-C-1) ", 'parsedBound': "1 + max(0, 2 * A - B - C - 1)", 'degree': 1.0, 'variableCount': 3, 'time': 106 },
  'FGPSF09/patrs/random_no_wrap': { "errors": True, "stdout": True, 'originalBound': "2+4*nat(A) ", 'parsedBound': "2 + 4 * max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 71 },
  'FGPSF09/patrs/sumto_no_if': { "stdout": True, 'originalBound': "2+nat(-A+B+1) ", 'parsedBound': "2 + max(0, 0 - A + B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 82 },
  'FGPSF09/patrs/pasta/a.08': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 81 },
  'FGPSF09/patrs/pasta/a.07': { "stdout": True, 'originalBound': "1+nat(A-C) ", 'parsedBound': "1 + max(0, A - C)", 'degree': 1.0, 'variableCount': 2, 'time': 89 },
  'FGPSF09/patrs/pasta/a.11': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval1/3])) ", 'parseError': 'Could not parse bound', 'time': 95 },
  'FGPSF09/patrs/pasta/a.10': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/2])) ", 'parseError': 'Could not parse bound', 'time': 80 },
  'FGPSF09/patrs/pasta/a.02': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/2])) ", 'parseError': 'Could not parse bound', 'time': 213 },
  'FGPSF09/patrs/pasta/a.03': { "stdout": True, 'originalBound': "max([1+nat(A+B-3)*max([3+nat(B-3),3+nat(B-1)]),1+nat(A+B-3)*max([3+nat(B-4),3+nat(B-2)])]) ", 'parsedBound': "max(1 + max(0, A + B - 3) * max(3 + max(0, B - 3), 3 + max(0, B - 1)), 1 + max(0, A + B - 3) * max(3 + max(0, B - 4), 3 + max(0, B - 2)))", 'degree': 2.0, 'variableCount': 1, 'time': 434 },
  'FGPSF09/patrs/pasta/a.01': { "stdout": True, 'originalBound': "1+nat(A)* (2+nat(A)) ", 'parsedBound': "1 + max(0, A) * (2 + max(0, A))", 'degree': 2.0, 'variableCount': 1, 'time': 93 },
  'FGPSF09/patrs/pasta/a.09': { "stdout": True, 'originalBound': "1+nat(A-B+1) ", 'parsedBound': "1 + max(0, A - B + 1)", 'degree': 1.0, 'variableCount': 2, 'time': 88 },
  'FGPSF09/patrs/pasta/a.05': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 85 },
  'FGPSF09/patrs/pasta/a.04': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 81 },
  'FGPSF09/patrs/pasta/a.06': { "stdout": True, 'originalBound': "1+nat(A/2-B/2-C/2+1/2) ", 'parsedBound': "1 + max(0, A / 2 - B / 2 - C / 2 + 1 / 2)", 'degree': 1.0, 'variableCount': 3, 'time': 91 },
  'FGPSF09/patrs/increase1': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 82 },
  'FGPSF09/patrs/increase2': { "stdout": True, 'originalBound': "1+nat(A-B-C) ", 'parsedBound': "1 + max(0, A - B - C)", 'degree': 1.0, 'variableCount': 3, 'time': 104 },
  'FGPSF09/patrs/sqrt': { "stdout": True, 'originalBound': "2+nat(D/2+1/2) ", 'parsedBound': "2 + max(0, D / 2 + 1 / 2)", 'degree': 1.0, 'variableCount': 1, 'time': 106 },
  'FGPSF09/patrs/random_full_no_wrap': { "errors": True, "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=5,cr=rand/3])) ", 'parseError': 'Could not parse bound', 'time': 67 },
  'FGPSF09/patrs/increase4': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 81 },
  'FGPSF09/patrs/div': { "stdout": True, 'originalBound': "2+nat(B-1) ", 'parsedBound': "2 + max(0, B - 1)", 'degree': 1.0, 'variableCount': 1, 'time': 81 },
  'FGPSF09/Beerendonk/02': { "stdout": True, 'originalBound': "1+nat(A/2-B/2+1/2) ", 'parsedBound': "1 + max(0, A / 2 - B / 2 + 1 / 2)", 'degree': 1.0, 'variableCount': 2, 'time': 75 },
  'FGPSF09/Beerendonk/10': { "stdout": True, 'originalBound': "1+nat(A) ", 'parsedBound': "1 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 88 },
  'FGPSF09/Beerendonk/16': { "stdout": True, 'originalBound': "1+nat(A+B) ", 'parsedBound': "1 + max(0, A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 113 },
  'FGPSF09/Beerendonk/23': { "stdout": True, 'originalBound': "1+nat(A-B)* (2+c(maximize_failed)) ", 'parseError': 'Could not parse bound', 'time': 102 },
  'FGPSF09/Beerendonk/01': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 80 },
  'FGPSF09/Beerendonk/06': { "stdout": True, 'originalBound': "1+nat(A) ", 'parsedBound': "1 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 75 },
  'FGPSF09/Beerendonk/20': { "stdout": True, 'originalBound': "1+log(4,3+nat(A))* (2+nat(A)) ", 'parsedBound': "1 + log(4, 3 + max(0, A)) * (2 + max(0, A))", 'degree': 1.5, 'variableCount': 1, 'time': 83 },
  'FGPSF09/Beerendonk/13': { "stdout": True, 'originalBound': "1+nat(A) ", 'parsedBound': "1 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 86 },
  'FGPSF09/Beerendonk/21': { "stdout": True, 'originalBound': "1+log(4,3+nat(A-B))* (2+nat(A-B)) ", 'parsedBound': "1 + log(4, 3 + max(0, A - B)) * (2 + max(0, A - B))", 'degree': 1.5, 'variableCount': 2, 'time': 92 },
  'FGPSF09/Beerendonk/11': { "stdout": True, 'originalBound': "1+nat(B) ", 'parsedBound': "1 + max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 122 },
  'FGPSF09/Beerendonk/22': { "stdout": True, 'originalBound': "1+nat(A)* (2+c(maximize_failed)) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'FGPSF09/Beerendonk/03': { "stdout": True, 'originalBound': "1+nat(A-B) ", 'parsedBound': "1 + max(0, A - B)", 'degree': 1.0, 'variableCount': 2, 'time': 81 },
  'FGPSF09/Beerendonk/09': { "stdout": True, 'originalBound': "1+nat(-B+C) ", 'parsedBound': "1 + max(0, 0 - B + C)", 'degree': 1.0, 'variableCount': 2, 'time': 91 },
  'FGPSF09/Beerendonk/17': { "stdout": True, 'originalBound': "1+nat(A+B) ", 'parsedBound': "1 + max(0, A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 109 },
  'FGPSF09/Beerendonk/19': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/3])) ", 'parseError': 'Could not parse bound', 'time': 93 },
  'FGPSF09/Beerendonk/24': { "stdout": True, 'originalBound': "1+log(4,3+nat(A/2+B-1/2))*max([2+nat(A),2+nat(B)]) ", 'parsedBound': "1 + log(4, 3 + max(0, A / 2 + B - 1 / 2)) * max(2 + max(0, A), 2 + max(0, B))", 'degree': 1.5, 'variableCount': 1, 'time': 113 },
  'FGPSF09/Beerendonk/05': { "stdout": True, 'originalBound': "1+nat(A) ", 'parsedBound': "1 + max(0, A)", 'degree': 1.0, 'variableCount': 1, 'time': 78 },
  'FGPSF09/Beerendonk/07': { "stdout": True, 'originalBound': "1+nat(A/3+2/3) ", 'parsedBound': "1 + max(0, A / 3 + 2 / 3)", 'degree': 1.0, 'variableCount': 1, 'time': 80 },
  'FGPSF09/Beerendonk/18': { "stdout": True, 'originalBound': "1+c(failed(no_rf,[scc=0,cr=eval/2])) ", 'parseError': 'Could not parse bound', 'time': 85 },
  'FGPSF09/Beerendonk/08': { "stdout": True, 'originalBound': "1+nat(B) ", 'parsedBound': "1 + max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 80 },
  'FGPSF09/Beerendonk/15': { "stdout": True, 'originalBound': "1+nat(A+B) ", 'parsedBound': "1 + max(0, A + B)", 'degree': 1.0, 'variableCount': 2, 'time': 97 },
  'FGPSF09/Beerendonk/04': { "stdout": True, 'originalBound': "1+log(4,3+nat(A/2-B/2+1/2)) ", 'parsedBound': "1 + log(4, 3 + max(0, A / 2 - B / 2 + 1 / 2))", 'degree': 0.5, 'variableCount': 2, 'time': 74 },
  'KoAT-2013/sect4-facSum': { "errors": True, "stdout": True, 'originalBound': "2+nat(B+1)* (6+nat(B)) ", 'parsedBound': "2 + max(0, B + 1) * (6 + max(0, B))", 'degree': 2.0, 'variableCount': 1, 'time': 72 },
  'KoAT-2013/sect5-sumSum': { "stdout": True, 'originalBound': "1+nat(B)* (2+nat(B)) ", 'parsedBound': "1 + max(0, B) * (2 + max(0, B))", 'degree': 2.0, 'variableCount': 1, 'time': 111 },
  'KoAT-2013/sect2': { "stdout": True, 'originalBound': "2+nat(B)+c(maximize_failed)* (2+c(maximize_failed)) ", 'parseError': 'Could not parse bound', 'time': 132 },
  'KoAT-2013/sect1-lin': { "stdout": True, 'originalBound': "2+nat(A)+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 91 },
  'KoAT-2013/sect1-quad': { "stdout": True, 'originalBound': "2+nat(A)+c(maximize_failed) ", 'parseError': 'Could not parse bound', 'time': 89 },
  'KoAT-2013/sect5-len': { "stdout": True, 'originalBound': "2+nat(B) ", 'parsedBound': "2 + max(0, B)", 'degree': 1.0, 'variableCount': 1, 'time': 80 },
  }

  data['PUBS2'] = {
    'T2/two_arrays2': {'errors': True}, 'c-examples/ABC/ex07': {'errors': True}, 'T2/oct_vs_subpoly': {'errors': True}, 'T2/neg-e-1394complete-succeed': {'errors': True}, 'T2/232': {'errors': True}, 'c-examples/WTC/counterex1b': {'errors': True}, 'T2/p-41': {'degree': 0.0}, 'FGPSF09/VMCAI04/complete1': {'degree': 1.0}, 'SAS10/while2': {'errors': True}, 'T2/tqli.c.i.tqli.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'KoAT-2014/adding-exp-growth3': {'errors': True}, 'T2/slayer-4-filtered': {'errors': True}, 'T2/n-12a': {'errors': True}, 'costa/jvm-cost/Concat': {'degree': 1.0}, 'T2/bf16': {'errors': True}, 'T2/p-4': {'errors': True}, 'c-examples/WTC/easy1': {'degree': 0.0}, 'T2/p-14': {'degree': 1.0}, 'T2/p-40': {'errors': True}, 'c-examples/ABC/ex15': {'errors': True}, 'T2/simple_array_inversion': {'degree': 0.0}, 'c-examples/Loopus/Example2': {'errors': True}, 'KoAT-2013/sect5-sumSum': {'errors': True}, 'FGPSF09/Beerendonk/02': {'degree': 1.0}, 'costa/jvm-cost/EvenDigitsNew': {'degree': 1.5}, 'T2/queue_100': {'degree': 0.0}, 'costa/jvm-cost/DetEval': {'errors': True}, 'c-examples/ABC/ex03': {'errors': True}, 'T2/heidy10': {'errors': True}, 'FGPSF09/patrs/pasta/a.09': {'degree': 1.0}, 'T2/svdcmp.c.i.svdcmp.pl.t2.fixed': {'errors': True}, 'c-examples/WTC/realselect': {'errors': True}, 'T2/bitcount16': {'degree': 0.0}, 'c-examples/SPEED/PLDI10/Ex5': {'errors': True}, 'T2/nested2': {'errors': True}, 'T2/efegp': {'errors': True}, 'KoAT-2013/sect1-quad': {'errors': True}, 'costa/jvm-cost/Incr': {'degree': 1.0}, 'T2/p-6': {'degree': 1.0}, 'T2/byron-1': {'degree': 1.0}, 'SAS10/exmini': {'degree': 1.0}, 'T2/dsa_test4': {'degree': 0.0}, 'c-examples/Rank/ex2': {'errors': True}, 'T2/dsa_test15': {'degree': 0.0}, 'FGPSF09/SAS05/c.02': {'errors': True}, 'T2/jacobi.c.i.jacobi.pl.t2.fixed': {'errors': True}, 'T2/n-36': {'errors': True}, 'costa/misc/mspe': {'degree': 1.0}, 'T2/n-5': {'errors': True}, 'T2/n-1d': {'errors': True}, 'costa/RAML/matrix': {'degree': 4.0}, 'c-examples/SPEED/PLDI10/Ex4': {'errors': True}, 'T2/heidy7-simple': {'errors': True}, 'T2/matmul': {'errors': True}, 'T2/toeplz.c.i.toeplz.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'FGPSF09/VMCAI05/poly1': {'errors': True}, 'FGPSF09/Beerendonk/08': {'degree': 1.0}, 'T2/ex10': {'errors': True}, 'T2/p-52': {'errors': True}, 'FGPSF09/patrs/pasta/a.03': {'errors': True}, 'FGPSF09/Beerendonk/03': {'degree': 1.0}, 'T2/intSqRoot': {'errors': True}, 'KoAT-2013/sect1-lin': {'errors': True}, 'c-examples/SPEED/POPL09/NestedMultipleDep': {'errors': True}, 'costa/RAML/cleavermmult': {'degree': 3.0}, 'T2/heidy6': {'errors': True}, 'T2/p-20': {'errors': True}, 'T2/bsort100': {'errors': True}, 'T2/ex31': {'errors': True}, 'T2/neg-e-pgarch-succeed': {'errors': True}, 'T2/neg-1394complete-fail': {'errors': True}, 'T2/p-1a': {'errors': True}, 'T2/ex14': {'degree': 0.0}, 'T2/heidy7': {'errors': True}, 'T2/d': {'errors': True}, 'T2/fun2b': {'errors': True}, 'SAS10/easy2': {'degree': 1.0}, 'T2/pentagon': {'errors': True}, 'T2/ex7': {'degree': 0.0}, 'T2/nakata_withassume': {'errors': True}, 'T2/minmax': {'degree': 0.0}, 'T2/neg-e-pgarch-fail': {'errors': True}, 'T2/subpoly_crash': {'errors': True}, 'T2/edn': {'errors': True}, 'T2/selectSort': {'errors': True}, 'T2/ex16': {'errors': True}, 'T2/ctl': {'errors': True}, 'T2/fun3': {'errors': True}, 'FGPSF09/Beerendonk/06': {'degree': 1.0}, 'T2/p-36': {'errors': True}, 'T2/7': {'errors': True}, 'T2/qrdcmp.c.i.qrdcmp.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/dropbuf': {'errors': True}, 'T2/dsa_test12': {'degree': 0.0}, 'T2/pearl-necklace': {'errors': True}, 'T2/simple_pre3': {'degree': 0.0}, 'FGPSF09/RTA08/round': {'errors': True}, 'FGPSF09/ESOP08/abstractions': {'errors': True}, 'SAS10/perfect': {'errors': True}, 'SAS10/wise': {'degree': 1.0}, 'T2/p-1': {'errors': True}, 'T2/bf14': {'errors': True}, 'FGPSF09/new/randomFullUpDown': {'errors': True}, 'FGPSF09/patrs/pasta/a.02': {'errors': True}, 'T2/vmcai_struct': {'degree': 0.0}, 'T2/eric': {'errors': True}, 'c-examples/WTC/cousot9': {'errors': True}, 'T2/wtf': {'errors': True}, 'FGPSF09/CAV02/practical2': {'degree': 1.0}, 'T2/p-18': {'degree': 1.0}, 'KoAT-2013/sect4-facSum': {'degree': 2.0}, 'T2/cover': {'errors': True}, 'T2/p-44': {'degree': 1.0}, 'c-examples/WTC/realbubble': {'errors': True}, 'T2/two_arrays': {'degree': 0.0}, 'T2/p-8': {'errors': True}, 'T2/dropbuf-live': {'degree': 0.0}, 'T2/slayer-n3-filtered': {'degree': 0.0}, 'T2/db3': {'errors': True}, 'FGPSF09/Beerendonk/07': {'degree': 1.0}, 'FGPSF09/PLDI06/c.03': {'errors': True}, 'T2/spctrm': {'errors': True}, 'T2/p-45': {'degree': 1.0}, 'T2/Loop': {'errors': True}, 'T2/consts2nt': {'errors': True}, 'T2/crc': {'errors': True}, 'c-examples/Loopus/Example3': {'errors': True}, 'T2/elmhes.c.i.elmhes.pl.t2.fixed': {'errors': True}, 'T2/loop3': {'errors': True}, 'costa/jvm-cost/DivByTwo': {'degree': 0.5}, 'costa/misc/direct_n_log_n': {'degree': 0.5}, 'T2/simpleWhile': {'degree': 1.0}, 'T2/ex27': {'degree': 0.0}, 'T2/bio': {'errors': True}, 'T2/p-43': {'errors': True}, 'T2/db2': {'errors': True}, 'costa/jvm-cost/ArrayReverse': {'degree': 1.0}, 'T2/polyrank7': {'errors': True}, 'SAS10/random2d': {'degree': 1.0}, 'T2/firewire': {'errors': True}, 'T2/ndes': {'errors': True}, 'T2/destroy_seg_leak': {'errors': True}, 'T2/rewrite': {'errors': True}, 'T2/spctrm.c.i.spctrm.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/array3': {'degree': 0.0}, 'T2/apchild-live': {'errors': True}, 'T2/heidy9': {'degree': 1.0}, 'costa/RAML/dyade': {'degree': 2.0}, 'T2/fuhs-inflasso': {'errors': True}, 'T2/bf17': {'errors': True}, 'FGPSF09/patrs/pasta/a.04': {'degree': 1.0}, 'T2/qrdcmp': {'errors': True}, 'T2/e-pgarch-fail': {'errors': True}, 'T2/mc91': {'errors': True}, 'T2/matrixsqrt': {'errors': True}, 'T2/smagilla-succeed': {'errors': True}, 'FGPSF09/Beerendonk/22': {'errors': True}, 'c-examples/ABC/ex08': {'errors': True}, 'T2/n-32': {'errors': True}, 'T2/popl07-succeed': {'errors': True}, 'T2/bf12': {'errors': True}, 'T2/n-8a': {'errors': True}, 'T2/agafp': {'errors': True}, 'T2/ex15': {'degree': 0.0}, 'FGPSF09/VMCAI05/poly3': {'errors': True}, 'T2/n-14': {'errors': True}, 'c-examples/SPEED/CAV09/ex1': {'errors': True}, 'FGPSF09/Beerendonk/04': {'degree': 0.5}, 'T2/byron-4': {'errors': True}, 'c-examples/WTC/realheapsort_step1': {'errors': True}, 'FGPSF09/LICS04/choice': {'errors': True}, 'T2/eric3': {'errors': True}, 'T2/n-15': {'errors': True}, 'T2/toeplz': {'errors': True}, 'T2/popl07-fail': {'errors': True}, 'T2/bf8': {'errors': True}, 'FGPSF09/Beerendonk/10': {'degree': 1.0}, 'T2/fibcall': {'degree': 0.0}, 'T2/bubbleSort': {'errors': True}, 'KoAT-2014/adding-exp-growth2': {'errors': True}, 'c-examples/SPEED/POPL09/SimpleMultiple': {'errors': True}, 'FGPSF09/patrs/pasta/a.01': {'errors': True}, 'T2/sumit': {'errors': True}, 'T2/ex6': {'degree': 0.0}, 'FGPSF09/Beerendonk/15': {'degree': 1.0}, 'FGPSF09/VMCAI05/poly2': {'errors': True}, 'T2/neg-e-acqrel-fail': {'errors': True}, 'T2/apchild-accepted': {'errors': True}, 'T2/1394complete-fail': {'errors': True}, 'T2/p-7b': {'degree': 1.0}, 'FGPSF09/Beerendonk/18': {'errors': True}, 'T2/tqli': {'errors': True}, 'FGPSF09/patrs/pasta/a.08': {'degree': 1.0}, 'T2/fun5': {'errors': True}, 'T2/non_term': {'errors': True}, 'T2/ex19': {'errors': True}, 'c-examples/SPEED/POPL09/SimpleMultipleDep': {'errors': True}, 'T2/consts4': {'degree': 1.0}, 'T2/n-16a': {'errors': True}, 'T2/bf18': {'errors': True}, 'SAS10/nestedLoop': {'errors': True}, 'T2/ex21': {'degree': 0.0}, 'costa/misc/no_cover_point': {'errors': True}, 'costa/misc/exponential': {'degree': 10000}, 'T2/dsa_test': {'degree': 0.0}, 'T2/fun8': {'errors': True}, 'SAS10/rsd': {'errors': True}, 'c-examples/SPEED/PLDI10/Ex7': {'errors': True}, 'SAS10/realheapsort': {'errors': True}, 'T2/w2_nt': {'errors': True}, 'c-examples/WTC/random2d': {'degree': 1.0}, 'c-examples/WTC/easy2': {'degree': 1.0}, 'SAS10/speedpldi3': {'errors': True}, 'costa/misc/n_log_n': {'errors': True}, 'costa/RAML/minsort': {'degree': 2.0}, 'costa/jvm-cost/EvenDigits': {'degree': 1.5}, 'costa/misc/logarithmic': {'errors': True}, 'T2/simple_double_free': {'degree': 0.0}, 'FGPSF09/VMCAI05/poly4': {'errors': True}, 'T2/curious': {'errors': True}, 'costa/jvm-cost/Power': {'degree': 1.0}, 'T2/p-7': {'degree': 1.0}, 'T2/fun4': {'errors': True}, 'T2/fdct': {'degree': 0.0}, 'T2/bf6': {'errors': True}, 'c-examples/SPEED/PLDI10/Ex6': {'errors': True}, 'T2/neg-1394complete-succeed': {'errors': True}, 'FGPSF09/Beerendonk/16': {'degree': 1.0}, 'SAS10/ndecr': {'degree': 1.0}, 'T2/n-13': {'errors': True}, 'T2/qrdcmp.c.i.qrdcmp.pl.t2.fixed': {'errors': True}, 'T2/bf13': {'errors': True}, 'T2/streamserver-succeed': {'errors': True}, 'T2/n-1c': {'errors': True}, 'T2/heidy3': {'errors': True}, 'T2/slayer-n1': {'errors': True}, 'T2/simple_fail': {'degree': 0.0}, 'T2/polyrank5': {'errors': True}, 'T2/ex23': {'degree': 0.0}, 'T2/sort': {'errors': True}, 'T2/fun4-alt': {'errors': True}, 'T2/array': {'degree': 0.0}, 'SAS10/easy1': {'degree': 0.0}, 'T2/afagp-fail': {'errors': True}, 'SAS10/ax': {'errors': True}, 'c-examples/WTC/random1d': {'degree': 1.0}, 'FGPSF09/Beerendonk/20': {'degree': 1.0}, 'T2/ex29': {'degree': 0.0}, 'T2/fun7': {'errors': True}, 'T2/ex2': {'errors': True}, 'T2/p-32': {'errors': True}, 'T2/n-1': {'errors': True}, 'T2/a.10.c': {'errors': True}, 'T2/ex9': {'errors': True}, 'T2/heidy5': {'degree': 1.0}, 'T2/hqr.c.i.hqr.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/matmult': {'errors': True}, 'FGPSF09/Beerendonk/19': {'errors': True}, 'c-examples/ABC/ex11': {'errors': True}, 'T2/svdcmp.c.i.svdcmp.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/ludcmp.c.i.ludcmp.pl.t2.fixed': {'errors': True}, 'T2/consts3': {'degree': 1.0}, 'T2/ex22': {'degree': 0.0}, 'FGPSF09/patrs/increase4': {'degree': 1.0}, 'T2/pgarch': {'errors': True}, 'T2/eric2': {'errors': True}, 'T2/n-7': {'errors': True}, 'c-examples/WTC/sipmabubble': {'errors': True}, 'T2/bf20': {'errors': True}, 'FGPSF09/patrs/pasta/a.06': {'degree': 1.0}, 'T2/iecs': {'degree': 1.0}, 'c-examples/WTC/speedFails4': {'errors': True}, 'FGPSF09/patrs/pasta/a.10': {'errors': True}, 'c-examples/SPEED/PLDI10/Ex3': {'errors': True}, 'T2/complex_guard': {'degree': 0.0}, 'T2/n-48': {'errors': True}, 'T2/array1': {'degree': 0.0}, 'T2/ex18': {'errors': True}, 'T2/n-18a': {'errors': True}, 'c-examples/SPEED/POPL09/Dis2': {'errors': True}, 'T2/1394-succeed': {'errors': True}, 'costa/jvm-cost/Hanoi': {'degree': 10000}, 'T2/rev_nt2': {'errors': True}, 'T2/brp': {'errors': True}, 'T2/spiral': {'errors': True}, 'T2/jacobi.c.i.jacobi.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'FGPSF09/Beerendonk/05': {'degree': 1.0}, 'T2/2': {'errors': True}, 'T2/fourn.c.i.fourn.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/queens': {'errors': True}, 'T2/fun10b': {'errors': True}, 'T2/graycode': {'errors': True}, 'T2/dummy': {'errors': True}, 'T2/fun1b': {'errors': True}, 'T2/neg-smagilla-fail': {'errors': True}, 'T2/ase_example': {'degree': 0.0}, 'T2/seq': {'degree': 1.0}, 'T2/dsa_test10': {'degree': 0.0}, 'T2/e-acqrel-fail': {'errors': True}, 'T2/consts4nt': {'errors': True}, 'T2/toeplz.c.i.toeplz.pl.t2.fixed': {'errors': True}, 'T2/ex13': {'degree': 0.0}, 'FGPSF09/CAV05/c.05': {'degree': 1.0}, 'T2/p-16': {'degree': 1.0}, 'T2/n-6a': {'errors': True}, 'T2/buggyNonTermLoop': {'errors': True}, 'T2/curious4': {'errors': True}, 'T2/mc91test': {'errors': True}, 'T2/simple_pre1': {'degree': 0.0}, 'costa/RAML/eratosthenes': {'degree': 2.0}, 'costa/RAML/lcs': {'degree': 2.0}, 'c-examples/SPEED/CAV09/ex2': {'errors': True}, 'T2/queue_10': {'degree': 0.0}, 'costa/RAML/insertionsort': {'degree': 2.0}, 'FGPSF09/patrs/increase1': {'degree': 1.0}, 'c-examples/ABC/ex14': {'errors': True}, 'T2/destroy': {'errors': True}, 'SAS10/realselect': {'errors': True}, 'T2/magic': {'errors': True}, 'T2/p-19': {'errors': True}, 'c-examples/SPEED/PLDI09/Example3': {'errors': True}, 'SAS10/ackermann': {'degree': 1.0}, 'c-examples/WTC/realheapsort': {'errors': True}, 'T2/send-more-money': {'errors': True}, 'T2/zeroconf': {'errors': True}, 'T2/p-33': {'errors': True}, 'FGPSF09/patrs/random_full_no_wrap': {'errors': True}, 'T2/broydn': {'errors': True}, 'T2/ex34': {'degree': 0.0}, 'FGPSF09/patrs/div': {'degree': 1.0}, 'T2/n-4': {'errors': True}, 'SAS10/determinant': {'errors': True}, 'costa/jvm-cost/ms': {'errors': True}, 'T2/refine_disj_problem': {'errors': True}, 'KoAT-2014/exp-calls': {'degree': 10000}, 'T2/polyrank2': {'errors': True}, 'FGPSF09/patrs/increase3': {'degree': 1.0}, 'T2/create_seg': {'errors': True}, 'T2/p-13': {'degree': 0.0}, 'c-examples/SPEED/PLDI09/cyclic': {'errors': True}, 'T2/hqr': {'errors': True}, 'T2/constants': {'degree': 0.0}, 'c-examples/ABC/ex12': {'degree': 1.0}, 'T2/consts5nt': {'errors': True}, 'T2/e-acqrel-succeed': {'errors': True}, 'T2/randomwalk_withassume': {'errors': True}, 'T2/fake-succeed': {'errors': True}, 'c-examples/WTC/complex': {'errors': True}, 'T2/fun6': {'errors': True}, 'T2/ex4': {'degree': 0.0}, 'c-examples/Loopus/Example1': {'degree': 1.0}, 'c-examples/ABC/ex02': {'errors': True}, 'FGPSF09/patrs/sumto_no_if': {'degree': 1.0}, 'T2/5': {'errors': True}, 'T2/heidy8': {'errors': True}, 'T2/bf15': {'errors': True}, 'T2/ex36': {'errors': True}, 'T2/ex26': {'degree': 0.0}, 'SAS10/wcet1': {'degree': 1.0}, 'costa/RAML/listsort': {'degree': 3.0}, 'KoAT-2014/nesting-ex1': {'errors': True}, 'SAS10/complex': {'errors': True}, 'T2/e-1394complete-succeed': {'errors': True}, 'c-examples/WTC/terminate': {'degree': 1.0}, 'T2/sas2': {'errors': True}, 'T2/slayer-n1-filtered': {'errors': True}, 'T2/ex33': {'degree': 0.0}, 'FGPSF09/Beerendonk/23': {'errors': True}, 'T2/rev_nt3': {'errors': True}, 'T2/rlft3': {'errors': True}, 'T2/fast_poll': {'errors': True}, 'c-examples/ABC/ex13': {'errors': True}, 'T2/huh': {'errors': True}, 'T2/apchild-accepted-fail': {'errors': True}, 'T2/statemate': {'errors': True}, 'T2/fir': {'errors': True}, 'T2/elmhes': {'errors': True}, 'T2/p-5': {'errors': True}, 'T2/zeroconf_withassume': {'errors': True}, 'T2/bf5': {'errors': True}, 'c-examples/WTC/insertsort': {'errors': True}, 'c-examples/SPEED/PLDI09/NestedLoop': {'errors': True}, 'c-examples/ABC/ex05': {'errors': True}, 'T2/p-34': {'errors': True}, 'KoAT-2013/sect2': {'errors': True}, 'T2/ex12': {'degree': 0.0}, 'T2/1394-fail': {'errors': True}, 'FGPSF09/Beerendonk/17': {'degree': 1.0}, 'c-examples/SPEED/POPL09/SimpleSingle': {'degree': 1.0}, 'T2/p-61': {'degree': 0.0}, 'KoAT-2013/sect5-len': {'degree': 1.0}, 'T2/polling.bug': {'errors': True}, 'T2/cnt': {'errors': True}, 'FGPSF09/TACAS01/terminate': {'degree': 1.0}, 'c-examples/WTC/realshellsort': {'errors': True}, 'costa/jvm-cost/Polynomial': {'degree': 0.0}, 'T2/dsa_test9': {'degree': 0.0}, 'T2/3': {'errors': True}, 'c-examples/SPEED/POPL09/NestedSingle': {'degree': 1.0}, 'T2/fun10': {'errors': True}, 'T2/ex40': {'errors': True}, 'FGPSF09/patrs/random_no_wrap': {'degree': 1.0}, 'T2/p-43-terminate': {'errors': True}, 'SAS10/insertsort': {'errors': True}, 'T2/dsa_test11': {'degree': 0.0}, 'T2/two_arrays6': {'errors': True}, 'T2/w1': {'errors': True}, 'T2/e-pgarch-succeed': {'errors': True}, 'costa/RAML/mergesort': {'degree': 1.5}, 'T2/array_free': {'degree': 0.0}, 'T2/traverse_seg': {'errors': True}, 'T2/sas1': {'degree': 1.0}, 'T2/1394complete-succeed': {'errors': True}, 'costa/RAML/duplicates': {'degree': 1.0}, 'T2/bs': {'errors': True}, 'T2/array_init_assign': {'degree': 0.0}, 'T2/n-8': {'errors': True}, 'c-examples/SPEED/PLDI10/Ex2': {'errors': True}, 'c-examples/SPEED/POPL09/NestedMultiple': {'errors': True}, 'T2/p-49': {'degree': 1.0}, 'SAS10/aaron2': {'errors': True}, 'c-examples/SPEED/POPL09/SequentialSingle': {'degree': 1.0}, 'T2/traverse': {'errors': True}, 'T2/sequential_swap': {'degree': 0.0}, 'T2/n_firewire_instrumented-PP': {'errors': True}, 'costa/misc/ms': {'degree': 1.0}, 'T2/example': {'degree': 1.0}, 'SAS10/relation1': {'degree': 0.0}, 'costa/jvm-cost/SelectOrd': {'degree': 2.0}, 'T2/acqrel-fail': {'errors': True}, 'T2/consts5': {'errors': True}, 'costa/misc/merge': {'degree': 1.0}, 'c-examples/WTC/aaron2': {'degree': 1.0}, 'T2/polyrank3': {'errors': True}, 'c-examples/ABC/ex10': {'errors': True}, 'costa/jvm-cost/ListReverse': {'degree': 1.0}, 'T2/hongyi1': {'errors': True}, 'T2/n-37': {'errors': True}, 'T2/st88.bug': {'errors': True}, 'c-examples/ABC/ex04': {'errors': True}, 'T2/rlft3.c.i.rlft3.pl.t2.fixed': {'errors': True}, 'T2/dsa_test13': {'degree': 0.0}, 'T2/smagillb-succeed': {'errors': True}, 'T2/ex17': {'degree': 0.0}, 'c-examples/WTC/nd_loop': {'degree': 0.0}, 'SAS10/gcd': {'errors': True}, 'T2/jfdctint': {'degree': 0.0}, 'T2/queue_1000': {'degree': 0.0}, 'T2/p-15': {'degree': 1.0}, 'c-examples/ABC/ex06': {'errors': True}, 'SAS10/speedpldi2': {'degree': 1.0}, 'T2/e-popl07-fail': {'errors': True}, 'T2/bf11': {'errors': True}, 'T2/new_ex': {'errors': True}, 'T2/p-19a': {'errors': True}, 'T2/p-3': {'degree': 1.0}, 'T2/polyrank4': {'errors': True}, 'T2/ex8': {'errors': True}, 'FGPSF09/patrs/pasta/a.05': {'degree': 1.0}, 'T2/n-33': {'errors': True}, 'costa/RAML/quicksort': {'degree': 2.0}, 'T2/s3-work': {'errors': True}, 'costa/jvm-cost/MergeList': {'degree': 1.0}, 'T2/n-40': {'errors': True}, 'T2/seq2': {'degree': 1.0}, 'c-examples/SPEED/POPL09/SimpleSingle2': {'errors': True}, 'T2/ex37': {'degree': 0.0}, 'T2/p-53': {'degree': 0.0}, 'T2/p-58': {'degree': 0.0}, 'SAS10/cousot9': {'errors': True}, 'T2/p-55': {'errors': True}, 'c-examples/WTC/nestedLoop': {'errors': True}, 'FGPSF09/new/unsatCond2': {'errors': True}, 'T2/dead.neg-st88b-succeed': {'errors': True}, 'T2/n-12': {'errors': True}, 'SAS10/sipmabubble': {'errors': True}, 'c-examples/WTC/loops': {'errors': True}, 'T2/heidy1': {'errors': True}, 'T2/hqr.c.i.hqr.pl.t2.fixed': {'errors': True}, 'costa/RAML/bitvectors': {'degree': 3.0}, 'T2/n-10': {'errors': True}, 'T2/collatz': {'errors': True}, 'SAS10/random1d': {'degree': 1.0}, 'T2/loop_on_input': {'errors': True}, 'T2/cfg': {'errors': True}, 'c-examples/WTC/wise': {'errors': True}, 'FGPSF09/VMCAI04/complete4': {'errors': True}, 'SAS10/maccarthy91': {'degree': 1.0}, 'SAS10/realshellsort': {'errors': True}, 'costa/misc/ack': {'errors': True}, 'T2/invgen': {'degree': 1.0}, 'costa/jvm-cost/ListInter': {'degree': 2.0}, 'c-examples/WTC/speedpldi2': {'degree': 1.0}, 'SAS10/wcet2': {'errors': True}, 'FGPSF09/VMCAI04/complete2': {'errors': True}, 'c-examples/WTC/sipma91': {'degree': 1.0}, 'FGPSF09/patrs/pasta/a.07': {'degree': 1.0}, 'T2/fun11': {'errors': True}, 'T2/byron-3': {'errors': True}, 'T2/p-10': {'errors': True}, 'T2/svdcmp': {'errors': True}, 'T2/broydn.c.i.broydn.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/p-21': {'errors': True}, 'T2/fun9': {'errors': True}, 'T2/ex32': {'degree': 0.0}, 'T2/slayer-3-new': {'errors': True}, 'T2/neg-popl07-succeed': {'errors': True}, 'T2/p-1c': {'errors': True}, 'FGPSF09/CAV02/practical1': {'errors': True}, 'T2/fun2': {'errors': True}, 'T2/heidy2': {'errors': True}, 'T2/n-3': {'errors': True}, 'c-examples/WTC/gcd': {'degree': 1.0}, 'T2/n-15a': {'errors': True}, 'T2/p-12': {'degree': 1.0}, 'c-examples/WTC/wcet1': {'errors': True}, 'T2/slayer-1-filtered': {'errors': True}, 'T2/fun1': {'errors': True}, 'KoAT-2014/scaling-doubly-exp-growth': {'errors': True}, 'T2/reverse': {'errors': True}, 'SAS10/speedpldi4': {'degree': 1.0}, 'costa/jvm-cost/LinEqSolve': {'errors': True}, 'T2/create': {'errors': True}, 'T2/dsa_test5': {'degree': 0.0}, 'T2/p-46': {'errors': True}, 'T2/n-46': {'errors': True}, 'T2/p-1d': {'degree': 1.0}, 'T2/n-17': {'errors': True}, 'c-examples/SPEED/PLDI09/Example2': {'degree': 1.0}, 'T2/n-3a': {'errors': True}, 'costa/jvm-cost/MatMult': {'degree': 3.0}, 'T2/neg-popl07-fail': {'errors': True}, 'c-examples/WTC/ax': {'errors': True}, 'T2/tqli.c.i.tqli.pl.t2.fixed': {'errors': True}, 'T2/rev_nt4': {'degree': 0.0}, 'T2/two_arrays1': {'degree': 0.0}, 'costa/jvm-cost/Factorial': {'degree': 1.0}, 'T2/dsa_test1': {'degree': 0.0}, 'c-examples/ABC/ex01': {'degree': 1.0}, 'T2/flipflop': {'errors': True}, 'T2/fourn.c.i.fourn.pl.t2.fixed': {'errors': True}, 'T2/vmcai_bytes': {'degree': 0.0}, 'T2/bf19': {'errors': True}, 'T2/polyrank6': {'errors': True}, 'c-examples/WTC/speedpldi3': {'errors': True}, 'costa/jvm-cost/Matrixinverse': {'errors': True}, 'T2/apchildlive-succeed': {'errors': True}, 'c-examples/Rank/ex1': {'errors': True}, 'T2/slayer-3-filtered': {'errors': True}, 'c-examples/SPEED/PLDI09/Example4': {'errors': True}, 'costa/jvm-cost/Fibonacci': {'degree': 10000}, 'T2/simple_control_on_input': {'degree': 0.0}, 'c-examples/SPEED/POPL09/Dis1': {'errors': True}, 'T2/1': {'errors': True}, 'T2/walk': {'errors': True}, 'T2/traverse_seg2': {'errors': True}, 'T2/randomwalk': {'errors': True}, 'T2/jacobi': {'errors': True}, 'T2/bf9': {'errors': True}, 'T2/byron-2': {'errors': True}, 'T2/bitcount32': {'degree': 0.0}, 'T2/neg-smagilla-succeed': {'errors': True}, 'T2/polling': {'errors': True}, 'FGPSF09/patrs/pasta/a.11': {'errors': True}, 'SAS10/loops': {'errors': True}, 'T2/neg-pgarch-succeed': {'errors': True}, 'c-examples/ABC/ex09': {'errors': True}, 'costa/misc/divide_and_conquer': {'degree': 10000}, 'FGPSF09/patrs/increase2': {'degree': 1.0}, 'FGPSF09/Beerendonk/24': {'errors': True}, 'costa/jvm-cost/Delete': {'degree': 2.0}, 'T2/p-37': {'degree': 0.0}, 'T2/queue_1': {'degree': 0.0}, 'T2/ludcmp.c.i.ludcmp.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/consts1nt': {'errors': True}, 'FGPSF09/patrs/sqrt': {'degree': 1.0}, 'c-examples/WTC/ndecr': {'degree': 1.0}, 'T2/ex3': {'degree': 0.0}, 'T2/afagx1': {'errors': True}, 'T2/slayer-n2': {'errors': True}, 'T2/smagillc-fail': {'errors': True}, 'T2/select': {'errors': True}, 'T2/slayer-3': {'errors': True}, 'T2/consts3nt': {'errors': True}, 'c-examples/WTC/perfect': {'errors': True}, 'FGPSF09/Beerendonk/01': {'degree': 1.0}, 'T2/ns': {'errors': True}, 'c-examples/WTC/rsd': {'errors': True}, 'T2/st88': {'errors': True}, 'costa/misc/linear': {'degree': 1.0}, 'T2/241': {'errors': True}, 'c-examples/WTC/wcet2': {'errors': True}, 'c-examples/Rank/ex3': {'degree': 1.0}, 'T2/fermat': {'degree': 0.0}, 'T2/print': {'errors': True}, 'T2/neg-e-acqrel-succeed': {'errors': True}, 'costa/jvm-cost/BST': {'degree': 10000}, 'SAS10/speedFails4': {'degree': 1.0}, 'T2/p-42': {'errors': True}, 'KoAT-2014/scaling-exp-growth': {'errors': True}, 'T2/traverse_twice': {'errors': True}, 'T2/broydn.c.i.broydn.pl.t2.fixed': {'errors': True}, 'c-examples/SPEED/PLDI10/Ex1': {'errors': True}, 'T2/p-1b': {'degree': 1.0}, 'SAS10/nd_loop': {'degree': 0.0}, 'T2/polyrank1': {'errors': True}, 'T2/create_via_tmps': {'degree': 1.0}, 'T2/eric1': {'errors': True}, 'T2/slayer-1-rf': {'errors': True}, 'T2/ex1': {'errors': True}, 'T2/simple_pre': {'degree': 0.0}, 'T2/streamserver.bug': {'errors': True}, 'T2/stored': {'errors': True}, 'T2/pldi': {'errors': True}, 'costa/RAML/rationalPotential': {'degree': 1.0}, 'FGPSF09/VMCAI04/complete3': {'errors': True}, 'T2/bf7': {'errors': True}, 'c-examples/SPEED/PLDI09/Example6': {'errors': True}, 'T2/p-9': {'errors': True}, 'T2/n-18': {'errors': True}, 'FGPSF09/LICS04/c.01': {'errors': True}, 'T2/janne_complex': {'errors': True}, 'T2/nakata': {'errors': True}, 'T2/n-16': {'errors': True}, 'T2/slayer-2-filtered': {'degree': 0.0}, 'T2/p-56': {'degree': 1.0}, 'T2/p-63': {'degree': 1.0}, 'T2/slayer-n5-filtered': {'errors': True}, 'T2/slayer-n2-filtered': {'errors': True}, 'SAS10/counterex1': {'errors': True}, 'T2/consts1': {'errors': True}, 'T2/dsa_test8': {'degree': 0.0}, 'T2/n-21': {'errors': True}, 'T2/consts2': {'degree': 1.0}, 'T2/wrong_loop': {'errors': True}, 'T2/array_init': {'degree': 0.0}, 'c-examples/WTC/speedpldi4': {'degree': 1.0}, 'T2/ex11': {'errors': True}, 'T2/fourn': {'errors': True}, 'costa/jvm-cost/Cons': {'degree': 1.0}, 'T2/brp_withassume': {'errors': True}, 'T2/n-20': {'errors': True}, 'T2/simple_swap_call': {'degree': 0.0}, 'SAS10/realbubble': {'errors': True}, 'T2/array2': {'degree': 0.0}, 'T2/s1-saved': {'errors': True}, 'T2/neg-e-1394complete-fail': {'errors': True}, 'T2/elmhes.c.i.elmhes.pl.t2.nor.t2.rlgfixed': {'errors': True}, 'T2/n-9': {'errors': True}, 'T2/disj_nightmare_abi': {'errors': True}, 'FGPSF09/PLDI06/c.04': {'degree': 1.0}, 'SAS10/terminate': {'degree': 1.0}, 'T2/simple_pre2': {'degree': 0.0}, 'T2/reverse_div4': {'errors': True}, 'T2/bubblesort_inner_loop': {'degree': 0.0}, 'costa/jvm-cost/FibonacciNew': {'degree': 10000}, 'T2/dsa_test6': {'degree': 0.0}, 'c-examples/SPEED/PLDI09/Example5': {'errors': True}, 'costa/misc/quadratic': {'degree': 2.0}, 'T2/traverse2': {'errors': True}, 'T2/ex20': {'degree': 0.0}, 'c-examples/WTC/while2': {'errors': True}, 'T2/destroy_seg': {'errors': True}, 'T2/simple': {'errors': True}, 'T2/nested': {'errors': True}, 'T2/ex30': {'errors': True}, 'T2/insertsort': {'errors': True}, 'FGPSF09/Beerendonk/11': {'degree': 1.0}, 'T2/p-22': {'degree': 1.0}, 'T2/neg-e-popl07-succeed': {'errors': True}, 'c-examples/WTC/exmini': {'degree': 1.0}, 'KoAT-2014/adding-exp-growth1': {'errors': True}, 'c-examples/WTC/realheapsort_step2': {'errors': True}, 'T2/ud': {'errors': True}, 'costa/jvm-cost/FactSum': {'degree': 2.0}, 'T2/ludcmp': {'errors': True}, 'T2/spctrm.c.i.spctrm.pl.t2.fixed': {'errors': True}, 'T2/sudoku': {'errors': True}, 'FGPSF09/Beerendonk/09': {'degree': 1.0}, 'T2/6': {'errors': True}, 'c-examples/SPEED/CAV09/ex3': {'degree': 1.0}, 'T2/p-60': {'degree': 0.0}, 'T2/reverse_seg_cyclic': {'errors': True}, 'FGPSF09/Beerendonk/21': {'degree': 1.0}, 'FGPSF09/Beerendonk/13': {'degree': 1.0}, 'T2/smagillc-succeed': {'errors': True}, 'costa/jvm-cost/FactSumNew': {'degree': 2.0}, 'T2/n-6': {'errors': True}, 'T2/bf10': {'errors': True}}